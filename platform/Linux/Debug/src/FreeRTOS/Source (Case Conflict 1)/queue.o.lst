   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"queue.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	prvUnlockQueue:
  25              	.LFB12:
  26              		.file 1 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/que
   1:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
   2:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     FreeRTOS V7.3.0 - Copyright (C) 2012 Real Time Engineers Ltd.
   3:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
   4:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT 
   5:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
   7:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     ***************************************************************************
   8:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *                                                                       *
   9:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
  10:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
  11:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    available.                                                         *
  12:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *                                                                       *
  13:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  14:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    ensuring you get running as quickly as possible and with an        *
  15:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  16:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  17:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    professional grade, cross platform, de facto standard solutions    *
  18:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    for microcontrollers - completely free of charge!                  *
  19:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *                                                                       *
  20:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  21:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *                                                                       *
  22:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  23:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *                                                                       *
  24:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     ***************************************************************************
  25:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  26:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  27:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     This file is part of the FreeRTOS distribution.
  28:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  29:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  30:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  31:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  32:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  33:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  34:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     provide the source code for proprietary components outside of the FreeRTOS
  35:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  36:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  37:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  38:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     more details. You should have received a copy of the GNU General Public
  39:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  40:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  41:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     by writing to Richard Barry, contact details for whom are available on the
  42:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     FreeRTOS WEB site.
  43:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  44:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     1 tab == 4 spaces!
  45:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     
  46:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     ***************************************************************************
  47:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *                                                                       *
  48:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  49:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    not run, what could be wrong?"                                     *
  50:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *                                                                       *
  51:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  52:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****      *                                                                       *
  53:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     ***************************************************************************
  54:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  55:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     
  56:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     http://www.FreeRTOS.org - Documentation, training, latest versions, license 
  57:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     and contact details.  
  58:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     
  59:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  60:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool.
  61:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  62:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     Real Time Engineers ltd license FreeRTOS to High Integrity Systems, who sell 
  63:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     the code with commercial support, indemnification, and middleware, under 
  64:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     the OpenRTOS brand: http://www.OpenRTOS.com.  High Integrity Systems also
  65:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     provide a safety engineered and independently SIL3 certified version under 
  66:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****     the SafeRTOS brand: http://www.SafeRTOS.com.
  67:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** */
  68:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  69:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #include <stdlib.h>
  70:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #include <string.h>
  71:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  72:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  73:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  74:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** task.h is included from an application file. */
  75:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  76:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  77:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #include "FreeRTOS.h"
  78:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #include "task.h"
  79:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  80:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  81:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	#include "croutine.h"
  82:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
  83:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  84:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  85:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  86:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------
  87:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * PUBLIC LIST API documented in list.h
  88:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  *----------------------------------------------------------*/
  89:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  90:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /* Constants used with the cRxLock and xTxLock structure members. */
  91:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueUNLOCKED					( ( signed portBASE_TYPE ) -1 )
  92:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( signed portBASE_TYPE ) 0 )
  93:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  94:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueERRONEOUS_UNBLOCK			( -1 )
  95:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
  96:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /* For internal use only. */
  97:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define	queueSEND_TO_BACK				( 0 )
  98:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define	queueSEND_TO_FRONT				( 1 )
  99:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 100:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /* Effectively make a union out of the xQUEUE structure. */
 101:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define pxMutexHolder					pcTail
 102:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define uxQueueType						pcHead
 103:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define uxRecursiveCallCount			pcReadFrom
 104:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 105:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 106:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /* Semaphores do not actually store or copy data, so have an items size of
 107:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** zero. */
 108:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( unsigned portBASE_TYPE ) 0 )
 109:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueDONT_BLOCK					 ( ( portTickType ) 0U )
 110:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( portTickType ) 0U )
 111:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 112:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /* These definitions *must* match those in queue.h. */
 113:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueQUEUE_TYPE_BASE				( 0U )
 114:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueQUEUE_TYPE_MUTEX 				( 1U )
 115:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueQUEUE_TYPE_COUNTING_SEMAPHORE	( 2U )
 116:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueQUEUE_TYPE_BINARY_SEMAPHORE	( 3U )
 117:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define queueQUEUE_TYPE_RECURSIVE_MUTEX		( 4U )
 118:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 119:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 120:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Definition of the queue used by the scheduler.
 121:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Items are queued by copy, not reference.
 122:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 123:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** typedef struct QueueDefinition
 124:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 125:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed char *pcHead;				/*< Points to the beginning of the queue storage area. */
 126:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed char *pcTail;				/*< Points to the byte at the end of the queue storage area.  Once more by
 127:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 128:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed char *pcWriteTo;				/*< Points to the free next place in the storage area. */
 129:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed char *pcReadFrom;			/*< Points to the last place that a queued item was read from. */
 130:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 131:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xList xTasksWaitingToSend;				/*< List of tasks that are blocked waiting to post onto this queue. 
 132:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xList xTasksWaitingToReceive;			/*< List of tasks that are blocked waiting to read from this queue
 133:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 134:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	volatile unsigned portBASE_TYPE uxMessagesWaiting;/*< The number of items currently in the queue. 
 135:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	unsigned portBASE_TYPE uxLength;		/*< The length of the queue defined as the number of items it wi
 136:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	unsigned portBASE_TYPE uxItemSize;		/*< The size of each items that the queue will hold. */
 137:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 138:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	volatile signed portBASE_TYPE xRxLock;	/*< Stores the number of items received from the queue (rem
 139:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	volatile signed portBASE_TYPE xTxLock;	/*< Stores the number of items transmitted to the queue (ad
 140:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 141:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 142:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		unsigned char ucQueueNumber;
 143:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		unsigned char ucQueueType;
 144:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	#endif
 145:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 146:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** } xQUEUE;
 147:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 148:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 149:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 150:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Inside this file xQueueHandle is a pointer to a xQUEUE structure.
 151:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * To keep the definition private the API header file defines it as a
 152:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * pointer to void.
 153:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 154:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** typedef xQUEUE * xQueueHandle;
 155:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 156:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 157:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Prototypes for public functions are included here so we don't have to
 158:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * include the API header file (as it defines xQueueHandle differently).  These
 159:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * functions are documented in the API header file.
 160:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 161:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxIt
 162:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, por
 163:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 164:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** void vQueueDelete( xQueueHandle xQueue ) PRIVILEGED_FUNCTION;
 165:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQue
 166:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickTyp
 167:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed port
 168:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** xQueueHandle xQueueCreateMutex( unsigned char ucQueueType ) PRIVILEGED_FUNCTION;
 169:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_
 170:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle xMutex, portTickType xBlockTime ) PRIVILEGED_F
 171:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle xMutex ) PRIVILEGED_FUNCTION;
 172:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueAltGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, 
 173:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueAltGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTick
 174:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 175:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 176:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue ) PRIVILEGED_FUNCT
 177:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait ) PRIVILEGED_F
 178:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** unsigned char ucQueueGetQueueNumber( xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 179:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** void vQueueSetQueueNumber( xQueueHandle pxQueue, unsigned char ucQueueNumber ) PRIVILEGED_FUNCTION;
 180:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** unsigned char ucQueueGetQueueType( xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 181:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue ) PRIVILEGED_FUNCTI
 182:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** xTaskHandle xQueueGetMutexHolder( xQueueHandle xSemaphore ) PRIVILEGED_FUNCTION;
 183:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 184:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 185:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Co-routine queue functions differ from task queue functions.  Co-routines are
 186:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * an optional component.
 187:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 188:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configUSE_CO_ROUTINES == 1
 189:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed portBASE_TYPE xQueueCRSendFromISR( xQueueHandle pxQueue, const void *pvItemToQueue, signed 
 190:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed portBASE_TYPE xQueueCRReceiveFromISR( xQueueHandle pxQueue, void *pvBuffer, signed portBASE
 191:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed portBASE_TYPE xQueueCRSend( xQueueHandle pxQueue, const void *pvItemToQueue, portTickType x
 192:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed portBASE_TYPE xQueueCRReceive( xQueueHandle pxQueue, void *pvBuffer, portTickType xTicksToW
 193:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
 194:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 195:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 196:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 197:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 198:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 199:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configQUEUE_REGISTRY_SIZE > 0
 200:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 201:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 202:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 203:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	more user friendly. */
 204:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 205:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 206:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		signed char *pcQueueName;
 207:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		xQueueHandle xHandle;
 208:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	} xQueueRegistryItem;
 209:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 210:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* The queue registry is simply an array of xQueueRegistryItem structures.
 211:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 212:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	array position being vacant. */
 213:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xQueueRegistryItem xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 214:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 215:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* Removes a queue from the registry by simply setting the pcQueueName
 216:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	member to NULL. */
 217:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	static void vQueueUnregisterQueue( xQueueHandle xQueue ) PRIVILEGED_FUNCTION;
 218:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName ) PRIVILEGED_FUNCTION;
 219:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
 220:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 221:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 222:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 223:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 224:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 225:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 226:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 227:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 228:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 229:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** static void prvUnlockQueue( xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 230:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 231:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 232:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 233:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  *
 234:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 235:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 236:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 237:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 238:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 239:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 240:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  *
 241:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 242:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 243:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue ) PRIVILEGED_FUNCTION;
 244:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 245:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 246:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 247:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * back of the queue.
 248:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 249:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
 250:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 251:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 252:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Copies an item out of a queue.
 253:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 254:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer ) PRIVILEGED_FUNCTIO
 255:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 256:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 257:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*
 258:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 259:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * accessing the queue event lists.
 260:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  */
 261:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #define prvLockQueue( pxQueue )								\
 262:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();									\
 263:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{														\
 264:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( ( pxQueue )->xRxLock == queueUNLOCKED )			\
 265:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{													\
 266:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			( pxQueue )->xRxLock = queueLOCKED_UNMODIFIED;	\
 267:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}													\
 268:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( ( pxQueue )->xTxLock == queueUNLOCKED )			\
 269:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{													\
 270:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			( pxQueue )->xTxLock = queueLOCKED_UNMODIFIED;	\
 271:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}													\
 272:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}														\
 273:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL()
 274:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 275:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 276:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 277:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------
 278:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 279:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c ****  *----------------------------------------------------------*/
 280:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 281:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
 282:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 283:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 284:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 285:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
 286:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 287:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 289:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) *
 291:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 292:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 293:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 294:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( xNewQueue == pdFALSE )
 295:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 296:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to	write to
 299:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			it will be possible to write to it. */
 301:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 303:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 304:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 305:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					portYIELD_WITHIN_API();
 306:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 307:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 308:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 309:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
 310:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 311:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 312:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 313:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 314:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 315:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 316:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL();
 317:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 318:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 319:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	versions. */
 320:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return pdPASS;
 321:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 322:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 323:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 324:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxIt
 325:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 326:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** xQUEUE *pxNewQueue;
 327:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** size_t xQueueSizeInBytes;
 328:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** xQueueHandle xReturn = NULL;
 329:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 330:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 331:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 332:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	( void ) ucQueueType;
 333:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 334:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* Allocate the new queue structure. */
 335:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 336:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 337:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 338:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxNewQueue != NULL )
 339:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 340:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Create the list of pointers to queue items.  The queue is one byte
 341:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			longer than asked for to make wrap checking easier/faster. */
 342:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 343:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 344:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 345:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxNewQueue->pcHead != NULL )
 346:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 347:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Initialise the queue members as described above where the
 348:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				queue type is defined. */
 349:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pxNewQueue->uxLength = uxQueueLength;
 350:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pxNewQueue->uxItemSize = uxItemSize;
 351:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				xQueueGenericReset( pxNewQueue, pdTRUE );
 352:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				#if ( configUSE_TRACE_FACILITY == 1 )
 353:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 354:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					pxNewQueue->ucQueueType = ucQueueType;
 355:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 356:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				#endif /* configUSE_TRACE_FACILITY */
 357:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 358:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				traceQUEUE_CREATE( pxNewQueue );
 359:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				xReturn = pxNewQueue;
 360:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 361:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
 362:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 363:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				traceQUEUE_CREATE_FAILED( ucQueueType );
 364:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				vPortFree( pxNewQueue );
 365:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 366:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 367:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 368:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 369:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( xReturn );
 370:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 371:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xReturn;
 372:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 373:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 374:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 375:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 376:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 377:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
 378:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 379:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xQUEUE *pxNewQueue;
 380:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 381:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 382:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 383:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		( void ) ucQueueType;
 384:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 385:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* Allocate the new queue structure. */
 386:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 387:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxNewQueue != NULL )
 388:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 389:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Information required for priority inheritance. */
 390:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 391:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 392:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 393:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Queues used as a mutex no data is actually copied into or out
 394:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			of the queue. */
 395:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 396:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->pcReadFrom = NULL;
 397:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 398:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Each mutex has a length of 1 (like a binary semaphore) and
 399:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			an item size of 0 as nothing is actually copied into or out
 400:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			of the mutex. */
 401:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 402:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 403:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 404:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 405:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 406:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 407:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 408:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 409:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pxNewQueue->ucQueueType = ucQueueType;
 410:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 411:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			#endif
 412:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 413:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Ensure the event queues start with the correct state. */
 414:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 415:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 416:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 417:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 418:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 419:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Start with the semaphore in the expected state. */
 420:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 421:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 422:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
 423:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 424:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 425:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 426:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 427:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		configASSERT( pxNewQueue );
 428:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		return pxNewQueue;
 429:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 430:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 431:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif /* configUSE_MUTEXES */
 432:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 433:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 434:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xQueueGetMutexHolder == 1 ) )
 435:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 436:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
 437:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 438:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	void *pxReturn;
 439:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 440:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 441:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		be called directly.  Note:  This is is a good way of determining if the
 442:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 443:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 444:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		following critical section exiting and the function returning. */
 445:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		taskENTER_CRITICAL();
 446:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 447:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 448:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 449:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
 450:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 451:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
 452:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 453:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pxReturn = NULL;
 454:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 455:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 456:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		taskEXIT_CRITICAL();
 457:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 458:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		return pxReturn;
 459:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 460:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 461:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
 462:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 463:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 464:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 465:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 466:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle pxMutex )
 467:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 468:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portBASE_TYPE xReturn;
 469:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 470:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		configASSERT( pxMutex );
 471:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 472:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 473:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 474:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 475:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		this is the only condition we are interested in it does not matter if
 476:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 477:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 478:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
 479:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 480:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 481:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 482:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 483:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 484:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 485:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 486:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			uxRecursiveCallCount member. */
 487:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			( pxMutex->uxRecursiveCallCount )--;
 488:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 489:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Have we unwound the call count? */
 490:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxMutex->uxRecursiveCallCount == 0 )
 491:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 492:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 493:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				task that might be waiting to access the mutex. */
 494:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 495:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 496:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 497:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdPASS;
 498:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 499:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
 500:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 501:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* We cannot give the mutex because we are not the holder. */
 502:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdFAIL;
 503:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 504:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 505:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 506:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 507:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		return xReturn;
 508:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 509:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 510:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 511:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 512:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 513:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configUSE_RECURSIVE_MUTEXES == 1
 514:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 515:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle pxMutex, portTickType xBlockTime )
 516:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 517:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portBASE_TYPE xReturn;
 518:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 519:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		configASSERT( pxMutex );
 520:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 521:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 522:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		xQueueGiveMutexRecursive(). */
 523:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 524:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 525:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 526:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
 527:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 528:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			( pxMutex->uxRecursiveCallCount )++;
 529:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdPASS;
 530:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 531:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
 532:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 533:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xBlockTime, pdFALSE );
 534:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 535:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* pdPASS will only be returned if we successfully obtained the mutex,
 536:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			we may have blocked to reach here. */
 537:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( xReturn == pdPASS )
 538:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 539:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				( pxMutex->uxRecursiveCallCount )++;
 540:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 541:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
 542:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 543:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 544:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 545:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 546:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 547:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		return xReturn;
 548:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 549:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 550:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 551:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 552:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 553:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configUSE_COUNTING_SEMAPHORES == 1
 554:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 555:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE
 556:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 557:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xQueueHandle pxHandle;
 558:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 559:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxHandle = xQueueGenericCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITE
 560:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 561:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxHandle != NULL )
 562:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 563:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxHandle->uxMessagesWaiting = uxInitialCount;
 564:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 565:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 566:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 567:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
 568:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 569:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 570:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 571:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 572:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		configASSERT( pxHandle );
 573:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		return pxHandle;
 574:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 575:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 576:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif /* configUSE_COUNTING_SEMAPHORES */
 577:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 578:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 579:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, por
 580:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 581:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 582:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** xTimeOutType xTimeOut;
 583:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 584:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 585:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 586:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 587:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 588:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	statements within the function itself.  This is done in the interest
 589:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	of execution time efficiency. */
 590:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	for( ;; )
 591:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 592:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		taskENTER_CRITICAL();
 593:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 594:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Is there room on the queue now?  To be running we must be
 595:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			the highest priority task wanting to access the queue. */
 596:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 597:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 598:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 599:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 600:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 601:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* If there was a task waiting for data to arrive on the
 602:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				queue then unblock it now. */
 603:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 604:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 605:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 606:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 607:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						/* The unblocked task has a priority higher than
 608:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						our own so yield immediately.  Yes it is ok to do
 609:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						this from within the critical section - the kernel
 610:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						takes care of that. */
 611:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						portYIELD_WITHIN_API();
 612:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 613:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 614:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 615:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				taskEXIT_CRITICAL();
 616:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 617:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Return to the original privilege level before exiting the
 618:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				function. */
 619:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				return pdPASS;
 620:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 621:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
 622:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 623:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 624:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 625:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* The queue was full and no block time is specified (or
 626:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					the block time has expired) so leave now. */
 627:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					taskEXIT_CRITICAL();
 628:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 629:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* Return to the original privilege level before exiting
 630:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					the function. */
 631:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 632:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					return errQUEUE_FULL;
 633:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 634:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 635:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 636:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* The queue was full and a block time was specified so
 637:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					configure the timeout structure. */
 638:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 639:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					xEntryTimeSet = pdTRUE;
 640:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 641:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 642:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 643:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		taskEXIT_CRITICAL();
 644:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 645:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 646:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		now the critical section has been exited. */
 647:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 648:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		vTaskSuspendAll();
 649:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		prvLockQueue( pxQueue );
 650:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 651:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 652:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 653:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 654:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 655:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 656:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 657:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 658:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 659:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 660:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 661:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				remove this task from the event	list again - but as the
 662:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				scheduler is suspended the task will go onto the pending
 663:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				ready last instead of the actual ready list. */
 664:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvUnlockQueue( pxQueue );
 665:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 666:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 667:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				ready list into the ready list - so it is feasible that this
 668:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				task is already in a ready list before it yields - in which
 669:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				case the yield will not cause a context switch unless there
 670:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				is also a higher priority task in the pending ready list. */
 671:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 672:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 673:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					portYIELD_WITHIN_API();
 674:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 675:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 676:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
 677:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 678:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Try again. */
 679:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvUnlockQueue( pxQueue );
 680:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				( void ) xTaskResumeAll();
 681:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 682:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 683:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
 684:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 685:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* The timeout has expired. */
 686:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			prvUnlockQueue( pxQueue );
 687:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			( void ) xTaskResumeAll();
 688:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 689:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Return to the original privilege level before exiting the
 690:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			function. */
 691:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 692:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			return errQUEUE_FULL;
 693:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 694:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 695:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 696:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 697:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 698:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configUSE_ALTERNATIVE_API == 1
 699:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 700:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed portBASE_TYPE xQueueAltGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue,
 701:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 702:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 703:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xTimeOutType xTimeOut;
 704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 705:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		configASSERT( pxQueue );
 706:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE )
 707:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 708:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		for( ;; )
 709:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 710:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			taskENTER_CRITICAL();
 711:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 712:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Is there room on the queue now?  To be running we must be
 713:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				the highest priority task wanting to access the queue. */
 714:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 715:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 716:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					traceQUEUE_SEND( pxQueue );
 717:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 718:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 719:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 720:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					queue then unblock it now. */
 721:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 722:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 723:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 724:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
 725:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							/* The unblocked task has a priority higher than
 726:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							our own so yield immediately. */
 727:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							portYIELD_WITHIN_API();
 728:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
 729:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 730:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 731:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					taskEXIT_CRITICAL();
 732:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					return pdPASS;
 733:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 734:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				else
 735:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 736:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 737:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 738:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						taskEXIT_CRITICAL();
 739:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						return errQUEUE_FULL;
 740:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 741:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 742:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 743:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 744:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						xEntryTimeSet = pdTRUE;
 745:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 746:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 747:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 748:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			taskEXIT_CRITICAL();
 749:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 750:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			taskENTER_CRITICAL();
 751:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 752:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 753:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 754:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( prvIsQueueFull( pxQueue ) != pdFALSE )
 755:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 756:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 757:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 758:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						portYIELD_WITHIN_API();
 759:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 760:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 761:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				else
 762:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 763:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					taskEXIT_CRITICAL();
 764:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 765:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					return errQUEUE_FULL;
 766:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 767:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 768:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			taskEXIT_CRITICAL();
 769:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 770:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 771:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 772:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 773:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 774:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 775:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configUSE_ALTERNATIVE_API == 1
 776:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 777:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed portBASE_TYPE xQueueAltGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTic
 778:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 779:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 780:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xTimeOutType xTimeOut;
 781:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	signed char *pcOriginalReadPosition;
 782:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 783:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		configASSERT( pxQueue );
 784:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U )
 785:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 786:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		for( ;; )
 787:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 788:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			taskENTER_CRITICAL();
 789:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 790:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 791:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 792:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* Remember our read position in case we are just peeking. */
 793:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					pcOriginalReadPosition = pxQueue->pcReadFrom;
 794:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 795:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					prvCopyDataFromQueue( pxQueue, pvBuffer );
 796:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 797:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( xJustPeeking == pdFALSE )
 798:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 799:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						traceQUEUE_RECEIVE( pxQueue );
 800:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 801:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						/* We are actually removing data. */
 802:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						--( pxQueue->uxMessagesWaiting );
 803:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 804:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 805:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
 806:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 807:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							{
 808:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 								/* Record the information required to implement
 809:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 								priority inheritance should it become necessary. */
 810:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 								pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 811:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							}
 812:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
 813:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						#endif
 814:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 815:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 816:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
 817:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 818:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							{
 819:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 								portYIELD_WITHIN_API();
 820:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							}
 821:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
 822:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 823:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					else
 824:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 825:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						traceQUEUE_PEEK( pxQueue );
 826:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 827:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						/* We are not removing the data, so reset our read
 828:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						pointer. */
 829:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						pxQueue->pcReadFrom = pcOriginalReadPosition;
 830:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 831:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						/* The data is being left in the queue, so see if there are
 832:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						any other tasks waiting for the data. */
 833:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 834:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
 835:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							/* Tasks that are removed from the event list will get added to
 836:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							the pending ready list as the scheduler is still suspended. */
 837:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 838:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							{
 839:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 								/* The task waiting has a higher priority than this task. */
 840:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 								portYIELD_WITHIN_API();
 841:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							}
 842:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
 843:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 844:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 845:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 846:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					taskEXIT_CRITICAL();
 847:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					return pdPASS;
 848:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 849:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				else
 850:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 851:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 852:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 853:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						taskEXIT_CRITICAL();
 854:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						traceQUEUE_RECEIVE_FAILED( pxQueue );
 855:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						return errQUEUE_EMPTY;
 856:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 857:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 858:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 859:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 860:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						xEntryTimeSet = pdTRUE;
 861:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 862:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 863:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 864:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			taskEXIT_CRITICAL();
 865:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 866:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			taskENTER_CRITICAL();
 867:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 868:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 869:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 870:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 871:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 872:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 873:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 874:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 875:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
 876:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 877:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							{
 878:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 								portENTER_CRITICAL();
 879:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 								{
 880:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 									vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 881:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 								}
 882:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 								portEXIT_CRITICAL();
 883:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							}
 884:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
 885:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						#endif
 886:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 887:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 888:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						portYIELD_WITHIN_API();
 889:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 890:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 891:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				else
 892:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 893:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					taskEXIT_CRITICAL();
 894:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 895:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					return errQUEUE_EMPTY;
 896:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 897:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 898:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			taskEXIT_CRITICAL();
 899:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 900:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 901:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 902:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 903:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 904:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 905:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 906:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQue
 907:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 908:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xReturn;
 909:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
 910:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 911:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 912:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 913:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 914:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* Similar to xQueueGenericSend, except we don't block if there is no room
 915:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	in the queue.  Also we don't directly wake a task that was blocked on a
 916:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	queue read, instead we return a flag to say whether a context switch is
 917:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	required or not (i.e. has a task with a higher priority than us been woken
 918:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	by this	post). */
 919:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 920:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 921:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 922:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 923:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 924:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 925:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 926:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 927:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* If the queue is locked we do not alter the event list.  This will
 928:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			be done when the queue is unlocked later. */
 929:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 930:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 931:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 932:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 933:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 934:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
 935:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						/* The task waiting has a higher priority so record that a
 936:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						context	switch is required. */
 937:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 938:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
 939:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 940:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
 941:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
 942:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
 943:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 944:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
 945:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 946:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
 947:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				knows that data was posted while it was locked. */
 948:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				++( pxQueue->xTxLock );
 949:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
 950:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 951:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdPASS;
 952:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 953:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
 954:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 955:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 956:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = errQUEUE_FULL;
 957:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
 958:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 959:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 960:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 961:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xReturn;
 962:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 963:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
 964:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 965:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickTyp
 966:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 967:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 968:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** xTimeOutType xTimeOut;
 969:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed char *pcOriginalReadPosition;
 970:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 971:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 972:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 973:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 974:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 975:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	statements within the function itself.  This is done in the interest
 976:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	of execution time efficiency. */
 977:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 978:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	for( ;; )
 979:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 980:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		taskENTER_CRITICAL();
 981:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
 982:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Is there data in the queue now?  To be running we must be
 983:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			the highest priority task wanting to access the queue. */
 984:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 985:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
 986:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Remember our read position in case we are just peeking. */
 987:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pcOriginalReadPosition = pxQueue->pcReadFrom;
 988:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 989:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 990:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 991:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xJustPeeking == pdFALSE )
 992:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
 993:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
 994:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 995:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* We are actually removing data. */
 996:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					--( pxQueue->uxMessagesWaiting );
 997:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
 998:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
 999:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
1000:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1001:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
1002:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							/* Record the information required to implement
1003:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							priority inheritance should it become necessary. */
1004:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
1005:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
1006:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
1007:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					#endif
1008:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1009:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1010:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
1011:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
1012:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
1013:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							portYIELD_WITHIN_API();
1014:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
1015:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
1016:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1017:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				else
1018:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1019:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1020:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1021:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* We are not removing the data, so reset our read
1022:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					pointer. */
1023:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					pxQueue->pcReadFrom = pcOriginalReadPosition;
1024:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1025:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* The data is being left in the queue, so see if there are
1026:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					any other tasks waiting for the data. */
1027:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1028:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
1029:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						/* Tasks that are removed from the event list will get added to
1030:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						the pending ready list as the scheduler is still suspended. */
1031:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1032:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
1033:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1034:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							portYIELD_WITHIN_API();
1035:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
1036:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
1037:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1038:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1039:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				taskEXIT_CRITICAL();
1040:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				return pdPASS;
1041:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1042:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
1043:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1044:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
1045:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1046:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* The queue was empty and no block time is specified (or
1047:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					the block time has expired) so leave now. */
1048:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					taskEXIT_CRITICAL();
1049:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1050:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					return errQUEUE_EMPTY;
1051:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1052:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1053:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1054:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* The queue was empty and a block time was specified so
1055:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					configure the timeout structure. */
1056:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1057:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					xEntryTimeSet = pdTRUE;
1058:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1059:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1060:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1061:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		taskEXIT_CRITICAL();
1062:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1063:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1064:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		now the critical section has been exited. */
1065:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1066:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		vTaskSuspendAll();
1067:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		prvLockQueue( pxQueue );
1068:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1069:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1070:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1071:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1072:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1073:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1074:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1075:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1076:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1077:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1078:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1079:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
1080:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						portENTER_CRITICAL();
1081:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
1082:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1083:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
1084:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						portEXIT_CRITICAL();
1085:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
1086:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1087:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				#endif
1088:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1089:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1090:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvUnlockQueue( pxQueue );
1091:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1092:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1093:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					portYIELD_WITHIN_API();
1094:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1095:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1096:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
1097:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1098:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Try again. */
1099:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvUnlockQueue( pxQueue );
1100:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				( void ) xTaskResumeAll();
1101:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1102:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1103:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
1104:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1105:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			prvUnlockQueue( pxQueue );
1106:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			( void ) xTaskResumeAll();
1107:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
1108:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			return errQUEUE_EMPTY;
1109:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1110:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1111:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1112:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1113:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1114:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed port
1115:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1116:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xReturn;
1117:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1118:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1119:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
1120:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
1121:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1122:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1123:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1124:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. */
1125:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1126:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1127:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1128:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1129:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1130:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
1131:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1132:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* If the queue is locked we will not modify the event list.  Instead
1133:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			we update the lock count so the task that unlocks the queue will know
1134:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			that an ISR has removed data while the queue was locked. */
1135:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
1136:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1137:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1138:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1139:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1140:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					{
1141:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						/* The task waiting has a higher priority than us so
1142:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						force a context switch. */
1143:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1144:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						{
1145:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1146:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						}
1147:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					}
1148:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1149:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1150:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
1151:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1152:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1153:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				knows that data was removed while it was locked. */
1154:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				++( pxQueue->xRxLock );
1155:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1156:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1157:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdPASS;
1158:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1159:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
1160:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1161:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdFAIL;
1162:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1163:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1164:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1165:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1166:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1167:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xReturn;
1168:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1169:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1170:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1171:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
1172:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1173:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** unsigned portBASE_TYPE uxReturn;
1174:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1175:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
1176:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1177:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
1178:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		uxReturn = pxQueue->uxMessagesWaiting;
1179:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL();
1180:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1181:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return uxReturn;
1182:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1183:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1184:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1185:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
1186:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1187:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** unsigned portBASE_TYPE uxReturn;
1188:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1189:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
1190:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1191:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
1192:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1193:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return uxReturn;
1194:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1195:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1196:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1197:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** void vQueueDelete( xQueueHandle pxQueue )
1198:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1199:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
1200:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1201:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1202:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	vQueueUnregisterQueue( pxQueue );
1203:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	vPortFree( pxQueue->pcHead );
1204:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	vPortFree( pxQueue );
1205:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1206:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1207:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1208:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1209:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1210:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	unsigned char ucQueueGetQueueNumber( xQueueHandle pxQueue )
1211:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1212:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		return pxQueue->ucQueueNumber;
1213:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1214:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1215:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
1216:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1217:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1218:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1219:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1220:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	void vQueueSetQueueNumber( xQueueHandle pxQueue, unsigned char ucQueueNumber )
1221:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1222:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->ucQueueNumber = ucQueueNumber;
1223:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1224:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1225:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
1226:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1227:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1228:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1229:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1230:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	unsigned char ucQueueGetQueueType( xQueueHandle pxQueue )
1231:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1232:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		return pxQueue->ucQueueType;
1233:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1234:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1235:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
1236:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1237:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1238:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
1239:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1240:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
1241:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1242:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1243:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1244:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1245:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1246:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* The mutex is no longer being held. */
1247:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1248:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1249:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1250:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1251:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		#endif
1252:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1253:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1254:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1255:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
1256:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1257:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
1258:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1259:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1260:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1261:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1262:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	else
1263:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1264:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
1265:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
1266:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
1267:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1268:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1269:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1270:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1271:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1272:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	++( pxQueue->uxMessagesWaiting );
1273:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1274:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1275:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1276:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
1277:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1278:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
1279:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1280:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
1281:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
1282:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1283:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxQueue->pcReadFrom = pxQueue->pcHead;
1284:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1285:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
1286:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1287:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1288:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1289:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1290:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** static void prvUnlockQueue( xQueueHandle pxQueue )
1291:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
  27              		.loc 1 1291 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 38B5     		push	{r3, r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 1291 0
  40 0002 0446     		mov	r4, r0
1292:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1293:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1294:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1295:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1296:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1297:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	updated. */
1298:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
1299:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1300:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1301:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
1302:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1303:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1304:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			blocked waiting for data to become available? */
1305:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1306:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1307:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1308:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1309:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  41              		.loc 1 1309 0
  42 0004 04F12405 		add	r5, r4, #36
1298:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
  43              		.loc 1 1298 0
  44 0008 FFF7FEFF 		bl	vPortEnterCritical
  45              	.LVL1:
1301:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  46              		.loc 1 1301 0
  47 000c 0AE0     		b	.L2
  48              	.L5:
1305:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  49              		.loc 1 1305 0
  50 000e 636A     		ldr	r3, [r4, #36]
  51 0010 5BB1     		cbz	r3, .L3
  52              		.loc 1 1309 0
  53 0012 2846     		mov	r0, r5
  54 0014 FFF7FEFF 		bl	xTaskRemoveFromEventList
  55              	.LVL2:
  56 0018 08B1     		cbz	r0, .L4
1310:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1311:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* The task waiting has a higher priority so record that a
1312:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					context	switch is required. */
1313:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					vTaskMissedYield();
  57              		.loc 1 1313 0
  58 001a FFF7FEFF 		bl	vTaskMissedYield
  59              	.LVL3:
  60              	.L4:
1314:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1315:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1316:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				--( pxQueue->xTxLock );
  61              		.loc 1 1316 0
  62 001e A36C     		ldr	r3, [r4, #72]
  63 0020 013B     		subs	r3, r3, #1
  64 0022 A364     		str	r3, [r4, #72]
  65              	.L2:
1301:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  66              		.loc 1 1301 0 discriminator 1
  67 0024 A36C     		ldr	r3, [r4, #72]
  68 0026 002B     		cmp	r3, #0
  69 0028 F1DC     		bgt	.L5
  70              	.L3:
1317:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1318:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
1319:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1320:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				break;
1321:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1322:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1323:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1324:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
  71              		.loc 1 1324 0
  72 002a 4FF0FF33 		mov	r3, #-1
  73 002e A364     		str	r3, [r4, #72]
1325:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1326:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL();
  74              		.loc 1 1326 0
  75 0030 FFF7FEFF 		bl	vPortExitCritical
  76              	.LVL4:
1327:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1328:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* Do the same for the Rx lock. */
1329:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
1330:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1331:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
1332:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1333:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1334:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1335:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  77              		.loc 1 1335 0
  78 0034 04F11005 		add	r5, r4, #16
1329:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
  79              		.loc 1 1329 0
  80 0038 FFF7FEFF 		bl	vPortEnterCritical
  81              	.LVL5:
1331:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  82              		.loc 1 1331 0
  83 003c 0AE0     		b	.L6
  84              	.L9:
1333:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  85              		.loc 1 1333 0
  86 003e 2369     		ldr	r3, [r4, #16]
  87 0040 5BB1     		cbz	r3, .L7
  88              		.loc 1 1335 0
  89 0042 2846     		mov	r0, r5
  90 0044 FFF7FEFF 		bl	xTaskRemoveFromEventList
  91              	.LVL6:
  92 0048 08B1     		cbz	r0, .L8
1336:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1337:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					vTaskMissedYield();
  93              		.loc 1 1337 0
  94 004a FFF7FEFF 		bl	vTaskMissedYield
  95              	.LVL7:
  96              	.L8:
1338:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1339:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1340:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				--( pxQueue->xRxLock );
  97              		.loc 1 1340 0
  98 004e 636C     		ldr	r3, [r4, #68]
  99 0050 013B     		subs	r3, r3, #1
 100 0052 6364     		str	r3, [r4, #68]
 101              	.L6:
1331:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 102              		.loc 1 1331 0 discriminator 1
 103 0054 636C     		ldr	r3, [r4, #68]
 104 0056 002B     		cmp	r3, #0
 105 0058 F1DC     		bgt	.L9
 106              	.L7:
1341:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1342:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
1343:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1344:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				break;
1345:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1346:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1347:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1348:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 107              		.loc 1 1348 0
 108 005a 4FF0FF33 		mov	r3, #-1
 109 005e 6364     		str	r3, [r4, #68]
1349:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1350:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL();
1351:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 110              		.loc 1 1351 0
 111 0060 BDE83840 		pop	{r3, r4, r5, lr}
1350:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL();
 112              		.loc 1 1350 0
 113 0064 FFF7FEBF 		b	vPortExitCritical
 114              	.LVL8:
 115              		.cfi_endproc
 116              	.LFE12:
 118              		.align	1
 119              		.thumb
 120              		.thumb_func
 122              	prvCopyDataFromQueue:
 123              	.LFB11:
1277:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 124              		.loc 1 1277 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              	.LVL9:
 129 0068 70B5     		push	{r4, r5, r6, lr}
 130              	.LCFI1:
 131              		.cfi_def_cfa_offset 16
 132              		.cfi_offset 4, -16
 133              		.cfi_offset 5, -12
 134              		.cfi_offset 6, -8
 135              		.cfi_offset 14, -4
1278:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 136              		.loc 1 1278 0
 137 006a 0468     		ldr	r4, [r0, #0]
1277:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 138              		.loc 1 1277 0
 139 006c 0346     		mov	r3, r0
1278:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 140              		.loc 1 1278 0
 141 006e 6CB1     		cbz	r4, .L22
1280:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 142              		.loc 1 1280 0
 143 0070 C568     		ldr	r5, [r0, #12]
 144 0072 026C     		ldr	r2, [r0, #64]
1281:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 145              		.loc 1 1281 0
 146 0074 4668     		ldr	r6, [r0, #4]
1280:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 147              		.loc 1 1280 0
 148 0076 AD18     		adds	r5, r5, r2
1281:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 149              		.loc 1 1281 0
 150 0078 B542     		cmp	r5, r6
1280:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 151              		.loc 1 1280 0
 152 007a C560     		str	r5, [r0, #12]
1283:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxQueue->pcReadFrom = pxQueue->pcHead;
 153              		.loc 1 1283 0
 154 007c 28BF     		it	cs
 155 007e C460     		strcs	r4, [r0, #12]
1285:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 156              		.loc 1 1285 0
 157 0080 0846     		mov	r0, r1
 158              	.LVL10:
 159 0082 D968     		ldr	r1, [r3, #12]
 160              	.LVL11:
1287:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 161              		.loc 1 1287 0
 162 0084 BDE87040 		pop	{r4, r5, r6, lr}
1285:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 163              		.loc 1 1285 0
 164 0088 FFF7FEBF 		b	memcpy
 165              	.LVL12:
 166              	.L22:
 167 008c 70BD     		pop	{r4, r5, r6, pc}
 168              		.cfi_endproc
 169              	.LFE11:
 171              		.align	1
 172              		.thumb
 173              		.thumb_func
 175              	prvCopyDataToQueue:
 176              	.LFB10:
1239:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 177              		.loc 1 1239 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              	.LVL13:
 182 008e 38B5     		push	{r3, r4, r5, lr}
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 16
 185              		.cfi_offset 3, -16
 186              		.cfi_offset 4, -12
 187              		.cfi_offset 5, -8
 188              		.cfi_offset 14, -4
1239:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 189              		.loc 1 1239 0
 190 0090 1346     		mov	r3, r2
1240:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 191              		.loc 1 1240 0
 192 0092 026C     		ldr	r2, [r0, #64]
 193              	.LVL14:
1239:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 194              		.loc 1 1239 0
 195 0094 0446     		mov	r4, r0
1240:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 196              		.loc 1 1240 0
 197 0096 32B9     		cbnz	r2, .L26
1244:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 198              		.loc 1 1244 0
 199 0098 0568     		ldr	r5, [r0, #0]
 200 009a 05BB     		cbnz	r5, .L28
1247:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 201              		.loc 1 1247 0
 202 009c 4068     		ldr	r0, [r0, #4]
 203              	.LVL15:
 204 009e FFF7FEFF 		bl	vTaskPriorityDisinherit
 205              	.LVL16:
1248:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 206              		.loc 1 1248 0
 207 00a2 6560     		str	r5, [r4, #4]
 208 00a4 1BE0     		b	.L28
 209              	.LVL17:
 210              	.L26:
1253:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 211              		.loc 1 1253 0
 212 00a6 63B9     		cbnz	r3, .L29
1255:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 213              		.loc 1 1255 0
 214 00a8 8068     		ldr	r0, [r0, #8]
 215              	.LVL18:
 216 00aa FFF7FEFF 		bl	memcpy
 217              	.LVL19:
1256:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 218              		.loc 1 1256 0
 219 00ae A268     		ldr	r2, [r4, #8]
 220 00b0 236C     		ldr	r3, [r4, #64]
 221 00b2 D318     		adds	r3, r2, r3
1257:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 222              		.loc 1 1257 0
 223 00b4 6268     		ldr	r2, [r4, #4]
1256:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 224              		.loc 1 1256 0
 225 00b6 A360     		str	r3, [r4, #8]
1257:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 226              		.loc 1 1257 0
 227 00b8 9342     		cmp	r3, r2
 228 00ba 10D3     		bcc	.L28
1259:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 229              		.loc 1 1259 0
 230 00bc 2368     		ldr	r3, [r4, #0]
 231 00be A360     		str	r3, [r4, #8]
 232 00c0 0DE0     		b	.L28
 233              	.LVL20:
 234              	.L29:
1264:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 235              		.loc 1 1264 0
 236 00c2 C068     		ldr	r0, [r0, #12]
 237              	.LVL21:
 238 00c4 FFF7FEFF 		bl	memcpy
 239              	.LVL22:
1265:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 240              		.loc 1 1265 0
 241 00c8 236C     		ldr	r3, [r4, #64]
 242 00ca E268     		ldr	r2, [r4, #12]
1266:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 243              		.loc 1 1266 0
 244 00cc 2168     		ldr	r1, [r4, #0]
1265:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 245              		.loc 1 1265 0
 246 00ce 5B42     		negs	r3, r3
 247 00d0 D218     		adds	r2, r2, r3
1266:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 248              		.loc 1 1266 0
 249 00d2 8A42     		cmp	r2, r1
1265:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 250              		.loc 1 1265 0
 251 00d4 E260     		str	r2, [r4, #12]
1266:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 252              		.loc 1 1266 0
 253 00d6 02D2     		bcs	.L28
1268:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 254              		.loc 1 1268 0
 255 00d8 6268     		ldr	r2, [r4, #4]
 256 00da D318     		adds	r3, r2, r3
 257 00dc E360     		str	r3, [r4, #12]
 258              	.L28:
1272:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	++( pxQueue->uxMessagesWaiting );
 259              		.loc 1 1272 0
 260 00de A36B     		ldr	r3, [r4, #56]
 261 00e0 0133     		adds	r3, r3, #1
 262 00e2 A363     		str	r3, [r4, #56]
 263 00e4 38BD     		pop	{r3, r4, r5, pc}
 264              		.cfi_endproc
 265              	.LFE10:
 267              		.align	1
 268              		.global	xQueueGenericReset
 269              		.thumb
 270              		.thumb_func
 272              	xQueueGenericReset:
 273              	.LFB0:
 282:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 274              		.loc 1 282 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              	.LVL23:
 279 00e6 38B5     		push	{r3, r4, r5, lr}
 280              	.LCFI3:
 281              		.cfi_def_cfa_offset 16
 282              		.cfi_offset 3, -16
 283              		.cfi_offset 4, -12
 284              		.cfi_offset 5, -8
 285              		.cfi_offset 14, -4
 282:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 286              		.loc 1 282 0
 287 00e8 0D46     		mov	r5, r1
 283:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 288              		.loc 1 283 0
 289 00ea 0446     		mov	r4, r0
 290 00ec 10B9     		cbnz	r0, .L32
 283:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 291              		.loc 1 283 0 is_stmt 0 discriminator 1
 292 00ee FFF7FEFF 		bl	ulPortSetInterruptMask
 293              	.LVL24:
 294              	.L33:
 295 00f2 FEE7     		b	.L33
 296              	.LVL25:
 297              	.L32:
 285:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
 298              		.loc 1 285 0 is_stmt 1
 299 00f4 FFF7FEFF 		bl	vPortEnterCritical
 300              	.LVL26:
 287:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 301              		.loc 1 287 0
 302 00f8 2368     		ldr	r3, [r4, #0]
 303 00fa E06B     		ldr	r0, [r4, #60]
 304 00fc 226C     		ldr	r2, [r4, #64]
 289:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 305              		.loc 1 289 0
 306 00fe A360     		str	r3, [r4, #8]
 287:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 307              		.loc 1 287 0
 308 0100 00FB0231 		mla	r1, r0, r2, r3
 290:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) *
 309              		.loc 1 290 0
 310 0104 0138     		subs	r0, r0, #1
 311 0106 02FB0033 		mla	r3, r2, r0, r3
 287:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 312              		.loc 1 287 0
 313 010a 6160     		str	r1, [r4, #4]
 290:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) *
 314              		.loc 1 290 0
 315 010c E360     		str	r3, [r4, #12]
 288:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 316              		.loc 1 288 0
 317 010e 0021     		movs	r1, #0
 291:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 318              		.loc 1 291 0
 319 0110 4FF0FF33 		mov	r3, #-1
 288:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 320              		.loc 1 288 0
 321 0114 A163     		str	r1, [r4, #56]
 291:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 322              		.loc 1 291 0
 323 0116 6364     		str	r3, [r4, #68]
 292:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 324              		.loc 1 292 0
 325 0118 A364     		str	r3, [r4, #72]
 294:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( xNewQueue == pdFALSE )
 326              		.loc 1 294 0
 327 011a 55B9     		cbnz	r5, .L34
 301:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 328              		.loc 1 301 0
 329 011c 2369     		ldr	r3, [r4, #16]
 330 011e 83B1     		cbz	r3, .L36
 303:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 331              		.loc 1 303 0
 332 0120 04F11000 		add	r0, r4, #16
 333 0124 FFF7FEFF 		bl	xTaskRemoveFromEventList
 334              	.LVL27:
 335 0128 0128     		cmp	r0, #1
 336 012a 0AD1     		bne	.L36
 305:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					portYIELD_WITHIN_API();
 337              		.loc 1 305 0
 338 012c FFF7FEFF 		bl	vPortYieldFromISR
 339              	.LVL28:
 340 0130 07E0     		b	.L36
 341              	.L34:
 312:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 342              		.loc 1 312 0
 343 0132 04F11000 		add	r0, r4, #16
 344 0136 FFF7FEFF 		bl	vListInitialise
 345              	.LVL29:
 313:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 346              		.loc 1 313 0
 347 013a 04F12400 		add	r0, r4, #36
 348 013e FFF7FEFF 		bl	vListInitialise
 349              	.LVL30:
 350              	.L36:
 316:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL();
 351              		.loc 1 316 0
 352 0142 FFF7FEFF 		bl	vPortExitCritical
 353              	.LVL31:
 321:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 354              		.loc 1 321 0
 355 0146 0120     		movs	r0, #1
 356 0148 38BD     		pop	{r3, r4, r5, pc}
 357              		.cfi_endproc
 358              	.LFE0:
 360              		.align	1
 361              		.global	xQueueGenericCreate
 362              		.thumb
 363              		.thumb_func
 365              	xQueueGenericCreate:
 366              	.LFB1:
 325:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 367              		.loc 1 325 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              	.LVL32:
 372 014a 70B5     		push	{r4, r5, r6, lr}
 373              	.LCFI4:
 374              		.cfi_def_cfa_offset 16
 375              		.cfi_offset 4, -16
 376              		.cfi_offset 5, -12
 377              		.cfi_offset 6, -8
 378              		.cfi_offset 14, -4
 325:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 379              		.loc 1 325 0
 380 014c 0E46     		mov	r6, r1
 335:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 381              		.loc 1 335 0
 382 014e 0546     		mov	r5, r0
 383 0150 80B1     		cbz	r0, .L41
 337:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 384              		.loc 1 337 0
 385 0152 4C20     		movs	r0, #76
 386              	.LVL33:
 387 0154 FFF7FEFF 		bl	pvPortMalloc
 388              	.LVL34:
 338:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxNewQueue != NULL )
 389              		.loc 1 338 0
 390 0158 0446     		mov	r4, r0
 391 015a 58B1     		cbz	r0, .L41
 392              	.LVL35:
 342:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 393              		.loc 1 342 0
 394 015c 05FB06F0 		mul	r0, r5, r6
 395              	.LVL36:
 344:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 396              		.loc 1 344 0
 397 0160 0130     		adds	r0, r0, #1
 398              	.LVL37:
 399 0162 FFF7FEFF 		bl	pvPortMalloc
 400              	.LVL38:
 401 0166 2060     		str	r0, [r4, #0]
 345:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxNewQueue->pcHead != NULL )
 402              		.loc 1 345 0
 403 0168 38B9     		cbnz	r0, .L50
 364:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				vPortFree( pxNewQueue );
 404              		.loc 1 364 0
 405 016a 2046     		mov	r0, r4
 406 016c FFF7FEFF 		bl	vPortFree
 407              	.LVL39:
 408 0170 00E0     		b	.L41
 409              	.LVL40:
 410              	.L42:
 411 0172 FEE7     		b	.L42
 412              	.L41:
 369:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( xReturn );
 413              		.loc 1 369 0
 414 0174 FFF7FEFF 		bl	ulPortSetInterruptMask
 415              	.LVL41:
 416 0178 FBE7     		b	.L42
 417              	.LVL42:
 418              	.L50:
 349:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pxNewQueue->uxLength = uxQueueLength;
 419              		.loc 1 349 0
 420 017a E563     		str	r5, [r4, #60]
 350:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pxNewQueue->uxItemSize = uxItemSize;
 421              		.loc 1 350 0
 422 017c 2664     		str	r6, [r4, #64]
 351:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				xQueueGenericReset( pxNewQueue, pdTRUE );
 423              		.loc 1 351 0
 424 017e 2046     		mov	r0, r4
 425 0180 0121     		movs	r1, #1
 426 0182 FFF7FEFF 		bl	xQueueGenericReset
 427              	.LVL43:
 372:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 428              		.loc 1 372 0
 429 0186 2046     		mov	r0, r4
 430 0188 70BD     		pop	{r4, r5, r6, pc}
 431              		.cfi_endproc
 432              	.LFE1:
 434              		.align	1
 435              		.global	xQueueGenericSend
 436              		.thumb
 437              		.thumb_func
 439              	xQueueGenericSend:
 440              	.LFB3:
 580:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 441              		.loc 1 580 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 16
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445              	.LVL44:
 446 018a 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 447              	.LCFI5:
 448              		.cfi_def_cfa_offset 28
 449              		.cfi_offset 4, -28
 450              		.cfi_offset 5, -24
 451              		.cfi_offset 6, -20
 452              		.cfi_offset 7, -16
 453              		.cfi_offset 8, -12
 454              		.cfi_offset 9, -8
 455              		.cfi_offset 14, -4
 456 018e 85B0     		sub	sp, sp, #20
 457              	.LCFI6:
 458              		.cfi_def_cfa_offset 48
 580:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 459              		.loc 1 580 0
 460 0190 0D46     		mov	r5, r1
 461 0192 0192     		str	r2, [sp, #4]
 462 0194 9946     		mov	r9, r3
 584:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 463              		.loc 1 584 0
 464 0196 0446     		mov	r4, r0
 465 0198 10B9     		cbnz	r0, .L52
 584:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 466              		.loc 1 584 0 is_stmt 0 discriminator 1
 467 019a FFF7FEFF 		bl	ulPortSetInterruptMask
 468              	.LVL45:
 469              	.L53:
 470 019e FEE7     		b	.L53
 471              	.LVL46:
 472              	.L52:
 585:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 473              		.loc 1 585 0 is_stmt 1
 474 01a0 29B9     		cbnz	r1, .L69
 585:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 475              		.loc 1 585 0 is_stmt 0 discriminator 2
 476 01a2 036C     		ldr	r3, [r0, #64]
 477              	.LVL47:
 478 01a4 2BB1     		cbz	r3, .L70
 479 01a6 65E0     		b	.L71
 480              	.LVL48:
 481              	.L56:
 482 01a8 FEE7     		b	.L56
 483              	.LVL49:
 484              	.L68:
 485 01aa 0126     		movs	r6, #1
 486              	.LVL50:
 487 01ac 03E0     		b	.L72
 488              	.LVL51:
 489              	.L69:
 585:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 490              		.loc 1 585 0
 491 01ae 0026     		movs	r6, #0
 492 01b0 00E0     		b	.L54
 493              	.LVL52:
 494              	.L70:
 495 01b2 0E46     		mov	r6, r1
 496              	.L54:
 649:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		prvLockQueue( pxQueue );
 497              		.loc 1 649 0 is_stmt 1
 498 01b4 0027     		movs	r7, #0
 499              	.LVL53:
 500              	.L72:
 592:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		taskENTER_CRITICAL();
 501              		.loc 1 592 0
 502 01b6 FFF7FEFF 		bl	vPortEnterCritical
 503              	.LVL54:
 596:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 504              		.loc 1 596 0
 505 01ba A26B     		ldr	r2, [r4, #56]
 506 01bc E36B     		ldr	r3, [r4, #60]
 507 01be 9A42     		cmp	r2, r3
 508 01c0 12D2     		bcs	.L57
 599:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 509              		.loc 1 599 0
 510 01c2 2046     		mov	r0, r4
 511 01c4 2946     		mov	r1, r5
 512 01c6 4A46     		mov	r2, r9
 513 01c8 FFF761FF 		bl	prvCopyDataToQueue
 514              	.LVL55:
 603:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 515              		.loc 1 603 0
 516 01cc 636A     		ldr	r3, [r4, #36]
 517 01ce 3BB1     		cbz	r3, .L59
 605:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 518              		.loc 1 605 0
 519 01d0 04F12400 		add	r0, r4, #36
 520 01d4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 521              	.LVL56:
 522 01d8 0128     		cmp	r0, #1
 523 01da 01D1     		bne	.L59
 611:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						portYIELD_WITHIN_API();
 524              		.loc 1 611 0
 525 01dc FFF7FEFF 		bl	vPortYieldFromISR
 526              	.LVL57:
 527              	.L59:
 615:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				taskEXIT_CRITICAL();
 528              		.loc 1 615 0
 529 01e0 FFF7FEFF 		bl	vPortExitCritical
 530              	.LVL58:
 619:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				return pdPASS;
 531              		.loc 1 619 0
 532 01e4 0120     		movs	r0, #1
 533 01e6 48E0     		b	.L73
 534              	.L57:
 623:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 535              		.loc 1 623 0
 536 01e8 DDF80480 		ldr	r8, [sp, #4]
 537 01ec B8F1000F 		cmp	r8, #0
 538 01f0 02D1     		bne	.L62
 627:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					taskEXIT_CRITICAL();
 539              		.loc 1 627 0
 540 01f2 FFF7FEFF 		bl	vPortExitCritical
 541              	.LVL59:
 542 01f6 3BE0     		b	.L74
 543              	.L62:
 634:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 544              		.loc 1 634 0
 545 01f8 16B9     		cbnz	r6, .L63
 638:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 546              		.loc 1 638 0
 547 01fa 02A8     		add	r0, sp, #8
 548 01fc FFF7FEFF 		bl	vTaskSetTimeOutState
 549              	.LVL60:
 550              	.L63:
 643:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		taskEXIT_CRITICAL();
 551              		.loc 1 643 0
 552 0200 FFF7FEFF 		bl	vPortExitCritical
 553              	.LVL61:
 648:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		vTaskSuspendAll();
 554              		.loc 1 648 0
 555 0204 FFF7FEFF 		bl	vTaskSuspendAll
 556              	.LVL62:
 649:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		prvLockQueue( pxQueue );
 557              		.loc 1 649 0
 558 0208 FFF7FEFF 		bl	vPortEnterCritical
 559              	.LVL63:
 560 020c 636C     		ldr	r3, [r4, #68]
 561 020e 0133     		adds	r3, r3, #1
 562 0210 08BF     		it	eq
 563 0212 6764     		streq	r7, [r4, #68]
 564 0214 A36C     		ldr	r3, [r4, #72]
 565 0216 0133     		adds	r3, r3, #1
 566 0218 08BF     		it	eq
 567 021a A764     		streq	r7, [r4, #72]
 568 021c FFF7FEFF 		bl	vPortExitCritical
 569              	.LVL64:
 652:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 570              		.loc 1 652 0
 571 0220 02A8     		add	r0, sp, #8
 572 0222 01A9     		add	r1, sp, #4
 573 0224 FFF7FEFF 		bl	xTaskCheckForTimeOut
 574              	.LVL65:
 575 0228 E8B9     		cbnz	r0, .L66
 576              	.LVL66:
 577              	.LBB4:
 578              	.LBB5:
1352:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1353:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1354:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
1355:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1356:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xReturn;
1357:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1358:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
1359:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
1360:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL();
1361:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1362:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xReturn;
1363:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1364:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1365:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1366:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
1367:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1368:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xReturn;
1369:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1370:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
1371:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
1372:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1373:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xReturn;
1374:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1375:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1376:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1377:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
1378:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1379:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xReturn;
1380:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1381:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
 579              		.loc 1 1381 0
 580 022a FFF7FEFF 		bl	vPortEnterCritical
 581              	.LVL67:
1382:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 582              		.loc 1 1382 0
 583 022e D4F83880 		ldr	r8, [r4, #56]
 584 0232 E66B     		ldr	r6, [r4, #60]
 585              	.LVL68:
1383:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL();
 586              		.loc 1 1383 0
 587 0234 FFF7FEFF 		bl	vPortExitCritical
 588              	.LVL69:
 589              	.LBE5:
 590              	.LBE4:
 654:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 591              		.loc 1 654 0
 592 0238 B045     		cmp	r8, r6
 593 023a 0ED1     		bne	.L67
 657:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 594              		.loc 1 657 0
 595 023c 04F11000 		add	r0, r4, #16
 596 0240 0199     		ldr	r1, [sp, #4]
 597 0242 FFF7FEFF 		bl	vTaskPlaceOnEventList
 598              	.LVL70:
 664:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvUnlockQueue( pxQueue );
 599              		.loc 1 664 0
 600 0246 2046     		mov	r0, r4
 601 0248 FFF7DAFE 		bl	prvUnlockQueue
 602              	.LVL71:
 671:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 603              		.loc 1 671 0
 604 024c FFF7FEFF 		bl	xTaskResumeAll
 605              	.LVL72:
 606 0250 0028     		cmp	r0, #0
 607 0252 AAD1     		bne	.L68
 673:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					portYIELD_WITHIN_API();
 608              		.loc 1 673 0
 609 0254 FFF7FEFF 		bl	vPortYieldFromISR
 610              	.LVL73:
 611 0258 A7E7     		b	.L68
 612              	.L67:
 679:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvUnlockQueue( pxQueue );
 613              		.loc 1 679 0
 614 025a 2046     		mov	r0, r4
 615 025c FFF7D0FE 		bl	prvUnlockQueue
 616              	.LVL74:
 680:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				( void ) xTaskResumeAll();
 617              		.loc 1 680 0
 618 0260 FFF7FEFF 		bl	xTaskResumeAll
 619              	.LVL75:
 620 0264 A1E7     		b	.L68
 621              	.LVL76:
 622              	.L66:
 686:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			prvUnlockQueue( pxQueue );
 623              		.loc 1 686 0
 624 0266 2046     		mov	r0, r4
 625 0268 FFF7CAFE 		bl	prvUnlockQueue
 626              	.LVL77:
 687:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			( void ) xTaskResumeAll();
 627              		.loc 1 687 0
 628 026c FFF7FEFF 		bl	xTaskResumeAll
 629              	.LVL78:
 630              	.L74:
 692:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			return errQUEUE_FULL;
 631              		.loc 1 692 0
 632 0270 0020     		movs	r0, #0
 633 0272 02E0     		b	.L73
 634              	.LVL79:
 635              	.L71:
 585:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 636              		.loc 1 585 0
 637 0274 FFF7FEFF 		bl	ulPortSetInterruptMask
 638              	.LVL80:
 639 0278 96E7     		b	.L56
 640              	.LVL81:
 641              	.L73:
 695:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 642              		.loc 1 695 0
 643 027a 05B0     		add	sp, sp, #20
 644 027c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 645              		.cfi_endproc
 646              	.LFE3:
 648              		.align	1
 649              		.global	xQueueCreateMutex
 650              		.thumb
 651              		.thumb_func
 653              	xQueueCreateMutex:
 654              	.LFB2:
 378:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 655              		.loc 1 378 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              	.LVL82:
 660 0280 38B5     		push	{r3, r4, r5, lr}
 661              	.LCFI7:
 662              		.cfi_def_cfa_offset 16
 663              		.cfi_offset 3, -16
 664              		.cfi_offset 4, -12
 665              		.cfi_offset 5, -8
 666              		.cfi_offset 14, -4
 386:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 667              		.loc 1 386 0
 668 0282 4C20     		movs	r0, #76
 669              	.LVL83:
 670 0284 FFF7FEFF 		bl	pvPortMalloc
 671              	.LVL84:
 387:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxNewQueue != NULL )
 672              		.loc 1 387 0
 673 0288 0446     		mov	r4, r0
 674 028a 08B1     		cbz	r0, .L76
 675 028c 03E0     		b	.L79
 676              	.LVL85:
 677              	.L77:
 678 028e FEE7     		b	.L77
 679              	.LVL86:
 680              	.L76:
 427:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		configASSERT( pxNewQueue );
 681              		.loc 1 427 0
 682 0290 FFF7FEFF 		bl	ulPortSetInterruptMask
 683              	.LVL87:
 684 0294 FBE7     		b	.L77
 685              	.LVL88:
 686              	.L79:
 402:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 687              		.loc 1 402 0
 688 0296 0123     		movs	r3, #1
 390:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 689              		.loc 1 390 0
 690 0298 0025     		movs	r5, #0
 402:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 691              		.loc 1 402 0
 692 029a C363     		str	r3, [r0, #60]
 404:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 693              		.loc 1 404 0
 694 029c 4FF0FF33 		mov	r3, #-1
 401:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 695              		.loc 1 401 0
 696 02a0 8563     		str	r5, [r0, #56]
 390:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 697              		.loc 1 390 0
 698 02a2 4560     		str	r5, [r0, #4]
 404:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 699              		.loc 1 404 0
 700 02a4 4364     		str	r3, [r0, #68]
 391:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 701              		.loc 1 391 0
 702 02a6 0560     		str	r5, [r0, #0]
 405:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 703              		.loc 1 405 0
 704 02a8 8364     		str	r3, [r0, #72]
 395:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 705              		.loc 1 395 0
 706 02aa 8560     		str	r5, [r0, #8]
 396:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->pcReadFrom = NULL;
 707              		.loc 1 396 0
 708 02ac C560     		str	r5, [r0, #12]
 403:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 709              		.loc 1 403 0
 710 02ae 0564     		str	r5, [r0, #64]
 414:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 711              		.loc 1 414 0
 712 02b0 00F11000 		add	r0, r0, #16
 713              	.LVL89:
 714 02b4 FFF7FEFF 		bl	vListInitialise
 715              	.LVL90:
 415:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 716              		.loc 1 415 0
 717 02b8 04F12400 		add	r0, r4, #36
 718 02bc FFF7FEFF 		bl	vListInitialise
 719              	.LVL91:
 420:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 720              		.loc 1 420 0
 721 02c0 2046     		mov	r0, r4
 722 02c2 2946     		mov	r1, r5
 723 02c4 2A46     		mov	r2, r5
 724 02c6 2B46     		mov	r3, r5
 725 02c8 FFF7FEFF 		bl	xQueueGenericSend
 726              	.LVL92:
 429:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 727              		.loc 1 429 0
 728 02cc 2046     		mov	r0, r4
 729 02ce 38BD     		pop	{r3, r4, r5, pc}
 730              		.cfi_endproc
 731              	.LFE2:
 733              		.align	1
 734              		.global	xQueueGenericSendFromISR
 735              		.thumb
 736              		.thumb_func
 738              	xQueueGenericSendFromISR:
 739              	.LFB4:
 907:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 740              		.loc 1 907 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              	.LVL93:
 745 02d0 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 746              	.LCFI8:
 747              		.cfi_def_cfa_offset 24
 748              		.cfi_offset 4, -24
 749              		.cfi_offset 5, -20
 750              		.cfi_offset 6, -16
 751              		.cfi_offset 7, -12
 752              		.cfi_offset 8, -8
 753              		.cfi_offset 14, -4
 907:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 754              		.loc 1 907 0
 755 02d4 0E46     		mov	r6, r1
 756 02d6 1546     		mov	r5, r2
 757 02d8 9846     		mov	r8, r3
 911:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 758              		.loc 1 911 0
 759 02da 0446     		mov	r4, r0
 760 02dc 10B9     		cbnz	r0, .L81
 911:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 761              		.loc 1 911 0 is_stmt 0 discriminator 1
 762 02de FFF7FEFF 		bl	ulPortSetInterruptMask
 763              	.LVL94:
 764              	.L82:
 765 02e2 FEE7     		b	.L82
 766              	.LVL95:
 767              	.L81:
 912:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 768              		.loc 1 912 0 is_stmt 1
 769 02e4 F9B9     		cbnz	r1, .L83
 912:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 770              		.loc 1 912 0 is_stmt 0 discriminator 2
 771 02e6 016C     		ldr	r1, [r0, #64]
 772              	.LVL96:
 773 02e8 E9B1     		cbz	r1, .L83
 774 02ea 19E0     		b	.L100
 775              	.LVL97:
 776              	.L85:
 777 02ec FEE7     		b	.L85
 778              	.LVL98:
 779              	.L90:
 925:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 780              		.loc 1 925 0 is_stmt 1
 781 02ee 2046     		mov	r0, r4
 782              	.LVL99:
 783 02f0 3146     		mov	r1, r6
 784 02f2 4246     		mov	r2, r8
 785 02f4 FFF7CBFE 		bl	prvCopyDataToQueue
 786              	.LVL100:
 929:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 787              		.loc 1 929 0
 788 02f8 A36C     		ldr	r3, [r4, #72]
 789 02fa 0133     		adds	r3, r3, #1
 790 02fc 0BD1     		bne	.L86
 931:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 791              		.loc 1 931 0
 792 02fe 636A     		ldr	r3, [r4, #36]
 793 0300 03B9     		cbnz	r3, .L87
 794 0302 0BE0     		b	.L102
 795              	.L87:
 933:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 796              		.loc 1 933 0
 797 0304 04F12400 		add	r0, r4, #36
 798 0308 FFF7FEFF 		bl	xTaskRemoveFromEventList
 799              	.LVL101:
 800 030c 30B1     		cbz	r0, .L102
 937:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 801              		.loc 1 937 0
 802 030e 2DB1     		cbz	r5, .L102
 939:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 803              		.loc 1 939 0
 804 0310 0124     		movs	r4, #1
 805              	.LVL102:
 806 0312 2C60     		str	r4, [r5, #0]
 807 0314 0FE0     		b	.L88
 808              	.LVL103:
 809              	.L86:
 948:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				++( pxQueue->xTxLock );
 810              		.loc 1 948 0
 811 0316 A36C     		ldr	r3, [r4, #72]
 812 0318 0133     		adds	r3, r3, #1
 813 031a A364     		str	r3, [r4, #72]
 814              	.L102:
 951:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdPASS;
 815              		.loc 1 951 0
 816 031c 0124     		movs	r4, #1
 817              	.LVL104:
 818 031e 0AE0     		b	.L88
 819              	.LVL105:
 820              	.L100:
 912:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 821              		.loc 1 912 0
 822 0320 FFF7FEFF 		bl	ulPortSetInterruptMask
 823              	.LVL106:
 824 0324 E2E7     		b	.L85
 825              	.LVL107:
 826              	.L83:
 919:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 827              		.loc 1 919 0
 828 0326 FFF7FEFF 		bl	ulPortSetInterruptMask
 829              	.LVL108:
 921:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 830              		.loc 1 921 0
 831 032a A36B     		ldr	r3, [r4, #56]
 832 032c E16B     		ldr	r1, [r4, #60]
 833 032e 8B42     		cmp	r3, r1
 919:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 834              		.loc 1 919 0
 835 0330 0746     		mov	r7, r0
 836              	.LVL109:
 921:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 837              		.loc 1 921 0
 838 0332 DCD3     		bcc	.L90
 956:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = errQUEUE_FULL;
 839              		.loc 1 956 0
 840 0334 0024     		movs	r4, #0
 841              	.LVL110:
 842              	.L88:
 959:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 843              		.loc 1 959 0
 844 0336 3846     		mov	r0, r7
 845 0338 FFF7FEFF 		bl	vPortClearInterruptMask
 846              	.LVL111:
 962:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 847              		.loc 1 962 0
 848 033c 2046     		mov	r0, r4
 849 033e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 850              		.cfi_endproc
 851              	.LFE4:
 853              		.align	1
 854              		.global	xQueueGenericReceive
 855              		.thumb
 856              		.thumb_func
 858              	xQueueGenericReceive:
 859              	.LFB5:
 966:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 860              		.loc 1 966 0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 16
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 864              	.LVL112:
 865 0342 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 866              	.LCFI9:
 867              		.cfi_def_cfa_offset 28
 868              		.cfi_offset 4, -28
 869              		.cfi_offset 5, -24
 870              		.cfi_offset 6, -20
 871              		.cfi_offset 7, -16
 872              		.cfi_offset 8, -12
 873              		.cfi_offset 9, -8
 874              		.cfi_offset 14, -4
 875 0346 85B0     		sub	sp, sp, #20
 876              	.LCFI10:
 877              		.cfi_def_cfa_offset 48
 966:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 878              		.loc 1 966 0
 879 0348 0D46     		mov	r5, r1
 880 034a 0192     		str	r2, [sp, #4]
 881 034c 9946     		mov	r9, r3
 971:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 882              		.loc 1 971 0
 883 034e 0446     		mov	r4, r0
 884 0350 10B9     		cbnz	r0, .L104
 971:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 885              		.loc 1 971 0 is_stmt 0 discriminator 1
 886 0352 FFF7FEFF 		bl	ulPortSetInterruptMask
 887              	.LVL113:
 888              	.L105:
 889 0356 FEE7     		b	.L105
 890              	.LVL114:
 891              	.L104:
 972:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 892              		.loc 1 972 0 is_stmt 1
 893 0358 29B9     		cbnz	r1, .L125
 972:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 894              		.loc 1 972 0 is_stmt 0 discriminator 2
 895 035a 036C     		ldr	r3, [r0, #64]
 896              	.LVL115:
 897 035c 2BB1     		cbz	r3, .L126
 898 035e 7EE0     		b	.L130
 899              	.LVL116:
 900              	.L108:
 901 0360 FEE7     		b	.L108
 902              	.LVL117:
 903              	.L124:
 904 0362 0126     		movs	r6, #1
 905              	.LVL118:
 906 0364 03E0     		b	.L131
 907              	.LVL119:
 908              	.L125:
 972:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 909              		.loc 1 972 0
 910 0366 0026     		movs	r6, #0
 911 0368 00E0     		b	.L106
 912              	.LVL120:
 913              	.L126:
 914 036a 0E46     		mov	r6, r1
 915              	.L106:
1067:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		prvLockQueue( pxQueue );
 916              		.loc 1 1067 0 is_stmt 1
 917 036c 0027     		movs	r7, #0
 918              	.LVL121:
 919              	.L131:
 980:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		taskENTER_CRITICAL();
 920              		.loc 1 980 0
 921 036e FFF7FEFF 		bl	vPortEnterCritical
 922              	.LVL122:
 984:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 923              		.loc 1 984 0
 924 0372 A36B     		ldr	r3, [r4, #56]
 925 0374 3BB3     		cbz	r3, .L109
 989:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 926              		.loc 1 989 0
 927 0376 2046     		mov	r0, r4
 928 0378 2946     		mov	r1, r5
 987:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pcOriginalReadPosition = pxQueue->pcReadFrom;
 929              		.loc 1 987 0
 930 037a E668     		ldr	r6, [r4, #12]
 931              	.LVL123:
 989:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 932              		.loc 1 989 0
 933 037c FFF774FE 		bl	prvCopyDataFromQueue
 934              	.LVL124:
 991:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xJustPeeking == pdFALSE )
 935              		.loc 1 991 0
 936 0380 B9F1000F 		cmp	r9, #0
 937 0384 12D1     		bne	.L110
 996:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					--( pxQueue->uxMessagesWaiting );
 938              		.loc 1 996 0
 939 0386 A36B     		ldr	r3, [r4, #56]
 940 0388 013B     		subs	r3, r3, #1
 941 038a A363     		str	r3, [r4, #56]
1000:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 942              		.loc 1 1000 0
 943 038c 2368     		ldr	r3, [r4, #0]
 944 038e 13B9     		cbnz	r3, .L111
1004:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 945              		.loc 1 1004 0
 946 0390 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 947              	.LVL125:
 948 0394 6060     		str	r0, [r4, #4]
 949              	.L111:
1009:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 950              		.loc 1 1009 0
 951 0396 2369     		ldr	r3, [r4, #16]
 952 0398 8BB1     		cbz	r3, .L113
1011:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 953              		.loc 1 1011 0
 954 039a 04F11000 		add	r0, r4, #16
 955 039e FFF7FEFF 		bl	xTaskRemoveFromEventList
 956              	.LVL126:
 957 03a2 0128     		cmp	r0, #1
 958 03a4 0BD1     		bne	.L113
 959              	.L115:
1013:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							portYIELD_WITHIN_API();
 960              		.loc 1 1013 0
 961 03a6 FFF7FEFF 		bl	vPortYieldFromISR
 962              	.LVL127:
 963 03aa 08E0     		b	.L113
 964              	.L110:
1027:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 965              		.loc 1 1027 0
 966 03ac 636A     		ldr	r3, [r4, #36]
1023:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					pxQueue->pcReadFrom = pcOriginalReadPosition;
 967              		.loc 1 1023 0
 968 03ae E660     		str	r6, [r4, #12]
1027:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 969              		.loc 1 1027 0
 970 03b0 2BB1     		cbz	r3, .L113
1031:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 971              		.loc 1 1031 0
 972 03b2 04F12400 		add	r0, r4, #36
 973 03b6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 974              	.LVL128:
 975 03ba 0028     		cmp	r0, #0
 976 03bc F3D1     		bne	.L115
 977              	.L113:
1039:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				taskEXIT_CRITICAL();
 978              		.loc 1 1039 0
 979 03be FFF7FEFF 		bl	vPortExitCritical
 980              	.LVL129:
1040:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				return pdPASS;
 981              		.loc 1 1040 0
 982 03c2 0120     		movs	r0, #1
 983 03c4 4EE0     		b	.L132
 984              	.LVL130:
 985              	.L109:
1044:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 986              		.loc 1 1044 0
 987 03c6 DDF80480 		ldr	r8, [sp, #4]
 988 03ca B8F1000F 		cmp	r8, #0
 989 03ce 02D1     		bne	.L117
1048:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					taskEXIT_CRITICAL();
 990              		.loc 1 1048 0
 991 03d0 FFF7FEFF 		bl	vPortExitCritical
 992              	.LVL131:
 993 03d4 41E0     		b	.L133
 994              	.L117:
1052:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 995              		.loc 1 1052 0
 996 03d6 16B9     		cbnz	r6, .L118
1056:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 997              		.loc 1 1056 0
 998 03d8 02A8     		add	r0, sp, #8
 999 03da FFF7FEFF 		bl	vTaskSetTimeOutState
 1000              	.LVL132:
 1001              	.L118:
1061:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		taskEXIT_CRITICAL();
 1002              		.loc 1 1061 0
 1003 03de FFF7FEFF 		bl	vPortExitCritical
 1004              	.LVL133:
1066:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		vTaskSuspendAll();
 1005              		.loc 1 1066 0
 1006 03e2 FFF7FEFF 		bl	vTaskSuspendAll
 1007              	.LVL134:
1067:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		prvLockQueue( pxQueue );
 1008              		.loc 1 1067 0
 1009 03e6 FFF7FEFF 		bl	vPortEnterCritical
 1010              	.LVL135:
 1011 03ea 636C     		ldr	r3, [r4, #68]
 1012 03ec 0133     		adds	r3, r3, #1
 1013 03ee 08BF     		it	eq
 1014 03f0 6764     		streq	r7, [r4, #68]
 1015 03f2 A36C     		ldr	r3, [r4, #72]
 1016 03f4 0133     		adds	r3, r3, #1
 1017 03f6 08BF     		it	eq
 1018 03f8 A764     		streq	r7, [r4, #72]
 1019 03fa FFF7FEFF 		bl	vPortExitCritical
 1020              	.LVL136:
1070:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1021              		.loc 1 1070 0
 1022 03fe 02A8     		add	r0, sp, #8
 1023 0400 01A9     		add	r1, sp, #4
 1024 0402 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1025              	.LVL137:
 1026 0406 18BB     		cbnz	r0, .L121
 1027              	.LVL138:
 1028              	.LBB8:
 1029              	.LBB9:
1358:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
 1030              		.loc 1 1358 0
 1031 0408 FFF7FEFF 		bl	vPortEnterCritical
 1032              	.LVL139:
1359:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 1033              		.loc 1 1359 0
 1034 040c A66B     		ldr	r6, [r4, #56]
 1035              	.LVL140:
1360:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL();
 1036              		.loc 1 1360 0
 1037 040e FFF7FEFF 		bl	vPortExitCritical
 1038              	.LVL141:
 1039              	.LBE9:
 1040              	.LBE8:
1072:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1041              		.loc 1 1072 0
 1042 0412 BEB9     		cbnz	r6, .L122
1078:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1043              		.loc 1 1078 0
 1044 0414 2368     		ldr	r3, [r4, #0]
 1045 0416 33B9     		cbnz	r3, .L123
1080:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						portENTER_CRITICAL();
 1046              		.loc 1 1080 0
 1047 0418 FFF7FEFF 		bl	vPortEnterCritical
 1048              	.LVL142:
1082:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 1049              		.loc 1 1082 0
 1050 041c 6068     		ldr	r0, [r4, #4]
 1051 041e FFF7FEFF 		bl	vTaskPriorityInherit
 1052              	.LVL143:
1084:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						portEXIT_CRITICAL();
 1053              		.loc 1 1084 0
 1054 0422 FFF7FEFF 		bl	vPortExitCritical
 1055              	.LVL144:
 1056              	.L123:
1089:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1057              		.loc 1 1089 0
 1058 0426 04F12400 		add	r0, r4, #36
 1059 042a 0199     		ldr	r1, [sp, #4]
 1060 042c FFF7FEFF 		bl	vTaskPlaceOnEventList
 1061              	.LVL145:
1090:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvUnlockQueue( pxQueue );
 1062              		.loc 1 1090 0
 1063 0430 2046     		mov	r0, r4
 1064 0432 FFF7E5FD 		bl	prvUnlockQueue
 1065              	.LVL146:
1091:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1066              		.loc 1 1091 0
 1067 0436 FFF7FEFF 		bl	xTaskResumeAll
 1068              	.LVL147:
 1069 043a 0028     		cmp	r0, #0
 1070 043c 91D1     		bne	.L124
1093:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					portYIELD_WITHIN_API();
 1071              		.loc 1 1093 0
 1072 043e FFF7FEFF 		bl	vPortYieldFromISR
 1073              	.LVL148:
 1074 0442 8EE7     		b	.L124
 1075              	.L122:
1099:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				prvUnlockQueue( pxQueue );
 1076              		.loc 1 1099 0
 1077 0444 2046     		mov	r0, r4
 1078 0446 FFF7DBFD 		bl	prvUnlockQueue
 1079              	.LVL149:
1100:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				( void ) xTaskResumeAll();
 1080              		.loc 1 1100 0
 1081 044a FFF7FEFF 		bl	xTaskResumeAll
 1082              	.LVL150:
 1083 044e 88E7     		b	.L124
 1084              	.LVL151:
 1085              	.L121:
1105:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			prvUnlockQueue( pxQueue );
 1086              		.loc 1 1105 0
 1087 0450 2046     		mov	r0, r4
 1088 0452 FFF7D5FD 		bl	prvUnlockQueue
 1089              	.LVL152:
1106:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			( void ) xTaskResumeAll();
 1090              		.loc 1 1106 0
 1091 0456 FFF7FEFF 		bl	xTaskResumeAll
 1092              	.LVL153:
 1093              	.L133:
1108:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			return errQUEUE_EMPTY;
 1094              		.loc 1 1108 0
 1095 045a 0020     		movs	r0, #0
 1096 045c 02E0     		b	.L132
 1097              	.LVL154:
 1098              	.L130:
 972:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1099              		.loc 1 972 0
 1100 045e FFF7FEFF 		bl	ulPortSetInterruptMask
 1101              	.LVL155:
 1102 0462 7DE7     		b	.L108
 1103              	.LVL156:
 1104              	.L132:
1111:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 1105              		.loc 1 1111 0
 1106 0464 05B0     		add	sp, sp, #20
 1107 0466 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1108              		.cfi_endproc
 1109              	.LFE5:
 1111              		.align	1
 1112              		.global	xQueueReceiveFromISR
 1113              		.thumb
 1114              		.thumb_func
 1116              	xQueueReceiveFromISR:
 1117              	.LFB6:
1115:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 1118              		.loc 1 1115 0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 0
 1121              		@ frame_needed = 0, uses_anonymous_args = 0
 1122              	.LVL157:
 1123 046a F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1124              	.LCFI11:
 1125              		.cfi_def_cfa_offset 24
 1126              		.cfi_offset 3, -24
 1127              		.cfi_offset 4, -20
 1128              		.cfi_offset 5, -16
 1129              		.cfi_offset 6, -12
 1130              		.cfi_offset 7, -8
 1131              		.cfi_offset 14, -4
1115:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 1132              		.loc 1 1115 0
 1133 046c 0E46     		mov	r6, r1
 1134 046e 1546     		mov	r5, r2
1119:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1135              		.loc 1 1119 0
 1136 0470 0446     		mov	r4, r0
 1137 0472 10B9     		cbnz	r0, .L135
1119:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1138              		.loc 1 1119 0 is_stmt 0 discriminator 1
 1139 0474 FFF7FEFF 		bl	ulPortSetInterruptMask
 1140              	.LVL158:
 1141              	.L136:
 1142 0478 FEE7     		b	.L136
 1143              	.LVL159:
 1144              	.L135:
1120:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1145              		.loc 1 1120 0 is_stmt 1
 1146 047a 09BB     		cbnz	r1, .L137
1120:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1147              		.loc 1 1120 0 is_stmt 0 discriminator 2
 1148 047c 036C     		ldr	r3, [r0, #64]
 1149 047e FBB1     		cbz	r3, .L137
 1150 0480 1BE0     		b	.L154
 1151              	.LVL160:
 1152              	.L139:
 1153 0482 FEE7     		b	.L139
 1154              	.LVL161:
 1155              	.L144:
1129:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1156              		.loc 1 1129 0 is_stmt 1
 1157 0484 2046     		mov	r0, r4
 1158              	.LVL162:
 1159 0486 3146     		mov	r1, r6
 1160 0488 FFF7EEFD 		bl	prvCopyDataFromQueue
 1161              	.LVL163:
1130:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 1162              		.loc 1 1130 0
 1163 048c A36B     		ldr	r3, [r4, #56]
 1164 048e 013B     		subs	r3, r3, #1
 1165 0490 A363     		str	r3, [r4, #56]
1135:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
 1166              		.loc 1 1135 0
 1167 0492 636C     		ldr	r3, [r4, #68]
 1168 0494 0133     		adds	r3, r3, #1
 1169 0496 0BD1     		bne	.L140
1137:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1170              		.loc 1 1137 0
 1171 0498 2369     		ldr	r3, [r4, #16]
 1172 049a 03B9     		cbnz	r3, .L141
 1173 049c 0BE0     		b	.L156
 1174              	.L141:
1139:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1175              		.loc 1 1139 0
 1176 049e 04F11000 		add	r0, r4, #16
 1177 04a2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1178              	.LVL164:
 1179 04a6 30B1     		cbz	r0, .L156
1143:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 1180              		.loc 1 1143 0
 1181 04a8 2DB1     		cbz	r5, .L156
1145:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 1182              		.loc 1 1145 0
 1183 04aa 0124     		movs	r4, #1
 1184              	.LVL165:
 1185 04ac 2C60     		str	r4, [r5, #0]
 1186 04ae 0EE0     		b	.L142
 1187              	.LVL166:
 1188              	.L140:
1154:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				++( pxQueue->xRxLock );
 1189              		.loc 1 1154 0
 1190 04b0 636C     		ldr	r3, [r4, #68]
 1191 04b2 0133     		adds	r3, r3, #1
 1192 04b4 6364     		str	r3, [r4, #68]
 1193              	.L156:
1157:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdPASS;
 1194              		.loc 1 1157 0
 1195 04b6 0124     		movs	r4, #1
 1196              	.LVL167:
 1197 04b8 09E0     		b	.L142
 1198              	.LVL168:
 1199              	.L154:
1120:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1200              		.loc 1 1120 0
 1201 04ba FFF7FEFF 		bl	ulPortSetInterruptMask
 1202              	.LVL169:
 1203 04be E0E7     		b	.L139
 1204              	.LVL170:
 1205              	.L137:
1122:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1206              		.loc 1 1122 0
 1207 04c0 FFF7FEFF 		bl	ulPortSetInterruptMask
 1208              	.LVL171:
1125:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1209              		.loc 1 1125 0
 1210 04c4 A36B     		ldr	r3, [r4, #56]
1122:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1211              		.loc 1 1122 0
 1212 04c6 0746     		mov	r7, r0
 1213              	.LVL172:
1125:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1214              		.loc 1 1125 0
 1215 04c8 002B     		cmp	r3, #0
 1216 04ca DBD1     		bne	.L144
1161:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdFAIL;
 1217              		.loc 1 1161 0
 1218 04cc 1C46     		mov	r4, r3
 1219              	.LVL173:
 1220              	.L142:
1165:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1221              		.loc 1 1165 0
 1222 04ce 3846     		mov	r0, r7
 1223 04d0 FFF7FEFF 		bl	vPortClearInterruptMask
 1224              	.LVL174:
1168:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 1225              		.loc 1 1168 0
 1226 04d4 2046     		mov	r0, r4
 1227 04d6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1228              		.cfi_endproc
 1229              	.LFE6:
 1231              		.align	1
 1232              		.global	uxQueueMessagesWaiting
 1233              		.thumb
 1234              		.thumb_func
 1236              	uxQueueMessagesWaiting:
 1237              	.LFB7:
1172:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 1238              		.loc 1 1172 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242              	.LVL175:
 1243 04d8 10B5     		push	{r4, lr}
 1244              	.LCFI12:
 1245              		.cfi_def_cfa_offset 8
 1246              		.cfi_offset 4, -8
 1247              		.cfi_offset 14, -4
1175:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1248              		.loc 1 1175 0
 1249 04da 0446     		mov	r4, r0
 1250 04dc 10B9     		cbnz	r0, .L158
1175:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1251              		.loc 1 1175 0 is_stmt 0 discriminator 1
 1252 04de FFF7FEFF 		bl	ulPortSetInterruptMask
 1253              	.LVL176:
 1254              	.L159:
 1255 04e2 FEE7     		b	.L159
 1256              	.LVL177:
 1257              	.L158:
1177:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskENTER_CRITICAL();
 1258              		.loc 1 1177 0 is_stmt 1
 1259 04e4 FFF7FEFF 		bl	vPortEnterCritical
 1260              	.LVL178:
1178:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		uxReturn = pxQueue->uxMessagesWaiting;
 1261              		.loc 1 1178 0
 1262 04e8 A46B     		ldr	r4, [r4, #56]
 1263              	.LVL179:
1179:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	taskEXIT_CRITICAL();
 1264              		.loc 1 1179 0
 1265 04ea FFF7FEFF 		bl	vPortExitCritical
 1266              	.LVL180:
1182:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 1267              		.loc 1 1182 0
 1268 04ee 2046     		mov	r0, r4
 1269 04f0 10BD     		pop	{r4, pc}
 1270              		.cfi_endproc
 1271              	.LFE7:
 1273              		.align	1
 1274              		.global	uxQueueMessagesWaitingFromISR
 1275              		.thumb
 1276              		.thumb_func
 1278              	uxQueueMessagesWaitingFromISR:
 1279              	.LFB8:
1186:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 1280              		.loc 1 1186 0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 0
 1283              		@ frame_needed = 0, uses_anonymous_args = 0
 1284              	.LVL181:
 1285 04f2 08B5     		push	{r3, lr}
 1286              	.LCFI13:
 1287              		.cfi_def_cfa_offset 8
 1288              		.cfi_offset 3, -8
 1289              		.cfi_offset 14, -4
1189:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1290              		.loc 1 1189 0
 1291 04f4 10B9     		cbnz	r0, .L161
1189:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1292              		.loc 1 1189 0 is_stmt 0 discriminator 1
 1293 04f6 FFF7FEFF 		bl	ulPortSetInterruptMask
 1294              	.LVL182:
 1295              	.L162:
 1296 04fa FEE7     		b	.L162
 1297              	.LVL183:
 1298              	.L161:
1191:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 1299              		.loc 1 1191 0 is_stmt 1
 1300 04fc 806B     		ldr	r0, [r0, #56]
 1301              	.LVL184:
1194:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 1302              		.loc 1 1194 0
 1303 04fe 08BD     		pop	{r3, pc}
 1304              		.cfi_endproc
 1305              	.LFE8:
 1307              		.align	1
 1308              		.global	vQueueDelete
 1309              		.thumb
 1310              		.thumb_func
 1312              	vQueueDelete:
 1313              	.LFB9:
1198:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 1314              		.loc 1 1198 0
 1315              		.cfi_startproc
 1316              		@ args = 0, pretend = 0, frame = 0
 1317              		@ frame_needed = 0, uses_anonymous_args = 0
 1318              	.LVL185:
 1319 0500 10B5     		push	{r4, lr}
 1320              	.LCFI14:
 1321              		.cfi_def_cfa_offset 8
 1322              		.cfi_offset 4, -8
 1323              		.cfi_offset 14, -4
1199:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1324              		.loc 1 1199 0
 1325 0502 0446     		mov	r4, r0
 1326 0504 10B9     		cbnz	r0, .L164
1199:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1327              		.loc 1 1199 0 is_stmt 0 discriminator 1
 1328 0506 FFF7FEFF 		bl	ulPortSetInterruptMask
 1329              	.LVL186:
 1330              	.L165:
 1331 050a FEE7     		b	.L165
 1332              	.LVL187:
 1333              	.L164:
1203:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	vPortFree( pxQueue->pcHead );
 1334              		.loc 1 1203 0 is_stmt 1
 1335 050c 0068     		ldr	r0, [r0, #0]
 1336              	.LVL188:
 1337 050e FFF7FEFF 		bl	vPortFree
 1338              	.LVL189:
1204:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	vPortFree( pxQueue );
 1339              		.loc 1 1204 0
 1340 0512 2046     		mov	r0, r4
1205:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 1341              		.loc 1 1205 0
 1342 0514 BDE81040 		pop	{r4, lr}
1204:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	vPortFree( pxQueue );
 1343              		.loc 1 1204 0
 1344 0518 FFF7FEBF 		b	vPortFree
 1345              	.LVL190:
 1346              		.cfi_endproc
 1347              	.LFE9:
 1349              		.align	1
 1350              		.global	xQueueIsQueueEmptyFromISR
 1351              		.thumb
 1352              		.thumb_func
 1354              	xQueueIsQueueEmptyFromISR:
 1355              	.LFB14:
1367:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 1356              		.loc 1 1367 0
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 0
 1359              		@ frame_needed = 0, uses_anonymous_args = 0
 1360              	.LVL191:
 1361 051c 08B5     		push	{r3, lr}
 1362              	.LCFI15:
 1363              		.cfi_def_cfa_offset 8
 1364              		.cfi_offset 3, -8
 1365              		.cfi_offset 14, -4
1370:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1366              		.loc 1 1370 0
 1367 051e 10B9     		cbnz	r0, .L167
1370:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1368              		.loc 1 1370 0 is_stmt 0 discriminator 1
 1369 0520 FFF7FEFF 		bl	ulPortSetInterruptMask
 1370              	.LVL192:
 1371              	.L168:
 1372 0524 FEE7     		b	.L168
 1373              	.LVL193:
 1374              	.L167:
1371:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 1375              		.loc 1 1371 0 is_stmt 1
 1376 0526 806B     		ldr	r0, [r0, #56]
 1377              	.LVL194:
1374:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 1378              		.loc 1 1374 0
 1379 0528 D0F10100 		rsbs	r0, r0, #1
 1380              	.LVL195:
 1381 052c 38BF     		it	cc
 1382 052e 0020     		movcc	r0, #0
 1383 0530 08BD     		pop	{r3, pc}
 1384              		.cfi_endproc
 1385              	.LFE14:
 1387              		.align	1
 1388              		.global	xQueueIsQueueFullFromISR
 1389              		.thumb
 1390              		.thumb_func
 1392              	xQueueIsQueueFullFromISR:
 1393              	.LFB16:
1384:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1385:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xReturn;
1386:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1387:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1388:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1389:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
1390:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
 1394              		.loc 1 1390 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398              	.LVL196:
 1399 0532 08B5     		push	{r3, lr}
 1400              	.LCFI16:
 1401              		.cfi_def_cfa_offset 8
 1402              		.cfi_offset 3, -8
 1403              		.cfi_offset 14, -4
1391:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xReturn;
1392:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1393:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	configASSERT( pxQueue );
 1404              		.loc 1 1393 0
 1405 0534 10B9     		cbnz	r0, .L170
 1406              		.loc 1 1393 0 is_stmt 0 discriminator 1
 1407 0536 FFF7FEFF 		bl	ulPortSetInterruptMask
 1408              	.LVL197:
 1409              	.L171:
 1410 053a FEE7     		b	.L171
 1411              	.LVL198:
 1412              	.L170:
1394:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 1413              		.loc 1 1394 0 is_stmt 1
 1414 053c 826B     		ldr	r2, [r0, #56]
 1415              	.LVL199:
 1416 053e C06B     		ldr	r0, [r0, #60]
 1417              	.LVL200:
1395:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1396:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xReturn;
1397:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
 1418              		.loc 1 1397 0
 1419 0540 131A     		subs	r3, r2, r0
 1420 0542 5842     		rsbs	r0, r3, #0
 1421              	.LVL201:
 1422 0544 5841     		adcs	r0, r0, r3
 1423 0546 08BD     		pop	{r3, pc}
 1424              		.cfi_endproc
 1425              	.LFE16:
 1427              		.align	1
 1428              		.global	vQueueWaitForMessageRestricted
 1429              		.thumb
 1430              		.thumb_func
 1432              	vQueueWaitForMessageRestricted:
 1433              	.LFB17:
1398:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1399:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1400:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configUSE_CO_ROUTINES == 1
1401:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueCRSend( xQueueHandle pxQueue, const void *pvItemToQueue, portTickType xT
1402:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1403:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xReturn;
1404:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1405:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* If the queue is already full we may have to block.  A critical section
1406:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	is required to prevent an interrupt removing something from the queue
1407:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	between the check to see if the queue is full and blocking on the queue. */
1408:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portDISABLE_INTERRUPTS();
1409:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1410:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( prvIsQueueFull( pxQueue ) != pdFALSE )
1411:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1412:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* The queue is full - do we want to block or just leave without
1413:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			posting? */
1414:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( xTicksToWait > ( portTickType ) 0 )
1415:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1416:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* As this is called from a coroutine we cannot block directly, but
1417:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				return indicating that we need to block. */
1418:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
1419:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				portENABLE_INTERRUPTS();
1420:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				return errQUEUE_BLOCKED;
1421:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1422:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
1423:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1424:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				portENABLE_INTERRUPTS();
1425:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				return errQUEUE_FULL;
1426:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1427:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1428:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1429:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portENABLE_INTERRUPTS();
1430:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1431:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portNOP();
1432:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1433:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portDISABLE_INTERRUPTS();
1434:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1435:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
1436:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1437:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* There is room in the queue, copy the data into the queue. */
1438:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
1439:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdPASS;
1440:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1441:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Were any co-routines waiting for data to become available? */
1442:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1443:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1444:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* In this instance the co-routine could be placed directly
1445:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				into the ready list as we are within a critical section.
1446:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				Instead the same pending ready list mechanism is used as if
1447:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				the event were caused from within an interrupt. */
1448:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1449:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1450:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					/* The co-routine waiting has a higher priority so record
1451:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					that a yield might be appropriate. */
1452:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					xReturn = errQUEUE_YIELD;
1453:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1454:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1455:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1456:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
1457:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1458:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = errQUEUE_FULL;
1459:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1460:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1461:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portENABLE_INTERRUPTS();
1462:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1463:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xReturn;
1464:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1465:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
1466:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1467:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1468:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configUSE_CO_ROUTINES == 1
1469:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueCRReceive( xQueueHandle pxQueue, void *pvBuffer, portTickType xTicksToWa
1470:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1471:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xReturn;
1472:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1473:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* If the queue is already empty we may have to block.  A critical section
1474:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	is required to prevent an interrupt adding something to the queue
1475:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	between the check to see if the queue is empty and blocking on the queue. */
1476:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portDISABLE_INTERRUPTS();
1477:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1478:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 )
1479:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1480:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* There are no messages in the queue, do we want to block or just
1481:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			leave with nothing? */
1482:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( xTicksToWait > ( portTickType ) 0 )
1483:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1484:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* As this is a co-routine we cannot block directly, but return
1485:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				indicating that we need to block. */
1486:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
1487:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				portENABLE_INTERRUPTS();
1488:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				return errQUEUE_BLOCKED;
1489:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1490:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			else
1491:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1492:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				portENABLE_INTERRUPTS();
1493:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				return errQUEUE_FULL;
1494:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1495:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1496:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1497:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portENABLE_INTERRUPTS();
1498:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1499:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portNOP();
1500:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1501:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portDISABLE_INTERRUPTS();
1502:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1503:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1504:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1505:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Data is available from the queue. */
1506:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxQueue->pcReadFrom += pxQueue->uxItemSize;
1507:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( pxQueue->pcReadFrom >= pxQueue->pcTail )
1508:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1509:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				pxQueue->pcReadFrom = pxQueue->pcHead;
1510:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1511:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
1512:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
1513:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1514:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdPASS;
1515:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1516:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* Were any co-routines waiting for space to become available? */
1517:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1518:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1519:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* In this instance the co-routine could be placed directly
1520:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				into the ready list as we are within a critical section.
1521:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				Instead the same pending ready list mechanism is used as if
1522:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				the event were caused from within an interrupt. */
1523:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1524:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1525:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					xReturn = errQUEUE_YIELD;
1526:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1527:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1528:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1529:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		else
1530:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1531:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			xReturn = pdFAIL;
1532:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1533:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1534:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	portENABLE_INTERRUPTS();
1535:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1536:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xReturn;
1537:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1538:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
1539:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1540:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1541:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1542:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1543:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configUSE_CO_ROUTINES == 1
1544:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueCRSendFromISR( xQueueHandle pxQueue, const void *pvItemToQueue, signed p
1545:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1546:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* Cannot block within an ISR so if there is no space on the queue then
1547:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	exit without doing anything. */
1548:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
1549:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1550:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
1551:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1552:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* We only want to wake one co-routine per ISR, so check that a
1553:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		co-routine has not already been woken. */
1554:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( xCoRoutinePreviouslyWoken == pdFALSE )
1555:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1556:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1557:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1558:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1559:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1560:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					return pdTRUE;
1561:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1562:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1563:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1564:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1565:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1566:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xCoRoutinePreviouslyWoken;
1567:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1568:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
1569:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1570:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1571:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configUSE_CO_ROUTINES == 1
1572:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xQueueCRReceiveFromISR( xQueueHandle pxQueue, void *pvBuffer, signed portBASE_
1573:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** {
1574:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** signed portBASE_TYPE xReturn;
1575:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1576:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	/* We cannot block from an ISR, so check there is data available. If
1577:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	not then just leave without doing anything. */
1578:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1579:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1580:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* Copy the data from the queue. */
1581:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
1582:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
1583:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1584:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			pxQueue->pcReadFrom = pxQueue->pcHead;
1585:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1586:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		--( pxQueue->uxMessagesWaiting );
1587:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
1588:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1589:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( ( *pxCoRoutineWoken ) == pdFALSE )
1590:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1591:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1592:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1593:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1594:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				{
1595:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 					*pxCoRoutineWoken = pdTRUE;
1596:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				}
1597:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1598:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1599:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1600:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		xReturn = pdPASS;
1601:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1602:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	else
1603:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1604:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		xReturn = pdFAIL;
1605:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1606:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1607:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	return xReturn;
1608:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** }
1609:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
1610:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1611:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1612:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configQUEUE_REGISTRY_SIZE > 0
1613:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1614:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
1615:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1616:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	unsigned portBASE_TYPE ux;
1617:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1618:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
1619:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		a free slot. */
1620:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZ
1621:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1622:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1623:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1624:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Store the information on this queue. */
1625:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1626:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
1627:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				break;
1628:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1629:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1630:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1631:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1632:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
1633:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1634:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1635:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configQUEUE_REGISTRY_SIZE > 0
1636:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1637:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	static void vQueueUnregisterQueue( xQueueHandle xQueue )
1638:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
1639:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	unsigned portBASE_TYPE ux;
1640:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1641:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
1642:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		registry. */
1643:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZ
1644:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1645:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
1646:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			{
1647:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
1648:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
1649:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 				break;
1650:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			}
1651:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1652:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1653:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
1654:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1655:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #endif
1656:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** /*-----------------------------------------------------------*/
1657:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1658:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** #if configUSE_TIMERS == 1
1659:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1660:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
1661:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	{
 1434              		.loc 1 1661 0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 0
 1437              		@ frame_needed = 0, uses_anonymous_args = 0
 1438              	.LVL202:
 1439 0548 38B5     		push	{r3, r4, r5, lr}
 1440              	.LCFI17:
 1441              		.cfi_def_cfa_offset 16
 1442              		.cfi_offset 3, -16
 1443              		.cfi_offset 4, -12
 1444              		.cfi_offset 5, -8
 1445              		.cfi_offset 14, -4
 1446              		.loc 1 1661 0
 1447 054a 0446     		mov	r4, r0
 1448 054c 0D46     		mov	r5, r1
1662:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* This function should not be called by application code hence the
1663:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1664:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
1665:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		It can result in vListInsert() being called on a list that can only
1666:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
1667:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
1668:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		section. */
1669:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 
1670:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
1671:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
1672:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
1673:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
1674:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
1675:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
1676:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		prvLockQueue( pxQueue );
 1449              		.loc 1 1676 0
 1450 054e FFF7FEFF 		bl	vPortEnterCritical
 1451              	.LVL203:
 1452 0552 636C     		ldr	r3, [r4, #68]
 1453 0554 0133     		adds	r3, r3, #1
 1454 0556 01D1     		bne	.L173
 1455              		.loc 1 1676 0 is_stmt 0 discriminator 1
 1456 0558 0023     		movs	r3, #0
 1457 055a 6364     		str	r3, [r4, #68]
 1458              	.L173:
 1459              		.loc 1 1676 0 discriminator 2
 1460 055c A36C     		ldr	r3, [r4, #72]
 1461 055e 0133     		adds	r3, r3, #1
 1462 0560 01D1     		bne	.L174
 1463              		.loc 1 1676 0 discriminator 3
 1464 0562 0023     		movs	r3, #0
 1465 0564 A364     		str	r3, [r4, #72]
 1466              	.L174:
 1467              		.loc 1 1676 0 discriminator 4
 1468 0566 FFF7FEFF 		bl	vPortExitCritical
 1469              	.LVL204:
1677:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 1470              		.loc 1 1677 0 is_stmt 1 discriminator 4
 1471 056a A36B     		ldr	r3, [r4, #56]
 1472 056c 23B9     		cbnz	r3, .L175
1678:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		{
1679:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
1680:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1473              		.loc 1 1680 0
 1474 056e 04F12400 		add	r0, r4, #36
 1475 0572 2946     		mov	r1, r5
 1476 0574 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 1477              	.LVL205:
 1478              	.L175:
1681:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		}
1682:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		prvUnlockQueue( pxQueue );
 1479              		.loc 1 1682 0
 1480 0578 2046     		mov	r0, r4
1683:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 	}
 1481              		.loc 1 1683 0
 1482 057a BDE83840 		pop	{r3, r4, r5, lr}
1682:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/queue.c **** 		prvUnlockQueue( pxQueue );
 1483              		.loc 1 1682 0
 1484 057e FFF73FBD 		b	prvUnlockQueue
 1485              	.LVL206:
 1486              		.cfi_endproc
 1487              	.LFE17:
 1489              	.Letext0:
 1490              		.file 2 "/home/franz/sat/bin/../lib/gcc/arm-none-eabi/4.7.2/include/stddef.h"
 1491              		.file 3 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/portable/p
 1492              		.file 4 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/include/li
 1493              		.file 5 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/include/ta
 1494              		.file 6 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/include/po
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
     /tmp/ccHYvmnG.s:20     .text:00000000 $t
     /tmp/ccHYvmnG.s:24     .text:00000000 prvUnlockQueue
     /tmp/ccHYvmnG.s:122    .text:00000068 prvCopyDataFromQueue
     /tmp/ccHYvmnG.s:175    .text:0000008e prvCopyDataToQueue
     /tmp/ccHYvmnG.s:272    .text:000000e6 xQueueGenericReset
     /tmp/ccHYvmnG.s:365    .text:0000014a xQueueGenericCreate
     /tmp/ccHYvmnG.s:439    .text:0000018a xQueueGenericSend
     /tmp/ccHYvmnG.s:653    .text:00000280 xQueueCreateMutex
     /tmp/ccHYvmnG.s:738    .text:000002d0 xQueueGenericSendFromISR
     /tmp/ccHYvmnG.s:858    .text:00000342 xQueueGenericReceive
     /tmp/ccHYvmnG.s:1116   .text:0000046a xQueueReceiveFromISR
     /tmp/ccHYvmnG.s:1236   .text:000004d8 uxQueueMessagesWaiting
     /tmp/ccHYvmnG.s:1278   .text:000004f2 uxQueueMessagesWaitingFromISR
     /tmp/ccHYvmnG.s:1312   .text:00000500 vQueueDelete
     /tmp/ccHYvmnG.s:1354   .text:0000051c xQueueIsQueueEmptyFromISR
     /tmp/ccHYvmnG.s:1392   .text:00000532 xQueueIsQueueFullFromISR
     /tmp/ccHYvmnG.s:1432   .text:00000548 vQueueWaitForMessageRestricted
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.4eaffbadb3a087d856021b8a18f9e221
                           .group:00000000 wm4.newlib.h.8.378a545e43bc5669590e42e276a93323
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.197.f6039468f1d0fc1b2f8d10d31d95d32a
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.187.4c942c37907201cd8bf2c1b2f296b4d5
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.50.e3cb12f9608797e0cfb3c9615a6071cb
                           .group:00000000 wm4.cdefs.h.45.6b392759c8a421d1199268021d4987e3
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.235.83e02bdbc4fc462f3998524016bbc512
                           .group:00000000 wm4.string.h.125.513d6ece205e52e1cd04235cb7b31cef
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.projdefs.h.70.dbccf9a6ca737be695addf5321434443
                           .group:00000000 wm4.FreeRTOSConfig.h.79.bfdec03d0f0e76f8a4cb6847c22dabd7
                           .group:00000000 wm4.portmacro.h.71.4b486245a22132630e6590c20a5362d9
                           .group:00000000 wm4.portable.h.326.d973d87d91a2870806201c5c4493d578
                           .group:00000000 wm4.mpu_wrappers.h.70.805d5308b530bfb35337fa0cda53b379
                           .group:00000000 wm4.FreeRTOS.h.153.2856cce34c845bc23d0e3eff29cca38b
                           .group:00000000 wm4.list.h.99.4794e53f44ef377a7e8b918fd5c142a2
                           .group:00000000 wm4.task.h.87.ccd4c448460750abd1f398251d355800

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vTaskMissedYield
vPortExitCritical
memcpy
vTaskPriorityDisinherit
ulPortSetInterruptMask
vPortYieldFromISR
vListInitialise
pvPortMalloc
vPortFree
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortClearInterruptMask
xTaskGetCurrentTaskHandle
vTaskPriorityInherit
vTaskPlaceOnEventListRestricted
