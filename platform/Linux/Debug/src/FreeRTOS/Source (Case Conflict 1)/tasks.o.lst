   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	prvAddCurrentTaskToDelayedList:
  25              	.LFB29:
  26              		.file 1 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tas
   1:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
   2:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     FreeRTOS V7.3.0 - Copyright (C) 2012 Real Time Engineers Ltd.
   3:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
   4:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
   5:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
   7:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     ***************************************************************************
   8:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *                                                                       *
   9:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
  10:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
  11:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    available.                                                         *
  12:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *                                                                       *
  13:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  14:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    ensuring you get running as quickly as possible and with an        *
  15:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  16:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  17:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    professional grade, cross platform, de facto standard solutions    *
  18:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    for microcontrollers - completely free of charge!                  *
  19:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *                                                                       *
  20:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  21:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *                                                                       *
  22:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  23:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *                                                                       *
  24:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     ***************************************************************************
  25:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  26:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  27:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     This file is part of the FreeRTOS distribution.
  28:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  29:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  30:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  31:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  32:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  33:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  34:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     provide the source code for proprietary components outside of the FreeRTOS
  35:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  36:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  37:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  38:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     more details. You should have received a copy of the GNU General Public
  39:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  40:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  41:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     by writing to Richard Barry, contact details for whom are available on the
  42:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     FreeRTOS WEB site.
  43:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  44:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     1 tab == 4 spaces!
  45:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  46:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     ***************************************************************************
  47:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *                                                                       *
  48:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  49:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    not run, what could be wrong?"                                     *
  50:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *                                                                       *
  51:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  52:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****      *                                                                       *
  53:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     ***************************************************************************
  54:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  55:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  56:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     http://www.FreeRTOS.org - Documentation, training, latest versions, license
  57:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     and contact details.
  58:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  59:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  60:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool.
  61:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  62:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     Real Time Engineers ltd license FreeRTOS to High Integrity Systems, who sell
  63:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     the code with commercial support, indemnification, and middleware, under
  64:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     the OpenRTOS brand: http://www.OpenRTOS.com.  High Integrity Systems also
  65:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     provide a safety engineered and independently SIL3 certified version under
  66:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****     the SafeRTOS brand: http://www.SafeRTOS.com.
  67:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** */
  68:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  69:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /* Standard includes. */
  70:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #include <stdio.h>
  71:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #include <stdlib.h>
  72:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #include <string.h>
  73:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  74:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** task.h is included from an application file. */
  77:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  79:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /* FreeRTOS includes. */
  80:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #include "FreeRTOS.h"
  81:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #include "task.h"
  82:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #include "timers.h"
  83:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #include "StackMacros.h"
  84:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  85:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  86:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  87:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
  88:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
  89:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
  90:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
  91:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
  92:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
  93:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
  94:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * and stores task state information, including a pointer to the task's context
  95:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * (the task's run time environment, including register values)
  96:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
  97:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** typedef struct tskTaskControlBlock
  98:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
  99:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
 100:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 101:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 102:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
 103:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
 104:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 105:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xListItem				xGenericListItem;		/*< The list that the state list item of a task is reference from 
 106:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xListItem				xEventListItem;		/*< Used to reference a task from an event list. */
 107:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 108:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
 109:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
 110:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 111:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 112:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Points to the end of the stack on architectures where the sta
 113:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
 114:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 115:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 116:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting; /*< Holds the critical section nesting depth for ports 
 117:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
 118:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 119:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 120:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< Stores a number that increments each time a TCB is create
 121:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		unsigned portBASE_TYPE  uxTaskNumber;	/*< Stores a number specifically for use by third party tra
 122:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
 123:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 124:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 125:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 126:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
 127:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 128:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 129:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 130:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
 131:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 132:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 133:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		unsigned long ulRunTimeCounter;			/*< Stores the amount of time the task has spent in the Running
 134:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
 135:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 136:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** } tskTCB;
 137:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 138:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 139:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 140:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 141:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * be global, rather than file scope.
 142:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 143:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 144:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#define static
 145:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 146:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 147:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*lint -e956 */
 148:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 149:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 150:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 151:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 152:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 153:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 154:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list 
 155:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 156:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 157:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 158:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 159:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 160:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but t
 161:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 162:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 163:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 164:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 165:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 166:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 167:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 168:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 169:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 170:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 171:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 172:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 173:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;			/*< Holds the handle of the idle task
 174:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 175:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 176:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 177:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /* File private variables. --------------------------------*/
 178:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 179:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
 180:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
 181:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 182:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 183:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 184:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE 
 185:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
 186:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 187:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
 188:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xNextTaskUnblockTime				= ( portTickType ) portMAX_DEL
 189:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 190:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 191:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 192:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
 193:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 194:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
 195:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 196:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 197:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 198:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 199:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 200:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 201:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 202:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 203:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 204:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 205:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 206:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 207:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 208:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 209:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 210:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 211:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 212:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 213:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 214:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
 215:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 216:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 0
 217:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 218:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 219:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 220:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	microcontroller architecture. */
 221:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 222:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 223:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	state task. */
 224:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )																		\
 225:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{																													\
 226:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )																		\
 227:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{																												\
 228:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );																		\
 229:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}																												\
 230:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 231:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 232:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/*-----------------------------------------------------------*/
 233:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 234:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()																			\
 235:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{																													\
 236:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */												\
 237:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )										\
 238:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{																												\
 239:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			configASSERT( uxTopReadyPriority );																			\
 240:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			--uxTopReadyPriority;																						\
 241:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}																												\
 242:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 																														\
 243:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of										\
 244:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		the	same priority get an equal share of the processor time. */													\
 245:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );						\
 246:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 247:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 248:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/*-----------------------------------------------------------*/
 249:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 250:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 251:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	they are only required when a port optimised method of task selection is
 252:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	being used. */
 253:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 254:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 255:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 256:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 257:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 258:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 259:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 260:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	architecture being used. */
 261:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 262:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 263:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 264:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 265:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/*-----------------------------------------------------------*/
 266:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 267:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 268:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{																								\
 269:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxTopPriority;															\
 270:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 																									\
 271:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 272:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 273:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 274:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 275:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 276:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 277:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/*-----------------------------------------------------------*/
 278:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 279:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 280:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 281:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 282:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )													\
 283:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{																								\
 284:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == 0 )				\
 285:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{																							\
 286:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );						\
 287:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}																							\
 288:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 289:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 290:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 291:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 292:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 293:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 294:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 295:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 296:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * executing task, then it will only be rescheduled after the currently
 297:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * executing task has been rescheduled.
 298:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 299:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																				\
 300:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB )																			\
 301:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );																\
 302:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGeneri
 303:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
 304:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 305:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 306:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 307:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * any require waking.
 308:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *
 309:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 310:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 311:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * any further down the list.
 312:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 313:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #define prvCheckDelayedTasks()															\
 314:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {																						\
 315:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** portTickType xItemValue;																\
 316:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 																						\
 317:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Is the tick count greater than or equal to the wake time of the first			\
 318:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	task referenced from the delayed tasks list? */										\
 319:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( xTickCount >= xNextTaskUnblockTime )											\
 320:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{																					\
 321:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		for( ;; )																		\
 322:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{																				\
 323:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )						\
 324:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{																			\
 325:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* The delayed list is empty.  Set xNextTaskUnblockTime to the			\
 326:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				maximum possible value so it is extremely unlikely that the				\
 327:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass next			\
 328:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				time through. */														\
 329:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;									\
 330:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				break;																	\
 331:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}																			\
 332:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			else																		\
 333:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{																			\
 334:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* The delayed list is not empty, get the value of the item at			\
 335:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				the head of the delayed list.  This is the time at which the			\
 336:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				task at the head of the delayed list should be removed from				\
 337:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				the Blocked state. */													\
 338:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );	\
 339:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );	\
 340:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 																						\
 341:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( xTickCount < xItemValue )											\
 342:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{																		\
 343:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* It is not time to unblock this item yet, but the item			\
 344:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					value is the time at which the task at the head of the				\
 345:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					blocked list should be removed from the Blocked state -				\
 346:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					so record the item value in xNextTaskUnblockTime. */				\
 347:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xNextTaskUnblockTime = xItemValue;									\
 348:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					break;																\
 349:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}																		\
 350:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 																						\
 351:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* It is time to remove the item from the Blocked state. */				\
 352:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxListRemove( &( pxTCB->xGenericListItem ) );							\
 353:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 																						\
 354:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* Is the task waiting on an event also? */								\
 355:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( pxTCB->xEventListItem.pvContainer != NULL )							\
 356:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{																		\
 357:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove( &( pxTCB->xEventListItem ) );							\
 358:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}																		\
 359:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );										\
 360:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}																			\
 361:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}																				\
 362:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}																					\
 363:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 364:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
 365:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 366:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 367:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 368:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 369:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 370:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 371:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 372:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( 
 373:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 374:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /* Callback function prototypes. --------------------------*/
 375:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** extern void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName );
 376:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** extern void vApplicationTickHook( void );
 377:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 378:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /* File private functions. --------------------------------*/
 379:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 380:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 381:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 382:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * into the TCB structure.
 383:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 384:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 385:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 386:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 387:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 388:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * automatically upon the creation of the first task.
 389:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 390:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 391:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 392:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 393:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 394:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 395:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * creation of the first user task.
 396:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *
 397:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 398:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 399:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *
 400:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 401:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *
 402:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 403:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 404:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 405:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 406:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 407:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * including the stack pointed to by the TCB.
 408:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *
 409:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 410:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 411:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 412:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 413:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 414:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 415:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 416:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 417:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 418:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 419:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 420:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 421:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * and its TCB deleted.
 422:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 423:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 424:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 425:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 426:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 427:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * either the current or the overflow delayed task list.
 428:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 429:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
 430:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 431:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 432:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 433:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * allocation was successful.
 434:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 435:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 436:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 437:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 438:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 439:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 440:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 441:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * within just that list.
 442:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *
 443:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 444:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * NORMAL APPLICATION CODE.
 445:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 446:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 447:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 448:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
 449:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 450:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 451:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 452:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 453:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 454:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 455:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 456:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 457:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 458:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 459:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_F
 460:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 461:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 462:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 463:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
 464:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 465:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 466:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *
 467:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 468:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 469:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 470:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * set to a value other than 1.
 471:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
 472:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 473:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 474:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 475:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 476:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 477:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 478:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*lint +e956 */
 479:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 480:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 481:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 482:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------
 483:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * TASK CREATION API documented in task.h
 484:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *----------------------------------------------------------*/
 485:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 486:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 487:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 488:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** signed portBASE_TYPE xReturn;
 489:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** tskTCB * pxNewTCB;
 490:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 491:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTaskCode );
 492:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 493:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 494:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 495:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	checking that the allocation was successful. */
 496:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 497:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 498:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( pxNewTCB != NULL )
 499:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 500:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 501:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 502:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 503:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Should the task be created in privileged mode? */
 504:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 505:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 506:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 507:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xRunPrivileged = pdTRUE;
 508:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 509:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			else
 510:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 511:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xRunPrivileged = pdFALSE;
 512:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 513:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 514:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 515:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 516:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 517:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 518:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 519:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		required by the port. */
 520:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 521:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 522:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 523:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 524:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 525:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 526:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) =
 527:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 528:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#else
 529:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 530:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 531:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 532:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 533:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MAS
 534:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 535:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 536:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			a positive stack growth direction then we also need to store the
 537:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			other extreme of the stack space. */
 538:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 539:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 540:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif
 541:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 542:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 543:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 544:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 545:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 546:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 547:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 548:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		the	top of stack variable is updated. */
 549:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 550:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 551:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 552:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 553:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#else
 554:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 555:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 556:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 557:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif
 558:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 559:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Check the alignment of the initialised stack. */
 560:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long
 561:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 562:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 563:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 564:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 565:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			task can use this as a handle to delete the task later if
 566:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			required.*/
 567:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 568:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 569:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 570:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 571:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		ready list, so must make sure no interrupts occur. */
 572:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
 573:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 574:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxCurrentNumberOfTasks++;
 575:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxCurrentTCB == NULL )
 576:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 577:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 578:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				the suspended state - make this the current task. */
 579:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 580:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 581:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 582:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 583:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 584:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					initialisation required.  We will not recover if this call
 585:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					fails, but we will report the failure. */
 586:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvInitialiseTaskLists();
 587:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
 588:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 589:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			else
 590:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 591:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 592:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				current task if it is the highest priority task to be created
 593:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				so far. */
 594:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 595:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 596:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 597:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
 598:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 599:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
 600:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
 601:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 602:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 603:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 604:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 605:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 606:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 607:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 608:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 609:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 610:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 611:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 612:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 613:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 614:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 615:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#endif
 616:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxTaskNumber++;
 617:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 618:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 619:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 620:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = pdPASS;
 621:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 622:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 623:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 624:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
 625:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 626:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	else
 627:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 628:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 629:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		traceTASK_CREATE_FAILED();
 630:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 631:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 632:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( xReturn == pdPASS )
 633:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 634:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 635:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 636:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 637:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			then it should run now. */
 638:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 639:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 640:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				portYIELD_WITHIN_API();
 641:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 642:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 643:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 644:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 645:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	return xReturn;
 646:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 647:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
 648:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 649:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 650:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 651:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskDelete( xTaskHandle pxTaskToDelete )
 652:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 653:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
 654:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 655:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
 656:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 657:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 658:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			deleted. */
 659:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 660:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 661:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxTaskToDelete = NULL;
 662:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 663:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 664:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 665:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 666:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 667:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 668:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 669:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			the termination list and free up any memory allocated by the
 670:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			scheduler for the TCB and stack. */
 671:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 672:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 673:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 674:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 675:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 676:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Is the task waiting on an event also? */
 677:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 678:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 679:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxListRemove( &( pxTCB->xEventListItem ) );
 680:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 681:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 682:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 683:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 684:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 685:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 686:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			check the xTasksWaitingTermination list. */
 687:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			++uxTasksDeleted;
 688:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 689:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 690:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			can detect that the task lists need re-generating. */
 691:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxTaskNumber++;
 692:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 693:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 694:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 695:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
 696:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 697:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 698:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 699:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 700:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 701:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 702:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				portYIELD_WITHIN_API();
 703:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 705:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 706:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 707:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 708:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 709:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 710:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 711:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 712:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 713:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 714:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------
 715:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * TASK CONTROL API documented in task.h
 716:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *----------------------------------------------------------*/
 717:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 718:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 719:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 720:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 721:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 722:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portTickType xTimeToWake;
 723:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 724:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 725:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 726:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 727:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 728:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vTaskSuspendAll();
 729:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 730:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 731:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 732:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 733:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 734:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 735:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* The tick count has overflowed since this function was
 736:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				lasted called.  In this case the only time we should ever
 737:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 738:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 739:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 740:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 741:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 742:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xShouldDelay = pdTRUE;
 743:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
 744:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 745:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			else
 746:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 747:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 748:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 749:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				tick time is less than the wake time. */
 750:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 751:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 752:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xShouldDelay = pdTRUE;
 753:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
 754:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 755:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 756:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Update the wake time ready for the next call. */
 757:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 758:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 759:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 760:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 761:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 762:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 763:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 764:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 765:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				both lists. */
 766:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 767:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 768:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* The current task must be in a ready list, so there is
 769:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					no need to check, and the port reset macro can be called
 770:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					directly. */
 771:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 772:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
 773:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 774:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 775:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 776:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 777:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 778:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 779:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 780:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		have put ourselves to sleep. */
 781:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 782:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 783:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			portYIELD_WITHIN_API();
 784:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 785:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 786:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 787:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 788:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
 789:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 790:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 791:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 792:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 793:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 794:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portTickType xTimeToWake;
 795:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 796:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 797:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 798:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 799:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 800:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vTaskSuspendAll();
 801:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 802:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				traceTASK_DELAY();
 803:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 804:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* A task that is removed from the event list while the
 805:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 806:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				list or removed from the blocked list until the scheduler
 807:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				is resumed.
 808:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 809:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				This task cannot be in an event list as it is the currently
 810:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				executing task. */
 811:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 812:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 813:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				not a problem. */
 814:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 815:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 816:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 817:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 818:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				both lists. */
 819:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 820:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 821:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* The current task must be in a ready list, so there is
 822:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					no need to check, and the port reset macro can be called
 823:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					directly. */
 824:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 825:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
 826:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 827:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 828:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 829:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 830:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 831:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 832:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		have put ourselves to sleep. */
 833:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 834:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 835:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			portYIELD_WITHIN_API();
 836:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 837:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 838:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 839:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 840:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
 841:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 842:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_eTaskStateGet == 1 )
 843:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 844:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	eTaskState eTaskStateGet( xTaskHandle pxTask )
 845:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 846:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	eTaskState eReturn;
 847:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xList *pxStateList;
 848:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
 849:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 850:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTask;
 851:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 852:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 853:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 854:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* The task calling this function is querying its own state. */
 855:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			eReturn = eRunning;
 856:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 857:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
 858:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 859:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			taskENTER_CRITICAL();
 860:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 861:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxStateList = ( xList * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
 862:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 863:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			taskEXIT_CRITICAL();
 864:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 865:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 866:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 867:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
 868:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				lists. */
 869:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				eReturn = eBlocked;
 870:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 871:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 872:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
 873:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 874:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 875:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* The task being queried is referenced from the suspended
 876:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					list. */
 877:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					eReturn = eSuspended;
 878:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
 879:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#endif
 880:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 881:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
 882:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 883:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 884:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* The task being queried is referenced from the deleted
 885:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					tasks list. */
 886:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					eReturn = eDeleted;
 887:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
 888:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#endif
 889:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 890:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			else
 891:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 892:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* If the task is not in any other state, it must be in the
 893:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				Ready (including pending ready) state. */
 894:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				eReturn = eReady;
 895:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 896:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 897:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 898:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return eReturn;
 899:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 900:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 901:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 902:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
 903:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 904:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 905:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 906:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
 907:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 908:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
 909:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 910:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 911:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
 912:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 913:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* If null is passed in here then we are changing the
 914:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			priority of the calling function. */
 915:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 916:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 917:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 918:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
 919:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 920:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return uxReturn;
 921:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 922:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 923:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
 924:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
 925:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 926:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 927:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 928:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
 929:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 930:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
 931:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority, uxPriorityUsedOnEntry;
 932:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 933:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 934:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 935:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 936:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Ensure the new priority is valid. */
 937:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 938:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 939:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 940:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
 941:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 942:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
 943:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
 944:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTask == pxCurrentTCB )
 945:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 946:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxTask = NULL;
 947:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 948:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 949:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* If null is passed in here then we are changing the
 950:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			priority of the calling function. */
 951:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 952:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 953:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 954:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 955:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 956:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 957:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 958:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 959:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#else
 960:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 961:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 962:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
 963:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#endif
 964:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 965:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 966:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
 967:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* The priority change may have readied a task of higher
 968:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				priority than the calling task. */
 969:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 970:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 971:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxTask != NULL )
 972:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
 973:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						/* The priority of another task is being raised.  If we
 974:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						were raising the priority of the currently running task
 975:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						there would be no need to switch as it must have already
 976:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						been the highest priority task. */
 977:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						xYieldRequired = pdTRUE;
 978:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
 979:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
 980:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				else if( pxTask == NULL )
 981:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 982:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* Setting our own priority down means there may now be another
 983:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					task of higher priority that is ready to execute. */
 984:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xYieldRequired = pdTRUE;
 985:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
 986:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 987:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* Remember the ready list the task might be referenced from
 988:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				before its uxPriority member is changed so the
 989:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
 990:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 991:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
 992:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 993:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
 994:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* Only change the priority being used if the task is not
 995:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					currently using an inherited priority. */
 996:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 997:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
 998:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 999:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
1000:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1001:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* The base priority gets set whatever. */
1002:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1003:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1004:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				#else
1005:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1006:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1007:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1008:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				#endif
1009:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1010:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
1011:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1012:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1013:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				nothing more than change it's priority variable. However, if
1014:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1015:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				in the queue appropriate to its new priority. */
1016:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
1017:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1018:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1019:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1020:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					can do this even if the scheduler is suspended. */
1021:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
1022:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
1023:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						taskRESET_READY_PRIORITY( uxPriorityUsedOnEntry );
1024:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
1025:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
1026:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1027:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1028:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( xYieldRequired == pdTRUE )
1029:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1030:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					portYIELD_WITHIN_API();
1031:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1032:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1033:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1034:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
1035:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1036:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Remove compiler warning about unused parameter when the port
1037:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		optimised task selection is not being used. */
1038:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		( void ) uxPriorityUsedOnEntry;
1039:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1040:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1041:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1042:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1043:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1044:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1045:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1046:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
1047:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1048:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
1049:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1050:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
1051:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1052:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
1053:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			suspended. */
1054:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
1055:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1056:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxTaskToSuspend = NULL;
1057:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1058:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1059:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
1060:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
1061:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1062:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1063:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1064:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
1065:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
1066:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1067:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1068:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1069:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1070:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Is the task waiting on an event also? */
1071:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
1072:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1073:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxListRemove( &( pxTCB->xEventListItem ) );
1074:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1075:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1076:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
1077:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1078:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
1079:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1080:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
1081:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1082:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1083:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1084:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* We have just suspended the current task. */
1085:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				portYIELD_WITHIN_API();
1086:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1087:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			else
1088:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1089:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1090:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1091:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				must be adjusted to point to a different task. */
1092:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1093:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1094:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1095:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1096:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					be set to point to it no matter what its relative priority
1097:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					is. */
1098:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxCurrentTCB = NULL;
1099:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1100:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				else
1101:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1102:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					vTaskSwitchContext();
1103:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1104:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1105:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1106:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1107:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1108:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1109:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1110:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1111:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1112:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1113:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
1114:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1115:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
1116:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
1117:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1118:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1119:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( xTask );
1120:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1121:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Is the task we are attempting to resume actually in the
1122:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		suspended list? */
1123:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
1124:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1125:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1126:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
1127:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1128:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* Is it in the suspended list because it is in the
1129:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				Suspended state?  It is possible to be in the suspended
1130:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				list because it is blocked on a task with no timeout
1131:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				specified. */
1132:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
1133:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1134:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xReturn = pdTRUE;
1135:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1136:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1137:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1138:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1139:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return xReturn;
1140:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1141:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1142:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1143:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1144:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1145:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1146:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1147:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskResume( xTaskHandle pxTaskToResume )
1148:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1149:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
1150:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1151:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1152:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxTaskToResume );
1153:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1154:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
1155:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		it in the ready list. */
1156:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
1157:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1158:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1159:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		currently executing task. */
1160:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1161:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1162:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			taskENTER_CRITICAL();
1163:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1164:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1165:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1166:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1167:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1168:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* As we are in a critical section we can access the ready
1169:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					lists even if the scheduler is suspended. */
1170:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove(  &( pxTCB->xGenericListItem ) );
1171:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
1172:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1173:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1174:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1175:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
1176:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
1177:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						will leave the lists in the correct state for the next yield. */
1178:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						portYIELD_WITHIN_API();
1179:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
1180:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1181:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1182:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			taskEXIT_CRITICAL();
1183:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1184:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1185:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1186:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1187:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1188:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1189:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1190:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1191:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1192:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
1193:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1194:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
1195:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
1196:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxSavedInterruptStatus;
1197:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1198:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxTaskToResume );
1199:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1200:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
1201:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1202:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1203:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1204:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1205:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1206:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1207:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1208:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1209:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1210:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
1211:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove(  &( pxTCB->xGenericListItem ) );
1212:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
1213:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1214:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				else
1215:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1216:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* We cannot access the delayed or ready lists, so will hold this
1217:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					task pending until the scheduler is resumed, at which point a
1218:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					yield will be performed if necessary. */
1219:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1220:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1221:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1222:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1223:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1224:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1225:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return xYieldRequired;
1226:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1227:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1228:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1229:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1230:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1231:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1232:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1233:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------
1234:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * PUBLIC SCHEDULER CONTROL documented in task.h
1235:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *----------------------------------------------------------*/
1236:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1237:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1238:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** void vTaskStartScheduler( void )
1239:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1240:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** portBASE_TYPE xReturn;
1241:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1242:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1243:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1244:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1245:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1246:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1247:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1248:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1249:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#else
1250:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1251:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Create the idle task without storing its handle. */
1252:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1253:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1254:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
1255:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1256:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1257:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1258:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xReturn == pdPASS )
1259:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1260:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1261:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1262:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1263:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
1264:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1265:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( xReturn == pdPASS )
1266:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1267:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1268:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1269:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1270:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1271:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		starts to run.
1272:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1273:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
1274:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
1275:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portDISABLE_INTERRUPTS();
1276:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1277:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1278:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
1279:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1280:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1281:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1282:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		the run time counter time base. */
1283:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1284:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1285:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1286:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portable interface. */
1287:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1288:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1289:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1290:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			function will not return. */
1291:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1292:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
1293:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1294:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1295:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1296:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1297:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1298:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* This line will only be reached if the kernel could not be started. */
1299:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( xReturn );
1300:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
1301:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1302:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1303:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** void vTaskEndScheduler( void )
1304:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1305:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1306:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1307:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1308:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portDISABLE_INTERRUPTS();
1309:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1310:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vPortEndScheduler();
1311:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
1312:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*----------------------------------------------------------*/
1313:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1314:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** void vTaskSuspendAll( void )
1315:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1316:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* A critical section is not required as the variable is of type
1317:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE. */
1318:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	++uxSchedulerSuspended;
1319:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
1320:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*----------------------------------------------------------*/
1321:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1322:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1323:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1324:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portTickType prvGetExpectedIdleTime( void )
1325:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1326:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portTickType xReturn;
1327:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	
1328:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1329:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1330:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = 0;
1331:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1332:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1333:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1334:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1335:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1336:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			processed. */
1337:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = 0;
1338:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1339:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
1340:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1341:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1342:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1343:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	
1344:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return xReturn;
1345:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1346:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1347:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE != 0  */
1348:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*----------------------------------------------------------*/
1349:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1350:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1351:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1352:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** register tskTCB *pxTCB;
1353:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
1354:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1355:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1356:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1357:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1358:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1359:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1360:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1361:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1362:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1363:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1364:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskENTER_CRITICAL();
1365:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1366:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		--uxSchedulerSuspended;
1367:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1368:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1369:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1370:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
1371:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1372:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
1373:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1374:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1375:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				appropriate ready list. */
1376:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
1377:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1378:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
1379:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove( &( pxTCB->xEventListItem ) );
1380:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
1381:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
1382:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1383:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* If we have moved a task that has a priority higher than
1384:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					the current task then we should yield. */
1385:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1386:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
1387:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						xYieldRequired = pdTRUE;
1388:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
1389:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1390:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1391:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1392:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1393:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1394:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
1395:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1396:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
1397:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
1398:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						vTaskIncrementTick();
1399:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						--uxMissedTicks;
1400:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
1401:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1402:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1403:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					to ensure the highest priority task that is ready to run is
1404:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					the task actually running. */
1405:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					#if configUSE_PREEMPTION == 1
1406:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
1407:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						xYieldRequired = pdTRUE;
1408:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
1409:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					#endif
1410:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1411:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1412:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
1413:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1414:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xAlreadyYielded = pdTRUE;
1415:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xMissedYield = pdFALSE;
1416:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					portYIELD_WITHIN_API();
1417:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1418:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1419:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1420:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1421:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskEXIT_CRITICAL();
1422:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1423:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	return xAlreadyYielded;
1424:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
1425:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1426:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1427:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1428:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1429:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1430:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1431:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------
1432:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * PUBLIC TASK UTILITIES documented in task.h
1433:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *----------------------------------------------------------*/
1434:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1435:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1436:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1437:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** portTickType xTaskGetTickCount( void )
1438:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1439:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** portTickType xTicks;
1440:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1441:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1442:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskENTER_CRITICAL();
1443:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1444:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xTicks = xTickCount;
1445:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1446:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskEXIT_CRITICAL();
1447:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1448:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	return xTicks;
1449:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
1450:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1451:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1452:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** portTickType xTaskGetTickCountFromISR( void )
1453:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1454:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** portTickType xReturn;
1455:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1456:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1457:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1458:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xReturn = xTickCount;
1459:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1460:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1461:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	return xReturn;
1462:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
1463:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1464:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1465:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1466:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1467:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* A critical section is not required because the variables are of type
1468:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE. */
1469:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	return uxCurrentNumberOfTasks;
1470:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
1471:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1472:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1473:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1474:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1475:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
1476:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1477:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
1478:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1479:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1480:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1481:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxTCB );
1482:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1483:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1484:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1485:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1486:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1487:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1488:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1489:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1490:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskList( signed char *pcWriteBuffer )
1491:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1492:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1493:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1494:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1495:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1496:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1497:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vTaskSuspendAll();
1498:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1499:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1500:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			report the task name, state and stack high water mark. */
1501:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1502:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1503:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1504:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1505:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1506:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1507:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			do
1508:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1509:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxQueue--;
1510:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1511:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
1512:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1513:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
1514:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1515:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1516:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1517:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1518:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1519:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
1520:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1521:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1522:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1523:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1524:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
1525:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1526:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1527:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1528:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1529:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
1530:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1531:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
1532:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1533:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1534:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#endif
1535:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1536:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1537:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1538:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1539:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1540:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
1541:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1542:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1543:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#endif
1544:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1545:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xTaskResumeAll();
1546:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1547:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1548:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1549:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*----------------------------------------------------------*/
1550:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1551:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1552:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1553:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
1554:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1555:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1556:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned long ulTotalRunTime;
1557:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1558:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1559:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1560:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1561:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vTaskSuspendAll();
1562:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1563:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1564:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1565:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#else
1566:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1567:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#endif
1568:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1569:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
1570:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
1571:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			ulTotalRunTime /= 100UL;
1572:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1573:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1574:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			generating a table of run timer percentages in the provided
1575:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			buffer. */
1576:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1577:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1578:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1579:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1580:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1581:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1582:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			do
1583:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1584:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxQueue--;
1585:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1586:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
1587:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1588:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
1589:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1590:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1591:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1592:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1593:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1594:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
1595:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1596:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1597:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1598:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1599:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
1600:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1601:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1602:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1603:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1604:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
1605:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1606:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTim
1607:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1608:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1609:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#endif
1610:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1611:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1612:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1613:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1614:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
1615:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime );
1616:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
1617:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1618:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#endif
1619:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1620:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xTaskResumeAll();
1621:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1622:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1623:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1624:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*----------------------------------------------------------*/
1625:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1626:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1627:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1628:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xTaskHandle xTaskGetIdleTaskHandle( void )
1629:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1630:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1631:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1632:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1633:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return xIdleTaskHandle;
1634:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1635:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1636:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1637:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*----------------------------------------------------------*/
1638:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1639:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1640:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode	
1641:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1642:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 1. */
1643:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1644:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1645:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskStepTick( portTickType xTicksToJump )
1646:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1647:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( xTicksToJump <= xNextTaskUnblockTime );
1648:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xTickCount += xTicksToJump;
1649:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1650:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1651:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1652:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1653:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------
1654:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
1655:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * documented in task.h
1656:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *----------------------------------------------------------*/
1657:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1658:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** void vTaskIncrementTick( void )
1659:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1660:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** tskTCB * pxTCB;
1661:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1662:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1663:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1664:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tasks to be unblocked. */
1665:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1666:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1667:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1668:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		++xTickCount;
1669:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTickCount == ( portTickType ) 0U )
1670:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1671:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xList *pxTemp;
1672:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1673:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1674:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1675:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			an error! */
1676:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
1677:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1678:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTemp = pxDelayedTaskList;
1679:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
1680:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
1681:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xNumOfOverflows++;
1682:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1683:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1684:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1685:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* The new current delayed list is empty.  Set
1686:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xNextTaskUnblockTime to the maximum possible value so it is
1687:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				extremely unlikely that the
1688:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
1689:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				there is an item in the delayed list. */
1690:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;
1691:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1692:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			else
1693:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
1694:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* The new current delayed list is not empty, get the value of
1695:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				the item at the head of the delayed list.  This is the time at
1696:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				which the task at the head of the delayed list should be removed
1697:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				from the Blocked state. */
1698:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1699:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
1700:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
1701:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1702:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1703:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* See if this tick has made a timeout expire. */
1704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvCheckDelayedTasks();
1705:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1706:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	else
1707:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1708:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		++uxMissedTicks;
1709:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1710:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1711:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		scheduler is locked. */
1712:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1713:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1714:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vApplicationTickHook();
1715:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1716:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif
1717:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1718:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1719:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1720:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1721:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1722:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1723:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
1724:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1725:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vApplicationTickHook();
1726:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1727:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1728:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
1729:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
1730:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1731:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1732:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1733:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1734:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
1735:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1736:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *xTCB;
1737:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1738:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1739:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTask == NULL )
1740:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1741:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1742:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1743:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
1744:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1745:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1746:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1747:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1748:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1749:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		the value can be accessed from an interrupt. */
1750:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
1751:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
1752:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
1753:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1754:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1755:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1756:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1757:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1758:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1759:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1760:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1761:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1762:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *xTCB;
1763:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1764:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1765:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1766:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTask == NULL )
1767:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1768:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1769:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1770:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
1771:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1772:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1773:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1774:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1775:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1776:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		the value can be accessed from an interrupt. */
1777:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
1778:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
1779:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
1780:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1781:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return xReturn;
1782:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1783:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1784:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1785:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1786:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1787:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1788:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1789:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1790:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1791:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *xTCB;
1792:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xReturn;
1793:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1794:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1795:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTask == NULL )
1796:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1797:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1798:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1799:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
1800:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1801:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1802:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1803:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1804:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
1805:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1806:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
1807:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1808:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
1809:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1810:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = pdFAIL;
1811:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1812:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1813:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return xReturn;
1814:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1815:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1816:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
1817:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1818:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1819:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** void vTaskSwitchContext( void )
1820:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1821:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
1822:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1823:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1824:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		switch. */
1825:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xMissedYield = pdTRUE;
1826:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1827:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	else
1828:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1829:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		traceTASK_SWITCHED_OUT();
1830:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1831:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
1832:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1833:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			unsigned long ulTempCounter;
1834:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1835:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1836:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
1837:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				#else
1838:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
1839:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				#endif
1840:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1841:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* Add the amount of time the task has been running to the accumulated
1842:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				time so far.  The time the task started running was stored in
1843:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				ulTaskSwitchedInTime.  Note that there is no overflow protection here
1844:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				so count values are only valid until the timer overflows.  Generally
1845:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				this will be about 1 hour assuming a 1uS timer increment. */
1846:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
1847:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				ulTaskSwitchedInTime = ulTempCounter;
1848:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1849:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif
1850:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1851:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
1852:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1853:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1854:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
1855:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1856:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		traceTASK_SWITCHED_IN();
1857:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1858:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
1859:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1860:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1861:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1862:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1863:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** portTickType xTimeToWake;
1864:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1865:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxEventList );
1866:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1867:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1868:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	SCHEDULER SUSPENDED. */
1869:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1870:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1871:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1872:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	is the first to be woken by the event. */
1873:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
1874:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1875:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1876:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1877:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1878:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
1879:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1880:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
1881:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		check, and the port reset macro can be called directly. */
1882:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1883:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1884:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1885:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1886:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1887:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
1888:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1889:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1890:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1891:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			indefinitely. */
1892:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
1893:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1894:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
1895:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1896:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1897:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1898:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1899:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1900:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1901:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1902:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#else
1903:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1904:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1905:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1906:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1907:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1908:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1909:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
1910:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
1911:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1912:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1913:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if configUSE_TIMERS == 1
1914:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1915:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
1916:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1917:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portTickType xTimeToWake;
1918:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1919:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxEventList );
1920:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1921:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* This function should not be called by application code hence the
1922:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1923:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
1924:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		it should be called from a critical section. */
1925:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1926:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1927:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
1928:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		In this case it is assume that this is the only task that is going to
1929:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
1930:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		can be used in place of vListInsert. */
1931:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
1932:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1933:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
1934:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
1935:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		function is called form a critical section. */
1936:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
1937:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
1938:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
1939:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			check, and the port reset macro can be called directly. */
1940:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1941:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
1942:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1943:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
1944:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
1945:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
1946:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		
1947:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		traceTASK_DELAY_UNTIL();
1948:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
1949:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1950:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1951:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif /* configUSE_TIMERS */
1952:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
1953:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1954:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1955:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
1956:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** tskTCB *pxUnblockedTCB;
1957:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** portBASE_TYPE xReturn;
1958:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1959:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1960:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1961:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1962:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1963:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1964:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	it to the ready list.
1965:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1966:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	If an event is for a queue that is locked then this function will never
1967:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1968:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	means we can always expect exclusive access to the event list here.
1969:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1970:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	This function assumes that a check has already been made to ensure that
1971:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxEventList is not empty. */
1972:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1973:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxUnblockedTCB );
1974:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1975:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1976:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1977:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1978:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
1979:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
1980:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1981:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	else
1982:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1983:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1984:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		task pending until the scheduler is resumed. */
1985:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1986:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1987:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
1988:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
1989:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1990:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Return true if the task removed from the event list has
1991:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		a higher priority than the calling task.  This allows
1992:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		the calling task to know if it should force a context
1993:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		switch now. */
1994:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xReturn = pdTRUE;
1995:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
1996:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	else
1997:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
1998:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xReturn = pdFALSE;
1999:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2000:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2001:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	return xReturn;
2002:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
2003:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2004:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2005:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
2006:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
2007:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTimeOut );
2008:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
2009:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
2010:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
2011:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2012:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2013:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
2014:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
2015:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** portBASE_TYPE xReturn;
2016:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2017:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTimeOut );
2018:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTicksToWait );
2019:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2020:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskENTER_CRITICAL();
2021:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2022:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2023:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2024:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2025:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			therefore never time out. */
2026:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
2027:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2028:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xReturn = pdFALSE;
2029:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2030:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2031:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif
2032:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2033:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
2034:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2035:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2036:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2037:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2038:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2039:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = pdTRUE;
2040:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2041:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
2042:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2043:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2044:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
2045:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
2046:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = pdFALSE;
2047:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2048:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
2049:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2050:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = pdTRUE;
2051:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2052:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2053:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskEXIT_CRITICAL();
2054:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2055:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	return xReturn;
2056:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
2057:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2058:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2059:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** void vTaskMissedYield( void )
2060:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
2061:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xMissedYield = pdTRUE;
2062:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
2063:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2064:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2065:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2066:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
2067:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2068:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2069:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
2070:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2071:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTask != NULL )
2072:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2073:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = ( tskTCB * ) xTask;
2074:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
2075:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2076:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
2077:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2078:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxReturn = 0U;
2079:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2080:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2081:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return uxReturn;
2082:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2083:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2084:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2085:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2086:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2087:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
2088:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2089:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
2090:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2091:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTask != NULL )
2092:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2093:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = ( tskTCB * ) xTask;
2094:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
2095:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2096:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2097:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2098:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2099:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2100:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*
2101:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * -----------------------------------------------------------
2102:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * The Idle task.
2103:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * ----------------------------------------------------------
2104:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *
2105:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2106:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2107:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *
2108:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * void prvIdleTask( void *pvParameters );
2109:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *
2110:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  */
2111:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2112:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
2113:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Stop warnings. */
2114:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	( void ) pvParameters;
2115:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2116:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	for( ;; )
2117:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2118:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* See if any tasks have been deleted. */
2119:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvCheckTasksWaitingTermination();
2120:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2121:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2122:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2123:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2124:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			see if any other task has become available.  If we are using
2125:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			preemption we don't need to do this as any task becoming available
2126:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			will automatically get the processor anyway. */
2127:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			taskYIELD();
2128:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2129:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif
2130:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2131:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2132:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2133:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* When using preemption tasks of equal priority will be
2134:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2135:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			to run then the idle task should yield before the end of the
2136:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			timeslice.
2137:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2138:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			A critical region is not required here as we are just reading from
2139:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2140:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			the ready list at the idle priority contains more than one task
2141:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			then a task other than the idle task is ready to execute. */
2142:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
2143:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2144:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				taskYIELD();
2145:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2146:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2147:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif
2148:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2149:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2150:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2151:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			extern void vApplicationIdleHook( void );
2152:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2153:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2154:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			allows the application designer to add background functionality
2155:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			without the overhead of a separate task.
2156:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2157:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2158:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vApplicationIdleHook();
2159:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2160:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif
2161:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2162:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2163:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2164:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		user defined low power mode	implementations require
2165:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2166:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2167:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2168:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portTickType xExpectedIdleTime;
2169:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* If the expected idle time is 1 then the idle time would end at
2170:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		the end of the current time slice.  The idle time must be at least
2171:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		2 to ensure any pended ticks between this point and the tick being
2172:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		stopped can be legitimately stepped over when the tick suppression
2173:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		routines returns. */
2174:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		const portTickType xMinimumExpectedIdleTime = ( portTickType ) 2;
2175:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2176:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2177:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2178:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			test of the expected idle time is performed without the
2179:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2180:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			valid. */
2181:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2182:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2183:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xExpectedIdleTime >= xMinimumExpectedIdleTime )
2184:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2185:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				vTaskSuspendAll();
2186:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
2187:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2188:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					time can be sampled again, and this time its value can
2189:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					be used. */
2190:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2191:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2192:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2193:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( xExpectedIdleTime >= xMinimumExpectedIdleTime )
2194:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
2195:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2196:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
2197:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
2198:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xTaskResumeAll();
2199:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2200:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2201:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif
2202:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2203:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
2204:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2205:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2206:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2207:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2208:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2209:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2210:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2211:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------
2212:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  * File private functions documented at the top of the file.
2213:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****  *----------------------------------------------------------*/
2214:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2215:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2216:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2217:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
2218:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
2219:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Store the function name in the TCB. */
2220:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
2221:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2222:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
2223:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
2224:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2225:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
2226:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed 
2227:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2228:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2229:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	remove the privilege bit if one is present. */
2230:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
2231:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2232:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
2233:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2234:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2235:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
2236:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2237:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2238:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
2239:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2240:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
2241:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2242:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
2243:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
2244:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2245:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
2246:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2247:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
2248:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2249:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Event lists are always in priority order. */
2250:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
2251:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
2252:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2253:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2254:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2255:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
2256:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2257:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
2258:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2259:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2260:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2261:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2262:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2263:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
2264:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2265:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2266:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2267:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2268:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2269:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
2270:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2271:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2272:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2273:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2274:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2275:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#else
2276:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2277:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		( void ) xRegions;
2278:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		( void ) usStackDepth;
2279:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2280:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
2281:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
2282:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2283:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2284:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2285:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2286:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
2287:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2288:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
2289:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2290:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTaskToModify == pxCurrentTCB )
2291:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2292:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTaskToModify = NULL;
2293:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2294:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2295:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2296:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2297:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2298:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2299:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2300:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/*-----------------------------------------------------------*/
2301:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2302:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2303:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static void prvInitialiseTaskLists( void )
2304:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
2305:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** unsigned portBASE_TYPE uxPriority;
2306:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2307:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
2308:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2309:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
2310:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2311:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2312:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
2313:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
2314:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
2315:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2316:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2317:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2318:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
2319:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2320:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
2321:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2322:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2323:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2324:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
2325:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2326:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
2327:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2328:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2329:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	using list2. */
2330:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
2331:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
2332:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
2333:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2334:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2335:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2336:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
2337:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2338:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2339:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portBASE_TYPE xListIsEmpty;
2340:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2341:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2342:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		too often in the idle task. */
2343:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
2344:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2345:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vTaskSuspendAll();
2346:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
2347:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTaskResumeAll();
2348:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2349:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
2350:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2351:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				tskTCB *pxTCB;
2352:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2353:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				taskENTER_CRITICAL();
2354:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
2355:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
2356:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
2357:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					--uxCurrentNumberOfTasks;
2358:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					--uxTasksDeleted;
2359:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
2360:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				taskEXIT_CRITICAL();
2361:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2362:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvDeleteTCB( pxTCB );
2363:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2364:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2365:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2366:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	#endif
2367:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
2368:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2369:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2370:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
2371:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
  27              		.loc 1 2371 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
2372:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* The list item will be inserted in wake time order. */
2373:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  32              		.loc 1 2373 0
  33 0000 0C4B     		ldr	r3, .L4
  34 0002 1A68     		ldr	r2, [r3, #0]
2371:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
  35              		.loc 1 2371 0
  36 0004 10B5     		push	{r4, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 4, -8
  40              		.cfi_offset 14, -4
  41              		.loc 1 2373 0
  42 0006 5060     		str	r0, [r2, #4]
2374:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2375:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( xTimeToWake < xTickCount )
  43              		.loc 1 2375 0
  44 0008 5A68     		ldr	r2, [r3, #4]
  45 000a 9042     		cmp	r0, r2
2371:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
  46              		.loc 1 2371 0
  47 000c 0446     		mov	r4, r0
  48              		.loc 1 2375 0
  49 000e 06D2     		bcs	.L2
  50              	.LBB4:
  51              	.LBB5:
2376:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2377:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2378:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericList
  52              		.loc 1 2378 0
  53 0010 9868     		ldr	r0, [r3, #8]
  54              	.LVL1:
  55 0012 1968     		ldr	r1, [r3, #0]
  56 0014 0431     		adds	r1, r1, #4
  57              	.LBE5:
  58              	.LBE4:
2379:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2380:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	else
2381:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2382:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* The wake time has not overflowed, so we can use the current block list. */
2383:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) )
2384:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2385:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2386:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2387:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		too. */
2388:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
2389:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2390:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
2391:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2392:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2393:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
  59              		.loc 1 2393 0
  60 0016 BDE81040 		pop	{r4, lr}
  61              	.LBB7:
  62              	.LBB6:
2378:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericList
  63              		.loc 1 2378 0
  64 001a FFF7FEBF 		b	vListInsert
  65              	.LVL2:
  66              	.L2:
  67              	.LBE6:
  68              	.LBE7:
2383:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) )
  69              		.loc 1 2383 0
  70 001e D868     		ldr	r0, [r3, #12]
  71              	.LVL3:
  72 0020 1968     		ldr	r1, [r3, #0]
  73 0022 0431     		adds	r1, r1, #4
  74 0024 FFF7FEFF 		bl	vListInsert
  75              	.LVL4:
2388:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
  76              		.loc 1 2388 0
  77 0028 034B     		ldr	r3, .L4+4
  78 002a 1A68     		ldr	r2, [r3, #0]
  79 002c 9442     		cmp	r4, r2
2390:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
  80              		.loc 1 2390 0
  81 002e 38BF     		it	cc
  82 0030 1C60     		strcc	r4, [r3, #0]
  83 0032 10BD     		pop	{r4, pc}
  84              	.L5:
  85              		.align	2
  86              	.L4:
  87 0034 00000000 		.word	.LANCHOR0
  88 0038 00000000 		.word	.LANCHOR1
  89              		.cfi_endproc
  90              	.LFE29:
  92              		.align	1
  93              		.global	xTaskGenericCreate
  94              		.thumb
  95              		.thumb_func
  97              	xTaskGenericCreate:
  98              	.LFB0:
 487:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
  99              		.loc 1 487 0
 100              		.cfi_startproc
 101              		@ args = 16, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              	.LVL5:
 104 003c 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 40
 107              		.cfi_offset 3, -40
 108              		.cfi_offset 4, -36
 109              		.cfi_offset 5, -32
 110              		.cfi_offset 6, -28
 111              		.cfi_offset 7, -24
 112              		.cfi_offset 8, -20
 113              		.cfi_offset 9, -16
 114              		.cfi_offset 10, -12
 115              		.cfi_offset 11, -8
 116              		.cfi_offset 14, -4
 487:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 117              		.loc 1 487 0
 118 0040 0A9E     		ldr	r6, [sp, #40]
 119 0042 DDF82C90 		ldr	r9, [sp, #44]
 120 0046 0C9D     		ldr	r5, [sp, #48]
 121 0048 8846     		mov	r8, r1
 122 004a 1746     		mov	r7, r2
 123 004c 9B46     		mov	fp, r3
 491:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTaskCode );
 124              		.loc 1 491 0
 125 004e 8246     		mov	sl, r0
 126 0050 10B9     		cbnz	r0, .L7
 491:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTaskCode );
 127              		.loc 1 491 0 is_stmt 0 discriminator 1
 128 0052 FFF7FEFF 		bl	ulPortSetInterruptMask
 129              	.LVL6:
 130              	.L8:
 131 0056 FEE7     		b	.L8
 132              	.LVL7:
 133              	.L7:
 492:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 134              		.loc 1 492 0 is_stmt 1
 135 0058 042E     		cmp	r6, #4
 136 005a 02D9     		bls	.L9
 492:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 137              		.loc 1 492 0 is_stmt 0 discriminator 1
 138 005c FFF7FEFF 		bl	ulPortSetInterruptMask
 139              	.LVL8:
 140              	.L10:
 141 0060 FEE7     		b	.L10
 142              	.LVL9:
 143              	.L9:
 144              	.LBB15:
 145              	.LBB16:
2394:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2395:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2396:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2397:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
2398:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** tskTCB *pxNewTCB;
2399:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2400:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2401:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	the implementation of the port malloc function. */
2402:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 146              		.loc 1 2402 0 is_stmt 1
 147 0062 4420     		movs	r0, #68
 148              	.LVL10:
 149 0064 FFF7FEFF 		bl	pvPortMalloc
 150              	.LVL11:
2403:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2404:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( pxNewTCB != NULL )
 151              		.loc 1 2404 0
 152 0068 0446     		mov	r4, r0
 153 006a 0028     		cmp	r0, #0
 154 006c 00F09F80 		beq	.L11
2405:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2406:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2407:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2408:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		be deleted later if required. */
2409:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * size
 155              		.loc 1 2409 0
 156 0070 1DB9     		cbnz	r5, .L12
 157 0072 B800     		lsls	r0, r7, #2
 158              	.LVL12:
 159 0074 FFF7FEFF 		bl	pvPortMalloc
 160              	.LVL13:
 161 0078 0546     		mov	r5, r0
 162              	.LVL14:
 163              	.L12:
 164 007a 2563     		str	r5, [r4, #48]
2410:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2411:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 165              		.loc 1 2411 0
 166 007c 1DB9     		cbnz	r5, .L13
2412:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2413:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2414:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vPortFree( pxNewTCB );
 167              		.loc 1 2414 0
 168 007e 2046     		mov	r0, r4
 169 0080 FFF7FEFF 		bl	vPortFree
 170              	.LVL15:
 171 0084 93E0     		b	.L11
 172              	.LVL16:
 173              	.L13:
2415:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxNewTCB = NULL;
2416:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2417:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
2418:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2419:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Just to help debugging. */
2420:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTA
 174              		.loc 1 2420 0
 175 0086 BA00     		lsls	r2, r7, #2
 176 0088 A521     		movs	r1, #165
 177 008a 2846     		mov	r0, r5
 178 008c FFF7FEFF 		bl	memset
 179              	.LVL17:
 180              	.LBE16:
 181              	.LBE15:
 182              	.LBB17:
 522:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 183              		.loc 1 522 0
 184 0090 236B     		ldr	r3, [r4, #48]
 185              	.LBB18:
 186              	.LBB19:
2223:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 187              		.loc 1 2223 0
 188 0092 4146     		mov	r1, r8
 189 0094 0A22     		movs	r2, #10
 190              	.LBE19:
 191              	.LBE18:
 522:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 192              		.loc 1 522 0
 193 0096 013F     		subs	r7, r7, #1
 194              	.LVL18:
 195              	.LBB23:
 196              	.LBB20:
2223:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 197              		.loc 1 2223 0
 198 0098 04F13400 		add	r0, r4, #52
 199              	.LBE20:
 200              	.LBE23:
 522:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 201              		.loc 1 522 0
 202 009c 03EB8707 		add	r7, r3, r7, lsl #2
 203              	.LVL19:
 204              	.LBB24:
 205              	.LBB21:
2242:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 206              		.loc 1 2242 0
 207 00a0 04F10408 		add	r8, r4, #4
 208              	.LVL20:
2223:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 209              		.loc 1 2223 0
 210 00a4 FFF7FEFF 		bl	strncpy
 211              	.LVL21:
2226:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed 
 212              		.loc 1 2226 0
 213 00a8 0023     		movs	r3, #0
 214 00aa 84F83D30 		strb	r3, [r4, #61]
2242:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 215              		.loc 1 2242 0
 216 00ae 4046     		mov	r0, r8
2235:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 217              		.loc 1 2235 0
 218 00b0 E662     		str	r6, [r4, #44]
2238:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 219              		.loc 1 2238 0
 220 00b2 2664     		str	r6, [r4, #64]
2242:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 221              		.loc 1 2242 0
 222 00b4 FFF7FEFF 		bl	vListInitialiseItem
 223              	.LVL22:
2243:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 224              		.loc 1 2243 0
 225 00b8 04F11800 		add	r0, r4, #24
 226 00bc FFF7FEFF 		bl	vListInitialiseItem
 227              	.LVL23:
 228              	.LBE21:
 229              	.LBE24:
 523:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 230              		.loc 1 523 0
 231 00c0 27F00707 		bic	r7, r7, #7
 232              	.LVL24:
 233              	.LBB25:
 234              	.LBB22:
2250:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 235              		.loc 1 2250 0
 236 00c4 C6F10503 		rsb	r3, r6, #5
2247:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 237              		.loc 1 2247 0
 238 00c8 2461     		str	r4, [r4, #16]
2250:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 239              		.loc 1 2250 0
 240 00ca A361     		str	r3, [r4, #24]
2251:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 241              		.loc 1 2251 0
 242 00cc 6462     		str	r4, [r4, #36]
 243              	.LBE22:
 244              	.LBE25:
 555:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 245              		.loc 1 555 0
 246 00ce 3846     		mov	r0, r7
 247 00d0 5146     		mov	r1, sl
 248 00d2 5A46     		mov	r2, fp
 249 00d4 FFF7FEFF 		bl	pxPortInitialiseStack
 250              	.LVL25:
 251 00d8 2060     		str	r0, [r4, #0]
 562:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 252              		.loc 1 562 0
 253 00da B9F1000F 		cmp	r9, #0
 254 00de 01D0     		beq	.L14
 567:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 255              		.loc 1 567 0
 256 00e0 C9F80040 		str	r4, [r9, #0]
 257              	.L14:
 572:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
 258              		.loc 1 572 0
 259 00e4 FFF7FEFF 		bl	vPortEnterCritical
 260              	.LVL26:
 574:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxCurrentNumberOfTasks++;
 261              		.loc 1 574 0
 262 00e8 334B     		ldr	r3, .L33
 263 00ea 1A69     		ldr	r2, [r3, #16]
 264 00ec 0132     		adds	r2, r2, #1
 265 00ee 1A61     		str	r2, [r3, #16]
 575:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxCurrentTCB == NULL )
 266              		.loc 1 575 0
 267 00f0 1F68     		ldr	r7, [r3, #0]
 268              	.LVL27:
 269 00f2 4FBB     		cbnz	r7, .L15
 579:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 270              		.loc 1 579 0
 271 00f4 1C60     		str	r4, [r3, #0]
 581:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 272              		.loc 1 581 0
 273 00f6 1A69     		ldr	r2, [r3, #16]
 274 00f8 012A     		cmp	r2, #1
 275 00fa 2DD1     		bne	.L17
 276              	.LBB26:
 277              	.LBB27:
2309:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 278              		.loc 1 2309 0
 279 00fc 03F11409 		add	r9, r3, #20
 280 0100 4FF0140A 		mov	sl, #20
 281              	.LVL28:
 282              	.L16:
 283 0104 0AFB0790 		mla	r0, sl, r7, r9
2307:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 284              		.loc 1 2307 0
 285 0108 0137     		adds	r7, r7, #1
2309:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 286              		.loc 1 2309 0
 287 010a FFF7FEFF 		bl	vListInitialise
 288              	.LVL29:
2307:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 289              		.loc 1 2307 0
 290 010e 052F     		cmp	r7, #5
2309:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 291              		.loc 1 2309 0
 292 0110 294D     		ldr	r5, .L33
2307:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 293              		.loc 1 2307 0
 294 0112 F7D1     		bne	.L16
2312:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 295              		.loc 1 2312 0
 296 0114 05F17809 		add	r9, r5, #120
 297 0118 4846     		mov	r0, r9
2313:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 298              		.loc 1 2313 0
 299 011a 05F18C07 		add	r7, r5, #140
 300              	.LVL30:
2312:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 301              		.loc 1 2312 0
 302 011e FFF7FEFF 		bl	vListInitialise
 303              	.LVL31:
2313:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 304              		.loc 1 2313 0
 305 0122 3846     		mov	r0, r7
 306 0124 FFF7FEFF 		bl	vListInitialise
 307              	.LVL32:
2314:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 308              		.loc 1 2314 0
 309 0128 05F1A000 		add	r0, r5, #160
 310 012c FFF7FEFF 		bl	vListInitialise
 311              	.LVL33:
2318:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 312              		.loc 1 2318 0
 313 0130 05F1B400 		add	r0, r5, #180
 314 0134 FFF7FEFF 		bl	vListInitialise
 315              	.LVL34:
2324:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
 316              		.loc 1 2324 0
 317 0138 05F1C800 		add	r0, r5, #200
 318 013c FFF7FEFF 		bl	vListInitialise
 319              	.LVL35:
2330:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 320              		.loc 1 2330 0
 321 0140 C5F80C90 		str	r9, [r5, #12]
2331:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 322              		.loc 1 2331 0
 323 0144 AF60     		str	r7, [r5, #8]
 324 0146 07E0     		b	.L17
 325              	.LVL36:
 326              	.L15:
 327              	.LBE27:
 328              	.LBE26:
 594:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 329              		.loc 1 594 0
 330 0148 D3F8DC20 		ldr	r2, [r3, #220]
 331 014c 22B9     		cbnz	r2, .L17
 596:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 332              		.loc 1 596 0
 333 014e 1A68     		ldr	r2, [r3, #0]
 334 0150 D26A     		ldr	r2, [r2, #44]
 335 0152 B242     		cmp	r2, r6
 598:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 336              		.loc 1 598 0
 337 0154 98BF     		it	ls
 338 0156 1C60     		strls	r4, [r3, #0]
 339              	.LVL37:
 340              	.L17:
 605:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 341              		.loc 1 605 0
 342 0158 174A     		ldr	r2, .L33
 343 015a E36A     		ldr	r3, [r4, #44]
 344 015c D2F8E010 		ldr	r1, [r2, #224]
 618:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 345              		.loc 1 618 0
 346 0160 154C     		ldr	r4, .L33
 347              	.LVL38:
 605:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 348              		.loc 1 605 0
 349 0162 8B42     		cmp	r3, r1
 616:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxTaskNumber++;
 350              		.loc 1 616 0
 351 0164 D2F8E410 		ldr	r1, [r2, #228]
 607:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 352              		.loc 1 607 0
 353 0168 88BF     		it	hi
 354 016a C2F8E030 		strhi	r3, [r2, #224]
 616:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxTaskNumber++;
 355              		.loc 1 616 0
 356 016e 0131     		adds	r1, r1, #1
 357 0170 C2F8E410 		str	r1, [r2, #228]
 618:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 358              		.loc 1 618 0
 359 0174 D2F8E820 		ldr	r2, [r2, #232]
 360 0178 9342     		cmp	r3, r2
 361 017a 84BF     		itt	hi
 362 017c 0E4A     		ldrhi	r2, .L33
 363 017e C2F8E830 		strhi	r3, [r2, #232]
 364 0182 04F11402 		add	r2, r4, #20
 365 0186 1420     		movs	r0, #20
 366 0188 00FB0320 		mla	r0, r0, r3, r2
 367 018c 4146     		mov	r1, r8
 368 018e FFF7FEFF 		bl	vListInsertEnd
 369              	.LVL39:
 624:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
 370              		.loc 1 624 0
 371 0192 FFF7FEFF 		bl	vPortExitCritical
 372              	.LVL40:
 373              	.LBE17:
 634:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 374              		.loc 1 634 0
 375 0196 D4F8DC30 		ldr	r3, [r4, #220]
 376 019a 2BB1     		cbz	r3, .L24
 638:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 377              		.loc 1 638 0
 378 019c 2368     		ldr	r3, [r4, #0]
 379 019e DB6A     		ldr	r3, [r3, #44]
 380 01a0 B342     		cmp	r3, r6
 381 01a2 01D2     		bcs	.L24
 640:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				portYIELD_WITHIN_API();
 382              		.loc 1 640 0
 383 01a4 FFF7FEFF 		bl	vPortYieldFromISR
 384              	.LVL41:
 385              	.L24:
 620:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = pdPASS;
 386              		.loc 1 620 0
 387 01a8 0120     		movs	r0, #1
 388 01aa BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 389              	.LVL42:
 390              	.L11:
 391              	.LBB28:
 628:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 392              		.loc 1 628 0
 393 01ae 4FF0FF30 		mov	r0, #-1
 394              	.LBE28:
 646:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 395              		.loc 1 646 0
 396 01b2 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 397              	.L34:
 398 01b6 00BF     		.align	2
 399              	.L33:
 400 01b8 00000000 		.word	.LANCHOR0
 401              		.cfi_endproc
 402              	.LFE0:
 404              		.align	1
 405              		.global	vTaskDelete
 406              		.thumb
 407              		.thumb_func
 409              	vTaskDelete:
 410              	.LFB1:
 652:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 411              		.loc 1 652 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              	.LVL43:
 416 01bc 70B5     		push	{r4, r5, r6, lr}
 417              	.LCFI2:
 418              		.cfi_def_cfa_offset 16
 419              		.cfi_offset 4, -16
 420              		.cfi_offset 5, -12
 421              		.cfi_offset 6, -8
 422              		.cfi_offset 14, -4
 652:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 423              		.loc 1 652 0
 424 01be 0546     		mov	r5, r0
 655:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
 425              		.loc 1 655 0
 426 01c0 FFF7FEFF 		bl	vPortEnterCritical
 427              	.LVL44:
 659:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 428              		.loc 1 659 0
 429 01c4 164B     		ldr	r3, .L47
 430 01c6 1A68     		ldr	r2, [r3, #0]
 431 01c8 9542     		cmp	r5, r2
 432 01ca 01D0     		beq	.L36
 665:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 433              		.loc 1 665 0
 434 01cc 2C46     		mov	r4, r5
 435 01ce 15B9     		cbnz	r5, .L37
 436              	.L36:
 665:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 437              		.loc 1 665 0 is_stmt 0 discriminator 1
 438 01d0 1C68     		ldr	r4, [r3, #0]
 439 01d2 0025     		movs	r5, #0
 440              	.LVL45:
 441 01d4 FFE7     		b	.L37
 442              	.L37:
 443              	.LVL46:
 671:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 444              		.loc 1 671 0 is_stmt 1 discriminator 3
 445 01d6 261D     		adds	r6, r4, #4
 446 01d8 3046     		mov	r0, r6
 447 01da FFF7FEFF 		bl	uxListRemove
 448              	.LVL47:
 677:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 449              		.loc 1 677 0 discriminator 3
 450 01de A36A     		ldr	r3, [r4, #40]
 451 01e0 1BB1     		cbz	r3, .L38
 679:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxListRemove( &( pxTCB->xEventListItem ) );
 452              		.loc 1 679 0
 453 01e2 04F11800 		add	r0, r4, #24
 454 01e6 FFF7FEFF 		bl	uxListRemove
 455              	.LVL48:
 456              	.L38:
 682:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 457              		.loc 1 682 0
 458 01ea 0D4C     		ldr	r4, .L47
 459              	.LVL49:
 460 01ec 3146     		mov	r1, r6
 461 01ee 04F1B400 		add	r0, r4, #180
 462 01f2 FFF7FEFF 		bl	vListInsertEnd
 463              	.LVL50:
 687:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			++uxTasksDeleted;
 464              		.loc 1 687 0
 465 01f6 D4F8EC30 		ldr	r3, [r4, #236]
 466 01fa 0133     		adds	r3, r3, #1
 467 01fc C4F8EC30 		str	r3, [r4, #236]
 691:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxTaskNumber++;
 468              		.loc 1 691 0
 469 0200 D4F8E430 		ldr	r3, [r4, #228]
 470 0204 0133     		adds	r3, r3, #1
 471 0206 C4F8E430 		str	r3, [r4, #228]
 695:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
 472              		.loc 1 695 0
 473 020a FFF7FEFF 		bl	vPortExitCritical
 474              	.LVL51:
 698:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 475              		.loc 1 698 0
 476 020e D4F8DC30 		ldr	r3, [r4, #220]
 477 0212 23B1     		cbz	r3, .L35
 700:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 478              		.loc 1 700 0
 479 0214 1DB9     		cbnz	r5, .L35
 705:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 480              		.loc 1 705 0
 481 0216 BDE87040 		pop	{r4, r5, r6, lr}
 702:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				portYIELD_WITHIN_API();
 482              		.loc 1 702 0
 483 021a FFF7FEBF 		b	vPortYieldFromISR
 484              	.LVL52:
 485              	.L35:
 486 021e 70BD     		pop	{r4, r5, r6, pc}
 487              	.L48:
 488              		.align	2
 489              	.L47:
 490 0220 00000000 		.word	.LANCHOR0
 491              		.cfi_endproc
 492              	.LFE1:
 494              		.align	1
 495              		.global	uxTaskPriorityGet
 496              		.thumb
 497              		.thumb_func
 499              	uxTaskPriorityGet:
 500              	.LFB4:
 907:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 501              		.loc 1 907 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              	.LVL53:
 506 0224 10B5     		push	{r4, lr}
 507              	.LCFI3:
 508              		.cfi_def_cfa_offset 8
 509              		.cfi_offset 4, -8
 510              		.cfi_offset 14, -4
 907:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 511              		.loc 1 907 0
 512 0226 0446     		mov	r4, r0
 911:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
 513              		.loc 1 911 0
 514 0228 FFF7FEFF 		bl	vPortEnterCritical
 515              	.LVL54:
 915:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 516              		.loc 1 915 0
 517 022c 0CB9     		cbnz	r4, .L50
 915:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 518              		.loc 1 915 0 is_stmt 0 discriminator 1
 519 022e 034B     		ldr	r3, .L52
 520 0230 1C68     		ldr	r4, [r3, #0]
 521              	.LVL55:
 522              	.L50:
 916:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 523              		.loc 1 916 0 is_stmt 1 discriminator 3
 524 0232 E46A     		ldr	r4, [r4, #44]
 525              	.LVL56:
 918:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
 526              		.loc 1 918 0 discriminator 3
 527 0234 FFF7FEFF 		bl	vPortExitCritical
 528              	.LVL57:
 921:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 529              		.loc 1 921 0 discriminator 3
 530 0238 2046     		mov	r0, r4
 531 023a 10BD     		pop	{r4, pc}
 532              	.L53:
 533              		.align	2
 534              	.L52:
 535 023c 00000000 		.word	.LANCHOR0
 536              		.cfi_endproc
 537              	.LFE4:
 539              		.align	1
 540              		.global	vTaskPrioritySet
 541              		.thumb
 542              		.thumb_func
 544              	vTaskPrioritySet:
 545              	.LFB5:
 929:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 546              		.loc 1 929 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550              	.LVL58:
 934:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 551              		.loc 1 934 0
 552 0240 0429     		cmp	r1, #4
 929:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 553              		.loc 1 929 0
 554 0242 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 555              	.LCFI4:
 556              		.cfi_def_cfa_offset 24
 557              		.cfi_offset 4, -24
 558              		.cfi_offset 5, -20
 559              		.cfi_offset 6, -16
 560              		.cfi_offset 7, -12
 561              		.cfi_offset 8, -8
 562              		.cfi_offset 14, -4
 929:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 563              		.loc 1 929 0
 564 0246 0546     		mov	r5, r0
 565 0248 0E46     		mov	r6, r1
 934:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 566              		.loc 1 934 0
 567 024a 02D9     		bls	.L55
 934:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 568              		.loc 1 934 0 is_stmt 0 discriminator 1
 569 024c FFF7FEFF 		bl	ulPortSetInterruptMask
 570              	.LVL59:
 571              	.L56:
 572 0250 FEE7     		b	.L56
 573              	.LVL60:
 574              	.L55:
 942:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
 575              		.loc 1 942 0 is_stmt 1
 576 0252 FFF7FEFF 		bl	vPortEnterCritical
 577              	.LVL61:
 944:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTask == pxCurrentTCB )
 578              		.loc 1 944 0
 579 0256 204B     		ldr	r3, .L68
 580 0258 1A68     		ldr	r2, [r3, #0]
 581 025a 9542     		cmp	r5, r2
 582 025c 00D0     		beq	.L57
 951:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 583              		.loc 1 951 0
 584 025e 15B9     		cbnz	r5, .L67
 585              	.L57:
 951:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 586              		.loc 1 951 0 is_stmt 0 discriminator 1
 587 0260 1C68     		ldr	r4, [r3, #0]
 588 0262 0025     		movs	r5, #0
 589              	.LVL62:
 590 0264 00E0     		b	.L58
 591              	.LVL63:
 592              	.L67:
 951:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 593              		.loc 1 951 0
 594 0266 2C46     		mov	r4, r5
 595              	.LVL64:
 596              	.L58:
 957:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 597              		.loc 1 957 0 is_stmt 1 discriminator 3
 598 0268 236C     		ldr	r3, [r4, #64]
 599              	.LVL65:
 965:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 600              		.loc 1 965 0 discriminator 3
 601 026a B342     		cmp	r3, r6
 602 026c 2FD0     		beq	.L60
 969:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 603              		.loc 1 969 0
 604 026e 9E42     		cmp	r6, r3
 605 0270 03D9     		bls	.L61
 971:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxTask != NULL )
 606              		.loc 1 971 0
 607 0272 0035     		adds	r5, r5, #0
 608 0274 18BF     		it	ne
 609 0276 0125     		movne	r5, #1
 610 0278 03E0     		b	.L62
 611              	.L61:
 980:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				else if( pxTask == NULL )
 612              		.loc 1 980 0
 613 027a D5F10105 		rsbs	r5, r5, #1
 614 027e 38BF     		it	cc
 615 0280 0025     		movcc	r5, #0
 616              	.L62:
 617              	.LVL66:
 996:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 618              		.loc 1 996 0
 619 0282 E26A     		ldr	r2, [r4, #44]
1002:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 620              		.loc 1 1002 0
 621 0284 2664     		str	r6, [r4, #64]
 996:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 622              		.loc 1 996 0
 623 0286 9342     		cmp	r3, r2
 998:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 624              		.loc 1 998 0
 625 0288 08BF     		it	eq
 626 028a E662     		streq	r6, [r4, #44]
1010:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 627              		.loc 1 1010 0
 628 028c C6F10506 		rsb	r6, r6, #5
 629              	.LVL67:
 630 0290 A661     		str	r6, [r4, #24]
1016:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 631              		.loc 1 1016 0
 632 0292 114E     		ldr	r6, .L68
 633 0294 1422     		movs	r2, #20
 634 0296 06F11400 		add	r0, r6, #20
 635 029a 02FB0303 		mla	r3, r2, r3, r0
 636              	.LVL68:
 637 029e 6269     		ldr	r2, [r4, #20]
 638 02a0 9A42     		cmp	r2, r3
 639 02a2 8046     		mov	r8, r0
 640 02a4 10D1     		bne	.L64
1021:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 641              		.loc 1 1021 0
 642 02a6 271D     		adds	r7, r4, #4
 643 02a8 3846     		mov	r0, r7
 644 02aa FFF7FEFF 		bl	uxListRemove
 645              	.LVL69:
1025:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 646              		.loc 1 1025 0
 647 02ae E36A     		ldr	r3, [r4, #44]
 648 02b0 D6F8E820 		ldr	r2, [r6, #232]
 649 02b4 9342     		cmp	r3, r2
 650 02b6 88BF     		it	hi
 651 02b8 C6F8E830 		strhi	r3, [r6, #232]
 652 02bc 1420     		movs	r0, #20
 653 02be 00FB0380 		mla	r0, r0, r3, r8
 654 02c2 3946     		mov	r1, r7
 655 02c4 FFF7FEFF 		bl	vListInsertEnd
 656              	.LVL70:
 657              	.L64:
1028:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( xYieldRequired == pdTRUE )
 658              		.loc 1 1028 0
 659 02c8 0DB1     		cbz	r5, .L60
1030:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					portYIELD_WITHIN_API();
 660              		.loc 1 1030 0
 661 02ca FFF7FEFF 		bl	vPortYieldFromISR
 662              	.LVL71:
 663              	.L60:
1039:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 664              		.loc 1 1039 0
 665 02ce BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
1034:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
 666              		.loc 1 1034 0
 667 02d2 FFF7FEBF 		b	vPortExitCritical
 668              	.LVL72:
 669              	.L69:
 670 02d6 00BF     		.align	2
 671              	.L68:
 672 02d8 00000000 		.word	.LANCHOR0
 673              		.cfi_endproc
 674              	.LFE5:
 676              		.align	1
 677              		.global	xTaskIsTaskSuspended
 678              		.thumb
 679              		.thumb_func
 681              	xTaskIsTaskSuspended:
 682              	.LFB7:
1114:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 683              		.loc 1 1114 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL73:
 688 02dc 08B5     		push	{r3, lr}
 689              	.LCFI5:
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 3, -8
 692              		.cfi_offset 14, -4
1119:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( xTask );
 693              		.loc 1 1119 0
 694 02de 10B9     		cbnz	r0, .L71
1119:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( xTask );
 695              		.loc 1 1119 0 is_stmt 0 discriminator 1
 696 02e0 FFF7FEFF 		bl	ulPortSetInterruptMask
 697              	.LVL74:
 698              	.L72:
 699 02e4 FEE7     		b	.L72
 700              	.LVL75:
 701              	.L71:
1123:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 702              		.loc 1 1123 0 is_stmt 1
 703 02e6 4369     		ldr	r3, [r0, #20]
 704 02e8 074A     		ldr	r2, .L77
 705 02ea 9342     		cmp	r3, r2
 706 02ec 09D1     		bne	.L75
 707              	.LVL76:
 708              	.LBB31:
 709              	.LBB32:
1126:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 710              		.loc 1 1126 0
 711 02ee 806A     		ldr	r0, [r0, #40]
 712              	.LVL77:
 713 02f0 A2F12803 		sub	r3, r2, #40
 714 02f4 9842     		cmp	r0, r3
 715 02f6 04D0     		beq	.L75
1132:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 716              		.loc 1 1132 0
 717 02f8 D0F10100 		rsbs	r0, r0, #1
 718 02fc 38BF     		it	cc
 719 02fe 0020     		movcc	r0, #0
 720 0300 08BD     		pop	{r3, pc}
 721              	.LVL78:
 722              	.L75:
 723              	.LBE32:
 724              	.LBE31:
1115:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 725              		.loc 1 1115 0
 726 0302 0020     		movs	r0, #0
 727              	.LVL79:
1140:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 728              		.loc 1 1140 0
 729 0304 08BD     		pop	{r3, pc}
 730              	.L78:
 731 0306 00BF     		.align	2
 732              	.L77:
 733 0308 C8000000 		.word	.LANCHOR0+200
 734              		.cfi_endproc
 735              	.LFE7:
 737              		.align	1
 738              		.global	vTaskResume
 739              		.thumb
 740              		.thumb_func
 742              	vTaskResume:
 743              	.LFB8:
1148:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 744              		.loc 1 1148 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              	.LVL80:
 749 030c 70B5     		push	{r4, r5, r6, lr}
 750              	.LCFI6:
 751              		.cfi_def_cfa_offset 16
 752              		.cfi_offset 4, -16
 753              		.cfi_offset 5, -12
 754              		.cfi_offset 6, -8
 755              		.cfi_offset 14, -4
1152:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxTaskToResume );
 756              		.loc 1 1152 0
 757 030e 0446     		mov	r4, r0
 758 0310 10B9     		cbnz	r0, .L80
1152:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxTaskToResume );
 759              		.loc 1 1152 0 is_stmt 0 discriminator 1
 760 0312 FFF7FEFF 		bl	ulPortSetInterruptMask
 761              	.LVL81:
 762              	.L81:
 763 0316 FEE7     		b	.L81
 764              	.LVL82:
 765              	.L80:
1160:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 766              		.loc 1 1160 0 is_stmt 1 discriminator 1
 767 0318 154D     		ldr	r5, .L87
 768 031a 2B68     		ldr	r3, [r5, #0]
 769 031c 9842     		cmp	r0, r3
 770 031e 25D0     		beq	.L79
1162:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			taskENTER_CRITICAL();
 771              		.loc 1 1162 0
 772 0320 FFF7FEFF 		bl	vPortEnterCritical
 773              	.LVL83:
1164:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 774              		.loc 1 1164 0
 775 0324 2046     		mov	r0, r4
 776 0326 FFF7FEFF 		bl	xTaskIsTaskSuspended
 777              	.LVL84:
 778 032a 0128     		cmp	r0, #1
 779 032c 1AD1     		bne	.L84
1170:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove(  &( pxTCB->xGenericListItem ) );
 780              		.loc 1 1170 0
 781 032e 261D     		adds	r6, r4, #4
 782 0330 3046     		mov	r0, r6
 783 0332 FFF7FEFF 		bl	uxListRemove
 784              	.LVL85:
1171:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 785              		.loc 1 1171 0
 786 0336 E36A     		ldr	r3, [r4, #44]
 787 0338 D5F8E820 		ldr	r2, [r5, #232]
 788 033c 9342     		cmp	r3, r2
 789 033e 88BF     		it	hi
 790 0340 C5F8E830 		strhi	r3, [r5, #232]
 791 0344 0A4D     		ldr	r5, .L87
 792 0346 1420     		movs	r0, #20
 793 0348 05F11402 		add	r2, r5, #20
 794 034c 00FB0320 		mla	r0, r0, r3, r2
 795 0350 3146     		mov	r1, r6
 796 0352 FFF7FEFF 		bl	vListInsertEnd
 797              	.LVL86:
1174:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 798              		.loc 1 1174 0
 799 0356 2B68     		ldr	r3, [r5, #0]
 800 0358 E26A     		ldr	r2, [r4, #44]
 801 035a DB6A     		ldr	r3, [r3, #44]
 802 035c 9A42     		cmp	r2, r3
 803 035e 01D3     		bcc	.L84
1178:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						portYIELD_WITHIN_API();
 804              		.loc 1 1178 0
 805 0360 FFF7FEFF 		bl	vPortYieldFromISR
 806              	.LVL87:
 807              	.L84:
1184:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 808              		.loc 1 1184 0
 809 0364 BDE87040 		pop	{r4, r5, r6, lr}
1182:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			taskEXIT_CRITICAL();
 810              		.loc 1 1182 0
 811 0368 FFF7FEBF 		b	vPortExitCritical
 812              	.LVL88:
 813              	.L79:
 814 036c 70BD     		pop	{r4, r5, r6, pc}
 815              	.L88:
 816 036e 00BF     		.align	2
 817              	.L87:
 818 0370 00000000 		.word	.LANCHOR0
 819              		.cfi_endproc
 820              	.LFE8:
 822              		.align	1
 823              		.global	xTaskResumeFromISR
 824              		.thumb
 825              		.thumb_func
 827              	xTaskResumeFromISR:
 828              	.LFB9:
1193:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 829              		.loc 1 1193 0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 0
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 833              	.LVL89:
 834 0374 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 835              	.LCFI7:
 836              		.cfi_def_cfa_offset 24
 837              		.cfi_offset 4, -24
 838              		.cfi_offset 5, -20
 839              		.cfi_offset 6, -16
 840              		.cfi_offset 7, -12
 841              		.cfi_offset 8, -8
 842              		.cfi_offset 14, -4
1198:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxTaskToResume );
 843              		.loc 1 1198 0
 844 0378 0446     		mov	r4, r0
 845 037a 10B9     		cbnz	r0, .L90
1198:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxTaskToResume );
 846              		.loc 1 1198 0 is_stmt 0 discriminator 1
 847 037c FFF7FEFF 		bl	ulPortSetInterruptMask
 848              	.LVL90:
 849              	.L91:
 850 0380 FEE7     		b	.L91
 851              	.LVL91:
 852              	.L90:
1202:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 853              		.loc 1 1202 0 is_stmt 1
 854 0382 FFF7FEFF 		bl	ulPortSetInterruptMask
 855              	.LVL92:
 856 0386 8046     		mov	r8, r0
 857              	.LVL93:
1204:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 858              		.loc 1 1204 0
 859 0388 2046     		mov	r0, r4
 860              	.LVL94:
 861 038a FFF7FEFF 		bl	xTaskIsTaskSuspended
 862              	.LVL95:
 863 038e 0128     		cmp	r0, #1
 864 0390 23D1     		bne	.L95
1208:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 865              		.loc 1 1208 0
 866 0392 154D     		ldr	r5, .L96
 867 0394 D5F8F030 		ldr	r3, [r5, #240]
 868 0398 CBB9     		cbnz	r3, .L93
1210:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 869              		.loc 1 1210 0
 870 039a 2A68     		ldr	r2, [r5, #0]
 871 039c E36A     		ldr	r3, [r4, #44]
 872 039e D66A     		ldr	r6, [r2, #44]
 873 03a0 B342     		cmp	r3, r6
 874 03a2 34BF     		ite	cc
 875 03a4 0026     		movcc	r6, #0
 876 03a6 0126     		movcs	r6, #1
 877              	.LVL96:
1211:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove(  &( pxTCB->xGenericListItem ) );
 878              		.loc 1 1211 0
 879 03a8 271D     		adds	r7, r4, #4
 880 03aa 3846     		mov	r0, r7
 881 03ac FFF7FEFF 		bl	uxListRemove
 882              	.LVL97:
1212:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 883              		.loc 1 1212 0
 884 03b0 E36A     		ldr	r3, [r4, #44]
 885 03b2 D5F8E820 		ldr	r2, [r5, #232]
 886 03b6 9342     		cmp	r3, r2
 887 03b8 0C4A     		ldr	r2, .L96+4
 888 03ba 88BF     		it	hi
 889 03bc C5F8E830 		strhi	r3, [r5, #232]
 890 03c0 1420     		movs	r0, #20
 891 03c2 00FB0320 		mla	r0, r0, r3, r2
 892 03c6 3946     		mov	r1, r7
 893 03c8 FFF7FEFF 		bl	vListInsertEnd
 894              	.LVL98:
 895 03cc 06E0     		b	.L92
 896              	.LVL99:
 897              	.L93:
1219:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 898              		.loc 1 1219 0
 899 03ce 05F1A000 		add	r0, r5, #160
 900 03d2 04F11801 		add	r1, r4, #24
 901 03d6 FFF7FEFF 		bl	vListInsertEnd
 902              	.LVL100:
 903              	.L95:
1194:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 904              		.loc 1 1194 0
 905 03da 0026     		movs	r6, #0
 906              	.LVL101:
 907              	.L92:
1223:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 908              		.loc 1 1223 0
 909 03dc 4046     		mov	r0, r8
 910 03de FFF7FEFF 		bl	vPortClearInterruptMask
 911              	.LVL102:
1226:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 912              		.loc 1 1226 0
 913 03e2 3046     		mov	r0, r6
 914 03e4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 915              	.L97:
 916              		.align	2
 917              	.L96:
 918 03e8 00000000 		.word	.LANCHOR0
 919 03ec 14000000 		.word	.LANCHOR0+20
 920              		.cfi_endproc
 921              	.LFE9:
 923              		.align	1
 924              		.global	vTaskStartScheduler
 925              		.thumb
 926              		.thumb_func
 928              	vTaskStartScheduler:
 929              	.LFB10:
1239:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 930              		.loc 1 1239 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934 03f0 30B5     		push	{r4, r5, lr}
 935              	.LCFI8:
 936              		.cfi_def_cfa_offset 12
 937              		.cfi_offset 4, -12
 938              		.cfi_offset 5, -8
 939              		.cfi_offset 14, -4
 940 03f2 85B0     		sub	sp, sp, #20
 941              	.LCFI9:
 942              		.cfi_def_cfa_offset 32
1252:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 943              		.loc 1 1252 0
 944 03f4 0024     		movs	r4, #0
 945 03f6 0094     		str	r4, [sp, #0]
 946 03f8 0194     		str	r4, [sp, #4]
 947 03fa 0294     		str	r4, [sp, #8]
 948 03fc 0394     		str	r4, [sp, #12]
 949 03fe 1048     		ldr	r0, .L102
 950 0400 1049     		ldr	r1, .L102+4
 951 0402 4FF4A072 		mov	r2, #320
 952 0406 2346     		mov	r3, r4
 953 0408 FFF7FEFF 		bl	xTaskGenericCreate
 954              	.LVL103:
1258:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xReturn == pdPASS )
 955              		.loc 1 1258 0
 956 040c 0128     		cmp	r0, #1
1252:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 957              		.loc 1 1252 0
 958 040e 0546     		mov	r5, r0
 959              	.LVL104:
1258:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xReturn == pdPASS )
 960              		.loc 1 1258 0
 961 0410 0FD1     		bne	.L99
1260:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 962              		.loc 1 1260 0
 963 0412 FFF7FEFF 		bl	xTimerCreateTimerTask
 964              	.LVL105:
1265:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( xReturn == pdPASS )
 965              		.loc 1 1265 0
 966 0416 0128     		cmp	r0, #1
1260:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 967              		.loc 1 1260 0
 968 0418 0546     		mov	r5, r0
 969              	.LVL106:
1265:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( xReturn == pdPASS )
 970              		.loc 1 1265 0
 971 041a 0AD1     		bne	.L99
1275:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portDISABLE_INTERRUPTS();
 972              		.loc 1 1275 0
 973 041c FFF7FEFF 		bl	ulPortSetInterruptMask
 974              	.LVL107:
1277:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 975              		.loc 1 1277 0
 976 0420 094B     		ldr	r3, .L102+8
 977 0422 C3F8DC50 		str	r5, [r3, #220]
1278:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
 978              		.loc 1 1278 0
 979 0426 5C60     		str	r4, [r3, #4]
1300:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 980              		.loc 1 1300 0
 981 0428 05B0     		add	sp, sp, #20
 982 042a BDE83040 		pop	{r4, r5, lr}
1287:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 983              		.loc 1 1287 0
 984 042e FFF7FEBF 		b	xPortStartScheduler
 985              	.LVL108:
 986              	.L99:
1299:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( xReturn );
 987              		.loc 1 1299 0
 988 0432 15B9     		cbnz	r5, .L98
1299:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( xReturn );
 989              		.loc 1 1299 0 is_stmt 0 discriminator 1
 990 0434 FFF7FEFF 		bl	ulPortSetInterruptMask
 991              	.LVL109:
 992              	.L101:
 993 0438 FEE7     		b	.L101
 994              	.LVL110:
 995              	.L98:
1300:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 996              		.loc 1 1300 0 is_stmt 1
 997 043a 05B0     		add	sp, sp, #20
 998 043c 30BD     		pop	{r4, r5, pc}
 999              	.L103:
 1000 043e 00BF     		.align	2
 1001              	.L102:
 1002 0440 00000000 		.word	prvIdleTask
 1003 0444 00000000 		.word	.LC0
 1004 0448 00000000 		.word	.LANCHOR0
 1005              		.cfi_endproc
 1006              	.LFE10:
 1008              		.align	1
 1009              		.global	vTaskEndScheduler
 1010              		.thumb
 1011              		.thumb_func
 1013              	vTaskEndScheduler:
 1014              	.LFB11:
1304:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1015              		.loc 1 1304 0
 1016              		.cfi_startproc
 1017              		@ args = 0, pretend = 0, frame = 0
 1018              		@ frame_needed = 0, uses_anonymous_args = 0
 1019 044c 08B5     		push	{r3, lr}
 1020              	.LCFI10:
 1021              		.cfi_def_cfa_offset 8
 1022              		.cfi_offset 3, -8
 1023              		.cfi_offset 14, -4
1308:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portDISABLE_INTERRUPTS();
 1024              		.loc 1 1308 0
 1025 044e FFF7FEFF 		bl	ulPortSetInterruptMask
 1026              	.LVL111:
1309:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1027              		.loc 1 1309 0
 1028 0452 044B     		ldr	r3, .L105
 1029 0454 0022     		movs	r2, #0
 1030 0456 C3F8DC20 		str	r2, [r3, #220]
1311:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 1031              		.loc 1 1311 0
 1032 045a BDE80840 		pop	{r3, lr}
1310:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vPortEndScheduler();
 1033              		.loc 1 1310 0
 1034 045e FFF7FEBF 		b	vPortEndScheduler
 1035              	.LVL112:
 1036              	.L106:
 1037 0462 00BF     		.align	2
 1038              	.L105:
 1039 0464 00000000 		.word	.LANCHOR0
 1040              		.cfi_endproc
 1041              	.LFE11:
 1043              		.align	1
 1044              		.global	vTaskSuspendAll
 1045              		.thumb
 1046              		.thumb_func
 1048              	vTaskSuspendAll:
 1049              	.LFB12:
1315:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1050              		.loc 1 1315 0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054              		@ link register save eliminated.
1318:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	++uxSchedulerSuspended;
 1055              		.loc 1 1318 0
 1056 0468 034B     		ldr	r3, .L108
 1057 046a D3F8F020 		ldr	r2, [r3, #240]
 1058 046e 0132     		adds	r2, r2, #1
 1059 0470 C3F8F020 		str	r2, [r3, #240]
 1060 0474 7047     		bx	lr
 1061              	.L109:
 1062 0476 00BF     		.align	2
 1063              	.L108:
 1064 0478 00000000 		.word	.LANCHOR0
 1065              		.cfi_endproc
 1066              	.LFE12:
 1068              		.align	1
 1069              		.global	xTaskGetTickCount
 1070              		.thumb
 1071              		.thumb_func
 1073              	xTaskGetTickCount:
 1074              	.LFB14:
1438:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1075              		.loc 1 1438 0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 0
 1078              		@ frame_needed = 0, uses_anonymous_args = 0
 1079 047c 10B5     		push	{r4, lr}
 1080              	.LCFI11:
 1081              		.cfi_def_cfa_offset 8
 1082              		.cfi_offset 4, -8
 1083              		.cfi_offset 14, -4
1442:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskENTER_CRITICAL();
 1084              		.loc 1 1442 0
 1085 047e FFF7FEFF 		bl	vPortEnterCritical
 1086              	.LVL113:
1444:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xTicks = xTickCount;
 1087              		.loc 1 1444 0
 1088 0482 034B     		ldr	r3, .L111
 1089 0484 5C68     		ldr	r4, [r3, #4]
 1090              	.LVL114:
1446:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskEXIT_CRITICAL();
 1091              		.loc 1 1446 0
 1092 0486 FFF7FEFF 		bl	vPortExitCritical
 1093              	.LVL115:
1449:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 1094              		.loc 1 1449 0
 1095 048a 2046     		mov	r0, r4
 1096 048c 10BD     		pop	{r4, pc}
 1097              	.L112:
 1098 048e 00BF     		.align	2
 1099              	.L111:
 1100 0490 00000000 		.word	.LANCHOR0
 1101              		.cfi_endproc
 1102              	.LFE14:
 1104              		.align	1
 1105              		.global	xTaskGetTickCountFromISR
 1106              		.thumb
 1107              		.thumb_func
 1109              	xTaskGetTickCountFromISR:
 1110              	.LFB15:
1453:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1111              		.loc 1 1453 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 0
 1114              		@ frame_needed = 0, uses_anonymous_args = 0
 1115 0494 10B5     		push	{r4, lr}
 1116              	.LCFI12:
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 4, -8
 1119              		.cfi_offset 14, -4
1457:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1120              		.loc 1 1457 0
 1121 0496 FFF7FEFF 		bl	ulPortSetInterruptMask
 1122              	.LVL116:
1458:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xReturn = xTickCount;
 1123              		.loc 1 1458 0
 1124 049a 034B     		ldr	r3, .L114
 1125 049c 5C68     		ldr	r4, [r3, #4]
 1126              	.LVL117:
1459:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1127              		.loc 1 1459 0
 1128 049e FFF7FEFF 		bl	vPortClearInterruptMask
 1129              	.LVL118:
1462:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 1130              		.loc 1 1462 0
 1131 04a2 2046     		mov	r0, r4
 1132 04a4 10BD     		pop	{r4, pc}
 1133              	.L115:
 1134 04a6 00BF     		.align	2
 1135              	.L114:
 1136 04a8 00000000 		.word	.LANCHOR0
 1137              		.cfi_endproc
 1138              	.LFE15:
 1140              		.align	1
 1141              		.global	uxTaskGetNumberOfTasks
 1142              		.thumb
 1143              		.thumb_func
 1145              	uxTaskGetNumberOfTasks:
 1146              	.LFB16:
1466:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1147              		.loc 1 1466 0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151              		@ link register save eliminated.
1469:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	return uxCurrentNumberOfTasks;
 1152              		.loc 1 1469 0
 1153 04ac 014B     		ldr	r3, .L117
 1154 04ae 1869     		ldr	r0, [r3, #16]
1470:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 1155              		.loc 1 1470 0
 1156 04b0 7047     		bx	lr
 1157              	.L118:
 1158 04b2 00BF     		.align	2
 1159              	.L117:
 1160 04b4 00000000 		.word	.LANCHOR0
 1161              		.cfi_endproc
 1162              	.LFE16:
 1164              		.align	1
 1165              		.global	vTaskIncrementTick
 1166              		.thumb
 1167              		.thumb_func
 1169              	vTaskIncrementTick:
 1170              	.LFB17:
1659:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1171              		.loc 1 1659 0
 1172              		.cfi_startproc
 1173              		@ args = 0, pretend = 0, frame = 0
 1174              		@ frame_needed = 0, uses_anonymous_args = 0
1666:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1175              		.loc 1 1666 0
 1176 04b8 314B     		ldr	r3, .L136
 1177 04ba D3F8F020 		ldr	r2, [r3, #240]
1659:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1178              		.loc 1 1659 0
 1179 04be 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1180              	.LCFI13:
 1181              		.cfi_def_cfa_offset 24
 1182              		.cfi_offset 4, -24
 1183              		.cfi_offset 5, -20
 1184              		.cfi_offset 6, -16
 1185              		.cfi_offset 7, -12
 1186              		.cfi_offset 8, -8
 1187              		.cfi_offset 14, -4
1666:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1188              		.loc 1 1666 0
 1189 04c2 002A     		cmp	r2, #0
 1190 04c4 54D1     		bne	.L120
1668:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		++xTickCount;
 1191              		.loc 1 1668 0
 1192 04c6 5A68     		ldr	r2, [r3, #4]
 1193 04c8 0132     		adds	r2, r2, #1
 1194 04ca 5A60     		str	r2, [r3, #4]
1669:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTickCount == ( portTickType ) 0U )
 1195              		.loc 1 1669 0
 1196 04cc 5A68     		ldr	r2, [r3, #4]
 1197 04ce D2B9     		cbnz	r2, .L121
 1198              	.LBB33:
1676:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 1199              		.loc 1 1676 0
 1200 04d0 DA68     		ldr	r2, [r3, #12]
 1201 04d2 1268     		ldr	r2, [r2, #0]
 1202 04d4 12B1     		cbz	r2, .L122
1676:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 1203              		.loc 1 1676 0 is_stmt 0 discriminator 1
 1204 04d6 FFF7FEFF 		bl	ulPortSetInterruptMask
 1205              	.LVL119:
 1206              	.L123:
 1207 04da FEE7     		b	.L123
 1208              	.L122:
1678:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTemp = pxDelayedTaskList;
 1209              		.loc 1 1678 0 is_stmt 1
 1210 04dc DA68     		ldr	r2, [r3, #12]
 1211              	.LVL120:
1679:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 1212              		.loc 1 1679 0
 1213 04de 9968     		ldr	r1, [r3, #8]
 1214 04e0 D960     		str	r1, [r3, #12]
1680:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 1215              		.loc 1 1680 0
 1216 04e2 9A60     		str	r2, [r3, #8]
1681:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xNumOfOverflows++;
 1217              		.loc 1 1681 0
 1218 04e4 D3F8F420 		ldr	r2, [r3, #244]
 1219              	.LVL121:
 1220 04e8 0132     		adds	r2, r2, #1
 1221 04ea C3F8F420 		str	r2, [r3, #244]
1683:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1222              		.loc 1 1683 0
 1223 04ee DA68     		ldr	r2, [r3, #12]
 1224 04f0 1168     		ldr	r1, [r2, #0]
 1225 04f2 244A     		ldr	r2, .L136+4
 1226 04f4 11B9     		cbnz	r1, .L124
1690:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;
 1227              		.loc 1 1690 0
 1228 04f6 4FF0FF33 		mov	r3, #-1
 1229 04fa 03E0     		b	.L135
 1230              	.L124:
1698:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 1231              		.loc 1 1698 0
 1232 04fc DB68     		ldr	r3, [r3, #12]
 1233 04fe DB68     		ldr	r3, [r3, #12]
 1234 0500 DB68     		ldr	r3, [r3, #12]
 1235              	.LVL122:
1699:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 1236              		.loc 1 1699 0
 1237 0502 5B68     		ldr	r3, [r3, #4]
 1238              	.LVL123:
 1239              	.L135:
 1240 0504 1360     		str	r3, [r2, #0]
 1241              	.LVL124:
 1242              	.L121:
 1243              	.LBE33:
 1244              	.LBB34:
1704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvCheckDelayedTasks();
 1245              		.loc 1 1704 0
 1246 0506 1E4C     		ldr	r4, .L136
 1247 0508 1E4B     		ldr	r3, .L136+4
 1248 050a 6268     		ldr	r2, [r4, #4]
 1249 050c 1B68     		ldr	r3, [r3, #0]
 1250 050e 9A42     		cmp	r2, r3
 1251 0510 33D3     		bcc	.L119
1704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvCheckDelayedTasks();
 1252              		.loc 1 1704 0 is_stmt 0 discriminator 1
 1253 0512 04F11407 		add	r7, r4, #20
 1254 0516 4FF01408 		mov	r8, #20
 1255              	.L134:
 1256 051a E368     		ldr	r3, [r4, #12]
 1257 051c 1B68     		ldr	r3, [r3, #0]
 1258 051e 2BB9     		cbnz	r3, .L126
1704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvCheckDelayedTasks();
 1259              		.loc 1 1704 0 discriminator 2
 1260 0520 184B     		ldr	r3, .L136+4
 1261 0522 4FF0FF32 		mov	r2, #-1
 1262 0526 1A60     		str	r2, [r3, #0]
 1263 0528 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1264              	.L126:
1704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvCheckDelayedTasks();
 1265              		.loc 1 1704 0 discriminator 3
 1266 052c E368     		ldr	r3, [r4, #12]
 1267 052e DB68     		ldr	r3, [r3, #12]
 1268 0530 DD68     		ldr	r5, [r3, #12]
 1269              	.LVL125:
 1270 0532 6268     		ldr	r2, [r4, #4]
 1271 0534 6B68     		ldr	r3, [r5, #4]
 1272              	.LVL126:
 1273 0536 9A42     		cmp	r2, r3
 1274 0538 03D2     		bcs	.L127
1704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvCheckDelayedTasks();
 1275              		.loc 1 1704 0 discriminator 4
 1276 053a 124A     		ldr	r2, .L136+4
 1277 053c 1360     		str	r3, [r2, #0]
 1278 053e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1279              	.L127:
1704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvCheckDelayedTasks();
 1280              		.loc 1 1704 0 discriminator 5
 1281 0542 2E1D     		adds	r6, r5, #4
 1282 0544 3046     		mov	r0, r6
 1283 0546 FFF7FEFF 		bl	uxListRemove
 1284              	.LVL127:
 1285 054a AB6A     		ldr	r3, [r5, #40]
 1286 054c 1BB1     		cbz	r3, .L128
1704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvCheckDelayedTasks();
 1287              		.loc 1 1704 0 discriminator 6
 1288 054e 05F11800 		add	r0, r5, #24
 1289 0552 FFF7FEFF 		bl	uxListRemove
 1290              	.LVL128:
 1291              	.L128:
1704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvCheckDelayedTasks();
 1292              		.loc 1 1704 0 discriminator 7
 1293 0556 E86A     		ldr	r0, [r5, #44]
 1294 0558 D4F8E820 		ldr	r2, [r4, #232]
 1295 055c 9042     		cmp	r0, r2
 1296 055e 88BF     		it	hi
 1297 0560 C4F8E800 		strhi	r0, [r4, #232]
 1298 0564 3146     		mov	r1, r6
 1299 0566 08FB0070 		mla	r0, r8, r0, r7
 1300 056a FFF7FEFF 		bl	vListInsertEnd
 1301              	.LVL129:
 1302 056e D4E7     		b	.L134
 1303              	.LVL130:
 1304              	.L120:
 1305              	.LBE34:
1708:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		++uxMissedTicks;
 1306              		.loc 1 1708 0 is_stmt 1
 1307 0570 D3F8F820 		ldr	r2, [r3, #248]
 1308 0574 0132     		adds	r2, r2, #1
 1309 0576 C3F8F820 		str	r2, [r3, #248]
 1310              	.L119:
 1311 057a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1312              	.L137:
 1313 057e 00BF     		.align	2
 1314              	.L136:
 1315 0580 00000000 		.word	.LANCHOR0
 1316 0584 00000000 		.word	.LANCHOR1
 1317              		.cfi_endproc
 1318              	.LFE17:
 1320              		.align	1
 1321              		.global	xTaskResumeAll
 1322              		.thumb
 1323              		.thumb_func
 1325              	xTaskResumeAll:
 1326              	.LFB13:
1351:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1327              		.loc 1 1351 0
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 0
 1330              		@ frame_needed = 0, uses_anonymous_args = 0
 1331              	.LVL131:
 1332 0588 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1333              	.LCFI14:
 1334              		.cfi_def_cfa_offset 32
 1335              		.cfi_offset 3, -32
 1336              		.cfi_offset 4, -28
 1337              		.cfi_offset 5, -24
 1338              		.cfi_offset 6, -20
 1339              		.cfi_offset 7, -16
 1340              		.cfi_offset 8, -12
 1341              		.cfi_offset 9, -8
 1342              		.cfi_offset 14, -4
1357:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 1343              		.loc 1 1357 0
 1344 058c 304C     		ldr	r4, .L163
 1345 058e D4F8F030 		ldr	r3, [r4, #240]
 1346 0592 13B9     		cbnz	r3, .L139
1357:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 1347              		.loc 1 1357 0 is_stmt 0 discriminator 1
 1348 0594 FFF7FEFF 		bl	ulPortSetInterruptMask
 1349              	.LVL132:
 1350              	.L140:
 1351 0598 FEE7     		b	.L140
 1352              	.L139:
1364:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskENTER_CRITICAL();
 1353              		.loc 1 1364 0 is_stmt 1
 1354 059a FFF7FEFF 		bl	vPortEnterCritical
 1355              	.LVL133:
1366:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		--uxSchedulerSuspended;
 1356              		.loc 1 1366 0
 1357 059e D4F8F030 		ldr	r3, [r4, #240]
 1358 05a2 013B     		subs	r3, r3, #1
 1359 05a4 C4F8F030 		str	r3, [r4, #240]
1368:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1360              		.loc 1 1368 0
 1361 05a8 D4F8F060 		ldr	r6, [r4, #240]
 1362 05ac 0EB1     		cbz	r6, .L141
 1363              	.L144:
1353:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 1364              		.loc 1 1353 0
 1365 05ae 0024     		movs	r4, #0
 1366 05b0 49E0     		b	.L142
 1367              	.L141:
1370:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 1368              		.loc 1 1370 0
 1369 05b2 2369     		ldr	r3, [r4, #16]
 1370 05b4 F3B9     		cbnz	r3, .L152
 1371 05b6 FAE7     		b	.L144
 1372              	.LVL134:
 1373              	.L147:
 1374              	.LBB35:
1378:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 1375              		.loc 1 1378 0
 1376 05b8 D4F8AC30 		ldr	r3, [r4, #172]
 1377 05bc DD68     		ldr	r5, [r3, #12]
 1378              	.LVL135:
1380:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
 1379              		.loc 1 1380 0
 1380 05be 2F1D     		adds	r7, r5, #4
1379:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove( &( pxTCB->xEventListItem ) );
 1381              		.loc 1 1379 0
 1382 05c0 05F11800 		add	r0, r5, #24
 1383 05c4 FFF7FEFF 		bl	uxListRemove
 1384              	.LVL136:
1380:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
 1385              		.loc 1 1380 0
 1386 05c8 3846     		mov	r0, r7
 1387 05ca FFF7FEFF 		bl	uxListRemove
 1388              	.LVL137:
1381:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1389              		.loc 1 1381 0
 1390 05ce E86A     		ldr	r0, [r5, #44]
 1391 05d0 D4F8E820 		ldr	r2, [r4, #232]
 1392 05d4 9042     		cmp	r0, r2
 1393 05d6 88BF     		it	hi
 1394 05d8 C4F8E800 		strhi	r0, [r4, #232]
 1395 05dc 3946     		mov	r1, r7
 1396 05de 09FB0080 		mla	r0, r9, r0, r8
 1397 05e2 FFF7FEFF 		bl	vListInsertEnd
 1398              	.LVL138:
1385:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1399              		.loc 1 1385 0
 1400 05e6 2368     		ldr	r3, [r4, #0]
 1401 05e8 EA6A     		ldr	r2, [r5, #44]
 1402 05ea DB6A     		ldr	r3, [r3, #44]
1387:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						xYieldRequired = pdTRUE;
 1403              		.loc 1 1387 0
 1404 05ec 9A42     		cmp	r2, r3
 1405 05ee 28BF     		it	cs
 1406 05f0 0126     		movcs	r6, #1
 1407              	.LVL139:
 1408 05f2 03E0     		b	.L160
 1409              	.LVL140:
 1410              	.L152:
1381:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1411              		.loc 1 1381 0
 1412 05f4 04F11408 		add	r8, r4, #20
 1413 05f8 4FF01409 		mov	r9, #20
 1414              	.L160:
 1415              	.LVL141:
1376:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1416              		.loc 1 1376 0 discriminator 1
 1417 05fc D4F8A020 		ldr	r2, [r4, #160]
 1418 0600 134B     		ldr	r3, .L163
 1419 0602 002A     		cmp	r2, #0
 1420 0604 D8D1     		bne	.L147
1394:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1421              		.loc 1 1394 0
 1422 0606 D3F8F820 		ldr	r2, [r3, #248]
 1423 060a 42B9     		cbnz	r2, .L148
 1424 060c 14E0     		b	.L161
 1425              	.L150:
1398:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						vTaskIncrementTick();
 1426              		.loc 1 1398 0
 1427 060e FFF7FEFF 		bl	vTaskIncrementTick
 1428              	.LVL142:
1399:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						--uxMissedTicks;
 1429              		.loc 1 1399 0
 1430 0612 D4F8F830 		ldr	r3, [r4, #248]
 1431 0616 013B     		subs	r3, r3, #1
 1432 0618 C4F8F830 		str	r3, [r4, #248]
 1433 061c 00E0     		b	.L162
 1434              	.L148:
1396:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1435              		.loc 1 1396 0 discriminator 1
 1436 061e 1C46     		mov	r4, r3
 1437              	.L162:
 1438 0620 D4F8F830 		ldr	r3, [r4, #248]
 1439 0624 002B     		cmp	r3, #0
 1440 0626 F2D1     		bne	.L150
 1441              	.L151:
 1442              	.LVL143:
1415:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xMissedYield = pdFALSE;
 1443              		.loc 1 1415 0
 1444 0628 094B     		ldr	r3, .L163
 1445 062a 0022     		movs	r2, #0
 1446 062c C3F8FC20 		str	r2, [r3, #252]
1414:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xAlreadyYielded = pdTRUE;
 1447              		.loc 1 1414 0
 1448 0630 0124     		movs	r4, #1
1416:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					portYIELD_WITHIN_API();
 1449              		.loc 1 1416 0
 1450 0632 FFF7FEFF 		bl	vPortYieldFromISR
 1451              	.LVL144:
 1452 0636 06E0     		b	.L142
 1453              	.LVL145:
 1454              	.L161:
1412:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1455              		.loc 1 1412 0
 1456 0638 012E     		cmp	r6, #1
 1457 063a F5D0     		beq	.L151
1412:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1458              		.loc 1 1412 0 is_stmt 0 discriminator 1
 1459 063c D3F8FC30 		ldr	r3, [r3, #252]
 1460 0640 012B     		cmp	r3, #1
 1461 0642 B4D1     		bne	.L144
 1462 0644 F0E7     		b	.L151
 1463              	.LVL146:
 1464              	.L142:
 1465              	.LBE35:
1421:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskEXIT_CRITICAL();
 1466              		.loc 1 1421 0 is_stmt 1
 1467 0646 FFF7FEFF 		bl	vPortExitCritical
 1468              	.LVL147:
1424:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 1469              		.loc 1 1424 0
 1470 064a 2046     		mov	r0, r4
 1471 064c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1472              	.L164:
 1473              		.align	2
 1474              	.L163:
 1475 0650 00000000 		.word	.LANCHOR0
 1476              		.cfi_endproc
 1477              	.LFE13:
 1479              		.align	1
 1480              		.thumb
 1481              		.thumb_func
 1483              	prvIdleTask:
 1484              	.LFB25:
2112:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1485              		.loc 1 2112 0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 0
 1488              		@ frame_needed = 0, uses_anonymous_args = 0
 1489              	.LVL148:
 1490 0654 38B5     		push	{r3, r4, r5, lr}
 1491              	.LCFI15:
 1492              		.cfi_def_cfa_offset 16
 1493              		.cfi_offset 3, -16
 1494              		.cfi_offset 4, -12
 1495              		.cfi_offset 5, -8
 1496              		.cfi_offset 14, -4
 1497              	.LBB43:
 1498              	.LBB44:
2343:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 1499              		.loc 1 2343 0
 1500 0656 164C     		ldr	r4, .L176
 1501 0658 1EE0     		b	.L175
 1502              	.LVL149:
 1503              	.L168:
2345:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vTaskSuspendAll();
 1504              		.loc 1 2345 0
 1505 065a FFF7FEFF 		bl	vTaskSuspendAll
 1506              	.LVL150:
2346:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 1507              		.loc 1 2346 0
 1508 065e D4F8B450 		ldr	r5, [r4, #180]
 1509              	.LVL151:
2347:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTaskResumeAll();
 1510              		.loc 1 2347 0
 1511 0662 FFF7FEFF 		bl	xTaskResumeAll
 1512              	.LVL152:
2349:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 1513              		.loc 1 2349 0
 1514 0666 BDB1     		cbz	r5, .L175
 1515              	.LBB45:
2353:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				taskENTER_CRITICAL();
 1516              		.loc 1 2353 0
 1517 0668 FFF7FEFF 		bl	vPortEnterCritical
 1518              	.LVL153:
2355:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 1519              		.loc 1 2355 0
 1520 066c D4F8C030 		ldr	r3, [r4, #192]
 1521 0670 DD68     		ldr	r5, [r3, #12]
 1522              	.LVL154:
2356:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
 1523              		.loc 1 2356 0
 1524 0672 281D     		adds	r0, r5, #4
 1525 0674 FFF7FEFF 		bl	uxListRemove
 1526              	.LVL155:
2357:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					--uxCurrentNumberOfTasks;
 1527              		.loc 1 2357 0
 1528 0678 2369     		ldr	r3, [r4, #16]
 1529 067a 013B     		subs	r3, r3, #1
 1530 067c 2361     		str	r3, [r4, #16]
2358:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					--uxTasksDeleted;
 1531              		.loc 1 2358 0
 1532 067e D4F8EC30 		ldr	r3, [r4, #236]
 1533 0682 013B     		subs	r3, r3, #1
 1534 0684 C4F8EC30 		str	r3, [r4, #236]
2360:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				taskEXIT_CRITICAL();
 1535              		.loc 1 2360 0
 1536 0688 FFF7FEFF 		bl	vPortExitCritical
 1537              	.LVL156:
 1538              	.LBB46:
 1539              	.LBB47:
2421:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2422:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2423:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2424:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	return pxNewTCB;
2425:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
2426:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2427:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2428:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2429:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2430:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
2431:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2432:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2433:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned short usStackRemaining;
2434:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	PRIVILEGED_DATA static char pcStatusString[ configMAX_TASK_NAME_LEN + 30 ];
2435:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2436:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Write the details of all the TCB's in pxList into the buffer. */
2437:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2438:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		do
2439:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2440:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2441:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
2442:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2443:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
2444:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2445:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#else
2446:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2447:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
2448:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2449:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			#endif
2450:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2451:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, 
2452:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
2453:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2454:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2455:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2456:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2457:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2458:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2459:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2460:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
2461:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2462:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
2463:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2464:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2465:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned long ulStatsAsPercentage;
2466:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2467:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Write the run time stats of all the TCB's in pxList into the buffer. */
2468:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2469:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		do
2470:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2471:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Get next TCB in from the list. */
2472:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2473:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2474:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			/* Divide by zero check. */
2475:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( ulTotalRunTime > 0UL )
2476:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2477:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* Has the task run at all? */
2478:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( pxNextTCB->ulRunTimeCounter == 0UL )
2479:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
2480:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* The task has used no CPU time at all. */
2481:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					sprintf( pcStatsString, ( char * ) "%s\t\t0\t\t0%%\r\n", pxNextTCB->pcTaskName );
2482:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
2483:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				else
2484:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
2485:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* What percentage of the total run time has the task used?
2486:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					This will always be rounded down to the nearest integer.
2487:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					ulTotalRunTime has already been divided by 100. */
2488:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
2489:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2490:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
2491:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
2492:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2493:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						{
2494:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t%lu%%\r\n", pxNextTCB->pcTaskName, pxNextTC
2495:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						}
2496:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						#else
2497:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						{
2498:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2499:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 							printf() library can be used. */
2500:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t%u%%\r\n", pxNextTCB->pcTaskName, ( unsigned
2501:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						}
2502:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						#endif
2503:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
2504:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					else
2505:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
2506:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						/* If the percentage is zero here then the task has
2507:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						consumed less than 1% of the total run time. */
2508:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2509:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						{
2510:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t<1%%\r\n", pxNextTCB->pcTaskName, pxNextTCB
2511:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						}
2512:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						#else
2513:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						{
2514:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2515:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 							printf() library can be used. */
2516:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t<1%%\r\n", pxNextTCB->pcTaskName, ( unsigned
2517:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						}
2518:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						#endif
2519:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
2520:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
2521:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2522:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
2523:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2524:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2525:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2526:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2527:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2528:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2529:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2530:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2531:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2532:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2533:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2534:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2535:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	register unsigned short usCount = 0U;
2536:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2537:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
2538:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2539:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
2540:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			usCount++;
2541:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2542:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2543:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
2544:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2545:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return usCount;
2546:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2547:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2548:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2549:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2550:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2551:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2552:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2553:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2554:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2555:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB *pxTCB;
2556:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned char *pcEndOfStack;
2557:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2558:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2559:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2560:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2561:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#if portSTACK_GROWTH < 0
2562:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2563:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
2564:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2565:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#else
2566:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2567:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2568:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2569:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		#endif
2570:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2571:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
2572:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2573:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return uxReturn;
2574:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2575:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2576:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2577:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2578:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2579:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2580:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2581:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2582:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
2583:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
2584:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
2585:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		want to allocate and clean RAM statically. */
2586:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
2587:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2588:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2589:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		the task to free any memory allocated at the application level. */
2590:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 1540              		.loc 1 2590 0
 1541 068c 286B     		ldr	r0, [r5, #48]
 1542 068e FFF7FEFF 		bl	vPortFree
 1543              	.LVL157:
2591:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vPortFree( pxTCB );
 1544              		.loc 1 2591 0
 1545 0692 2846     		mov	r0, r5
 1546 0694 FFF7FEFF 		bl	vPortFree
 1547              	.LVL158:
 1548              	.L175:
 1549              	.LBE47:
 1550              	.LBE46:
 1551              	.LBE45:
2343:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 1552              		.loc 1 2343 0
 1553 0698 D4F8EC30 		ldr	r3, [r4, #236]
 1554 069c 002B     		cmp	r3, #0
 1555 069e DCD1     		bne	.L168
 1556              	.LBE44:
 1557              	.LBE43:
2142:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
 1558              		.loc 1 2142 0
 1559 06a0 6369     		ldr	r3, [r4, #20]
 1560 06a2 012B     		cmp	r3, #1
 1561 06a4 01D9     		bls	.L169
2144:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				taskYIELD();
 1562              		.loc 1 2144 0
 1563 06a6 FFF7FEFF 		bl	vPortYieldFromISR
 1564              	.LVL159:
 1565              	.L169:
 1566              	.LBB48:
2158:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vApplicationIdleHook();
 1567              		.loc 1 2158 0
 1568 06aa FFF7FEFF 		bl	vApplicationIdleHook
 1569              	.LVL160:
 1570              	.LBE48:
2202:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 1571              		.loc 1 2202 0
 1572 06ae F3E7     		b	.L175
 1573              	.L177:
 1574              		.align	2
 1575              	.L176:
 1576 06b0 00000000 		.word	.LANCHOR0
 1577              		.cfi_endproc
 1578              	.LFE25:
 1580              		.align	1
 1581              		.global	vTaskDelay
 1582              		.thumb
 1583              		.thumb_func
 1585              	vTaskDelay:
 1586              	.LFB3:
 793:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 1587              		.loc 1 793 0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 0
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
 1591              	.LVL161:
 1592 06b4 10B5     		push	{r4, lr}
 1593              	.LCFI16:
 1594              		.cfi_def_cfa_offset 8
 1595              		.cfi_offset 4, -8
 1596              		.cfi_offset 14, -4
 798:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 1597              		.loc 1 798 0
 1598 06b6 0446     		mov	r4, r0
 1599 06b8 18B9     		cbnz	r0, .L179
 1600              	.LVL162:
 1601              	.L180:
 837:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 1602              		.loc 1 837 0
 1603 06ba BDE81040 		pop	{r4, lr}
 835:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			portYIELD_WITHIN_API();
 1604              		.loc 1 835 0
 1605 06be FFF7FEBF 		b	vPortYieldFromISR
 1606              	.LVL163:
 1607              	.L179:
 800:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vTaskSuspendAll();
 1608              		.loc 1 800 0
 1609 06c2 FFF7FEFF 		bl	vTaskSuspendAll
 1610              	.LVL164:
 814:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 1611              		.loc 1 814 0
 1612 06c6 074B     		ldr	r3, .L184
 1613 06c8 5A68     		ldr	r2, [r3, #4]
 819:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 1614              		.loc 1 819 0
 1615 06ca 1868     		ldr	r0, [r3, #0]
 814:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 1616              		.loc 1 814 0
 1617 06cc A418     		adds	r4, r4, r2
 1618              	.LVL165:
 819:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 1619              		.loc 1 819 0
 1620 06ce 0430     		adds	r0, r0, #4
 1621 06d0 FFF7FEFF 		bl	uxListRemove
 1622              	.LVL166:
 826:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 1623              		.loc 1 826 0
 1624 06d4 2046     		mov	r0, r4
 1625 06d6 FFF793FC 		bl	prvAddCurrentTaskToDelayedList
 1626              	.LVL167:
 828:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1627              		.loc 1 828 0
 1628 06da FFF7FEFF 		bl	xTaskResumeAll
 1629              	.LVL168:
 833:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1630              		.loc 1 833 0
 1631 06de 0028     		cmp	r0, #0
 1632 06e0 EBD0     		beq	.L180
 837:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 1633              		.loc 1 837 0
 1634 06e2 10BD     		pop	{r4, pc}
 1635              	.L185:
 1636              		.align	2
 1637              	.L184:
 1638 06e4 00000000 		.word	.LANCHOR0
 1639              		.cfi_endproc
 1640              	.LFE3:
 1642              		.align	1
 1643              		.global	vTaskDelayUntil
 1644              		.thumb
 1645              		.thumb_func
 1647              	vTaskDelayUntil:
 1648              	.LFB2:
 721:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 1649              		.loc 1 721 0
 1650              		.cfi_startproc
 1651              		@ args = 0, pretend = 0, frame = 0
 1652              		@ frame_needed = 0, uses_anonymous_args = 0
 1653              	.LVL169:
 1654 06e8 38B5     		push	{r3, r4, r5, lr}
 1655              	.LCFI17:
 1656              		.cfi_def_cfa_offset 16
 1657              		.cfi_offset 3, -16
 1658              		.cfi_offset 4, -12
 1659              		.cfi_offset 5, -8
 1660              		.cfi_offset 14, -4
 721:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 1661              		.loc 1 721 0
 1662 06ea 0C46     		mov	r4, r1
 725:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1663              		.loc 1 725 0
 1664 06ec 0546     		mov	r5, r0
 1665 06ee 10B9     		cbnz	r0, .L187
 725:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1666              		.loc 1 725 0 is_stmt 0 discriminator 1
 1667 06f0 FFF7FEFF 		bl	ulPortSetInterruptMask
 1668              	.LVL170:
 1669              	.L188:
 1670 06f4 FEE7     		b	.L188
 1671              	.LVL171:
 1672              	.L187:
 726:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1673              		.loc 1 726 0 is_stmt 1
 1674 06f6 11B9     		cbnz	r1, .L189
 726:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1675              		.loc 1 726 0 is_stmt 0 discriminator 1
 1676 06f8 FFF7FEFF 		bl	ulPortSetInterruptMask
 1677              	.LVL172:
 1678              	.L190:
 1679 06fc FEE7     		b	.L190
 1680              	.LVL173:
 1681              	.L189:
 728:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vTaskSuspendAll();
 1682              		.loc 1 728 0 is_stmt 1
 1683 06fe FFF7FEFF 		bl	vTaskSuspendAll
 1684              	.LVL174:
 733:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 1685              		.loc 1 733 0
 1686 0702 134A     		ldr	r2, .L201
 731:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1687              		.loc 1 731 0
 1688 0704 2B68     		ldr	r3, [r5, #0]
 733:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 1689              		.loc 1 733 0
 1690 0706 5168     		ldr	r1, [r2, #4]
 1691 0708 9942     		cmp	r1, r3
 731:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1692              		.loc 1 731 0
 1693 070a 1C44     		add	r4, r3, r4
 1694              	.LVL175:
 733:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 1695              		.loc 1 733 0
 1696 070c 02D2     		bcs	.L191
 740:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 1697              		.loc 1 740 0
 1698 070e 9C42     		cmp	r4, r3
 1699 0710 08D2     		bcs	.L195
 1700 0712 01E0     		b	.L200
 1701              	.L191:
 750:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 1702              		.loc 1 750 0
 1703 0714 9C42     		cmp	r4, r3
 1704 0716 07D3     		bcc	.L196
 1705              	.L200:
 750:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 1706              		.loc 1 750 0 is_stmt 0 discriminator 1
 1707 0718 5368     		ldr	r3, [r2, #4]
 1708 071a 9C42     		cmp	r4, r3
 1709 071c 94BF     		ite	ls
 1710 071e 0023     		movls	r3, #0
 1711 0720 0123     		movhi	r3, #1
 1712 0722 02E0     		b	.L192
 1713              	.L195:
 723:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 1714              		.loc 1 723 0 is_stmt 1
 1715 0724 0023     		movs	r3, #0
 1716 0726 00E0     		b	.L192
 1717              	.L196:
 752:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					xShouldDelay = pdTRUE;
 1718              		.loc 1 752 0
 1719 0728 0123     		movs	r3, #1
 1720              	.L192:
 1721              	.LVL176:
 757:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1722              		.loc 1 757 0
 1723 072a 2C60     		str	r4, [r5, #0]
 759:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1724              		.loc 1 759 0
 1725 072c 3BB1     		cbz	r3, .L193
 766:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 1726              		.loc 1 766 0
 1727 072e 084B     		ldr	r3, .L201
 1728              	.LVL177:
 1729 0730 1868     		ldr	r0, [r3, #0]
 1730 0732 0430     		adds	r0, r0, #4
 1731 0734 FFF7FEFF 		bl	uxListRemove
 1732              	.LVL178:
 774:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 1733              		.loc 1 774 0
 1734 0738 2046     		mov	r0, r4
 1735 073a FFF761FC 		bl	prvAddCurrentTaskToDelayedList
 1736              	.LVL179:
 1737              	.L193:
 777:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1738              		.loc 1 777 0
 1739 073e FFF7FEFF 		bl	xTaskResumeAll
 1740              	.LVL180:
 781:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1741              		.loc 1 781 0
 1742 0742 18B9     		cbnz	r0, .L186
 785:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 1743              		.loc 1 785 0
 1744 0744 BDE83840 		pop	{r3, r4, r5, lr}
 783:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			portYIELD_WITHIN_API();
 1745              		.loc 1 783 0
 1746 0748 FFF7FEBF 		b	vPortYieldFromISR
 1747              	.LVL181:
 1748              	.L186:
 1749 074c 38BD     		pop	{r3, r4, r5, pc}
 1750              	.L202:
 1751 074e 00BF     		.align	2
 1752              	.L201:
 1753 0750 00000000 		.word	.LANCHOR0
 1754              		.cfi_endproc
 1755              	.LFE2:
 1757              		.align	1
 1758              		.global	vTaskSwitchContext
 1759              		.thumb
 1760              		.thumb_func
 1762              	vTaskSwitchContext:
 1763              	.LFB18:
1820:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1764              		.loc 1 1820 0
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 0
 1767              		@ frame_needed = 0, uses_anonymous_args = 0
 1768 0754 38B5     		push	{r3, r4, r5, lr}
 1769              	.LCFI18:
 1770              		.cfi_def_cfa_offset 16
 1771              		.cfi_offset 3, -16
 1772              		.cfi_offset 4, -12
 1773              		.cfi_offset 5, -8
 1774              		.cfi_offset 14, -4
1821:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 1775              		.loc 1 1821 0
 1776 0756 264B     		ldr	r3, .L217
 1777 0758 D3F8F020 		ldr	r2, [r3, #240]
 1778 075c 1C46     		mov	r4, r3
 1779 075e 1AB1     		cbz	r2, .L204
1825:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xMissedYield = pdTRUE;
 1780              		.loc 1 1825 0
 1781 0760 0122     		movs	r2, #1
 1782 0762 C3F8FC20 		str	r2, [r3, #252]
 1783 0766 38BD     		pop	{r3, r4, r5, pc}
 1784              	.L204:
1851:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 1785              		.loc 1 1851 0
 1786 0768 1A68     		ldr	r2, [r3, #0]
 1787 076a 1B68     		ldr	r3, [r3, #0]
 1788 076c 1268     		ldr	r2, [r2, #0]
 1789 076e 1B6B     		ldr	r3, [r3, #48]
 1790 0770 9A42     		cmp	r2, r3
 1791 0772 04D8     		bhi	.L206
1851:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 1792              		.loc 1 1851 0 is_stmt 0 discriminator 1
 1793 0774 2068     		ldr	r0, [r4, #0]
 1794 0776 2168     		ldr	r1, [r4, #0]
 1795 0778 3431     		adds	r1, r1, #52
 1796 077a FFF7FEFF 		bl	vApplicationStackOverflowHook
 1797              	.LVL182:
 1798              	.L206:
 1799              	.LBB49:
1852:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 1800              		.loc 1 1852 0 is_stmt 1
 1801 077e 2368     		ldr	r3, [r4, #0]
 1802 0780 1C49     		ldr	r1, .L217+4
 1803 0782 186B     		ldr	r0, [r3, #48]
 1804 0784 1A4D     		ldr	r5, .L217
 1805 0786 1422     		movs	r2, #20
 1806 0788 FFF7FEFF 		bl	memcmp
 1807              	.LVL183:
 1808 078c 88B1     		cbz	r0, .L208
1852:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 1809              		.loc 1 1852 0 is_stmt 0 discriminator 1
 1810 078e 2868     		ldr	r0, [r5, #0]
 1811 0790 2968     		ldr	r1, [r5, #0]
 1812 0792 3431     		adds	r1, r1, #52
 1813 0794 FFF7FEFF 		bl	vApplicationStackOverflowHook
 1814              	.LVL184:
 1815 0798 0BE0     		b	.L208
 1816              	.L211:
 1817              	.LBE49:
1854:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1818              		.loc 1 1854 0 is_stmt 1 discriminator 5
 1819 079a D2F8E830 		ldr	r3, [r2, #232]
 1820 079e 13B9     		cbnz	r3, .L209
1854:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1821              		.loc 1 1854 0 is_stmt 0 discriminator 2
 1822 07a0 FFF7FEFF 		bl	ulPortSetInterruptMask
 1823              	.LVL185:
 1824              	.L210:
 1825 07a4 FEE7     		b	.L210
 1826              	.L209:
1854:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1827              		.loc 1 1854 0 discriminator 3
 1828 07a6 D2F8E830 		ldr	r3, [r2, #232]
 1829 07aa 013B     		subs	r3, r3, #1
 1830 07ac C2F8E830 		str	r3, [r2, #232]
 1831 07b0 01E0     		b	.L216
 1832              	.L208:
1854:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1833              		.loc 1 1854 0 discriminator 1
 1834 07b2 0F4A     		ldr	r2, .L217
 1835 07b4 1420     		movs	r0, #20
 1836              	.L216:
 1837 07b6 D2F8E830 		ldr	r3, [r2, #232]
 1838 07ba 0D49     		ldr	r1, .L217
 1839 07bc 00FB0323 		mla	r3, r0, r3, r2
 1840 07c0 5B69     		ldr	r3, [r3, #20]
 1841 07c2 002B     		cmp	r3, #0
 1842 07c4 E9D0     		beq	.L211
 1843              	.LBB50:
1854:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1844              		.loc 1 1854 0 discriminator 6
 1845 07c6 D1F8E830 		ldr	r3, [r1, #232]
 1846 07ca 1422     		movs	r2, #20
 1847 07cc 1431     		adds	r1, r1, #20
 1848 07ce 02FB0313 		mla	r3, r2, r3, r1
 1849              	.LVL186:
 1850 07d2 03F10801 		add	r1, r3, #8
 1851 07d6 5A68     		ldr	r2, [r3, #4]
 1852 07d8 5268     		ldr	r2, [r2, #4]
 1853 07da 8A42     		cmp	r2, r1
 1854 07dc 5A60     		str	r2, [r3, #4]
 1855 07de 04BF     		itt	eq
 1856 07e0 5268     		ldreq	r2, [r2, #4]
 1857 07e2 5A60     		streq	r2, [r3, #4]
 1858 07e4 5B68     		ldr	r3, [r3, #4]
 1859              	.LVL187:
 1860 07e6 DA68     		ldr	r2, [r3, #12]
 1861 07e8 014B     		ldr	r3, .L217
 1862 07ea 1A60     		str	r2, [r3, #0]
 1863 07ec 38BD     		pop	{r3, r4, r5, pc}
 1864              	.L218:
 1865 07ee 00BF     		.align	2
 1866              	.L217:
 1867 07f0 00000000 		.word	.LANCHOR0
 1868 07f4 00000000 		.word	.LANCHOR2
 1869              	.LBE50:
 1870              		.cfi_endproc
 1871              	.LFE18:
 1873              		.align	1
 1874              		.global	vTaskSuspend
 1875              		.thumb
 1876              		.thumb_func
 1878              	vTaskSuspend:
 1879              	.LFB6:
1047:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 1880              		.loc 1 1047 0 is_stmt 1
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884              	.LVL188:
 1885 07f8 70B5     		push	{r4, r5, r6, lr}
 1886              	.LCFI19:
 1887              		.cfi_def_cfa_offset 16
 1888              		.cfi_offset 4, -16
 1889              		.cfi_offset 5, -12
 1890              		.cfi_offset 6, -8
 1891              		.cfi_offset 14, -4
1047:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 1892              		.loc 1 1047 0
 1893 07fa 0446     		mov	r4, r0
1050:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskENTER_CRITICAL();
 1894              		.loc 1 1050 0
 1895 07fc FFF7FEFF 		bl	vPortEnterCritical
 1896              	.LVL189:
1054:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
 1897              		.loc 1 1054 0
 1898 0800 174B     		ldr	r3, .L230
 1899 0802 1A68     		ldr	r2, [r3, #0]
 1900 0804 9442     		cmp	r4, r2
 1901 0806 01D0     		beq	.L220
1060:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 1902              		.loc 1 1060 0
 1903 0808 2546     		mov	r5, r4
 1904 080a 14B9     		cbnz	r4, .L221
 1905              	.L220:
1060:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 1906              		.loc 1 1060 0 is_stmt 0 discriminator 1
 1907 080c 1D68     		ldr	r5, [r3, #0]
 1908 080e 0024     		movs	r4, #0
 1909              	.LVL190:
 1910 0810 FFE7     		b	.L221
 1911              	.L221:
 1912              	.LVL191:
1065:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 1913              		.loc 1 1065 0 is_stmt 1 discriminator 3
 1914 0812 2E1D     		adds	r6, r5, #4
 1915 0814 3046     		mov	r0, r6
 1916 0816 FFF7FEFF 		bl	uxListRemove
 1917              	.LVL192:
1071:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 1918              		.loc 1 1071 0 discriminator 3
 1919 081a AB6A     		ldr	r3, [r5, #40]
 1920 081c 1BB1     		cbz	r3, .L222
1073:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				uxListRemove( &( pxTCB->xEventListItem ) );
 1921              		.loc 1 1073 0
 1922 081e 05F11800 		add	r0, r5, #24
 1923 0822 FFF7FEFF 		bl	uxListRemove
 1924              	.LVL193:
 1925              	.L222:
1076:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1926              		.loc 1 1076 0
 1927 0826 0E4D     		ldr	r5, .L230
 1928              	.LVL194:
 1929 0828 3146     		mov	r1, r6
 1930 082a 05F1C800 		add	r0, r5, #200
 1931 082e FFF7FEFF 		bl	vListInsertEnd
 1932              	.LVL195:
1078:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		taskEXIT_CRITICAL();
 1933              		.loc 1 1078 0
 1934 0832 FFF7FEFF 		bl	vPortExitCritical
 1935              	.LVL196:
1080:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
 1936              		.loc 1 1080 0
 1937 0836 002C     		cmp	r4, #0
 1938 0838 11D1     		bne	.L219
1082:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1939              		.loc 1 1082 0
 1940 083a D5F8DC30 		ldr	r3, [r5, #220]
 1941 083e 1BB1     		cbz	r3, .L224
1106:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 1942              		.loc 1 1106 0
 1943 0840 BDE87040 		pop	{r4, r5, r6, lr}
1085:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				portYIELD_WITHIN_API();
 1944              		.loc 1 1085 0
 1945 0844 FFF7FEBF 		b	vPortYieldFromISR
 1946              	.LVL197:
 1947              	.L224:
1092:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1948              		.loc 1 1092 0
 1949 0848 D5F8C820 		ldr	r2, [r5, #200]
 1950 084c 2B69     		ldr	r3, [r5, #16]
 1951 084e 9A42     		cmp	r2, r3
 1952 0850 01D1     		bne	.L225
1098:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxCurrentTCB = NULL;
 1953              		.loc 1 1098 0
 1954 0852 2C60     		str	r4, [r5, #0]
 1955 0854 70BD     		pop	{r4, r5, r6, pc}
 1956              	.L225:
1106:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 1957              		.loc 1 1106 0
 1958 0856 BDE87040 		pop	{r4, r5, r6, lr}
1102:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					vTaskSwitchContext();
 1959              		.loc 1 1102 0
 1960 085a FFF7FEBF 		b	vTaskSwitchContext
 1961              	.LVL198:
 1962              	.L219:
 1963 085e 70BD     		pop	{r4, r5, r6, pc}
 1964              	.L231:
 1965              		.align	2
 1966              	.L230:
 1967 0860 00000000 		.word	.LANCHOR0
 1968              		.cfi_endproc
 1969              	.LFE6:
 1971              		.align	1
 1972              		.global	vTaskPlaceOnEventList
 1973              		.thumb
 1974              		.thumb_func
 1976              	vTaskPlaceOnEventList:
 1977              	.LFB19:
1862:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1978              		.loc 1 1862 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 0
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982              	.LVL199:
 1983 0864 38B5     		push	{r3, r4, r5, lr}
 1984              	.LCFI20:
 1985              		.cfi_def_cfa_offset 16
 1986              		.cfi_offset 3, -16
 1987              		.cfi_offset 4, -12
 1988              		.cfi_offset 5, -8
 1989              		.cfi_offset 14, -4
1862:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 1990              		.loc 1 1862 0
 1991 0866 0D46     		mov	r5, r1
1865:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxEventList );
 1992              		.loc 1 1865 0
 1993 0868 10B9     		cbnz	r0, .L233
1865:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxEventList );
 1994              		.loc 1 1865 0 is_stmt 0 discriminator 1
 1995 086a FFF7FEFF 		bl	ulPortSetInterruptMask
 1996              	.LVL200:
 1997              	.L234:
 1998 086e FEE7     		b	.L234
 1999              	.LVL201:
 2000              	.L233:
1873:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2001              		.loc 1 1873 0 is_stmt 1
 2002 0870 0C4C     		ldr	r4, .L236
 2003 0872 2168     		ldr	r1, [r4, #0]
 2004              	.LVL202:
 2005 0874 1831     		adds	r1, r1, #24
 2006 0876 FFF7FEFF 		bl	vListInsert
 2007              	.LVL203:
1878:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 2008              		.loc 1 1878 0
 2009 087a 2068     		ldr	r0, [r4, #0]
 2010 087c 0430     		adds	r0, r0, #4
 2011 087e FFF7FEFF 		bl	uxListRemove
 2012              	.LVL204:
1887:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2013              		.loc 1 1887 0
 2014 0882 6B1C     		adds	r3, r5, #1
 2015 0884 07D1     		bne	.L235
1892:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2016              		.loc 1 1892 0
 2017 0886 2046     		mov	r0, r4
 2018 0888 50F8C81B 		ldr	r1, [r0], #200
 2019 088c 0431     		adds	r1, r1, #4
1910:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 2020              		.loc 1 1910 0
 2021 088e BDE83840 		pop	{r3, r4, r5, lr}
1892:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2022              		.loc 1 1892 0
 2023 0892 FFF7FEBF 		b	vListInsertEnd
 2024              	.LVL205:
 2025              	.L235:
1898:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2026              		.loc 1 1898 0
 2027 0896 6068     		ldr	r0, [r4, #4]
 2028              	.LVL206:
1899:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2029              		.loc 1 1899 0
 2030 0898 2818     		adds	r0, r5, r0
 2031              	.LVL207:
1910:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 2032              		.loc 1 1910 0
 2033 089a BDE83840 		pop	{r3, r4, r5, lr}
1899:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2034              		.loc 1 1899 0
 2035 089e FFF7AFBB 		b	prvAddCurrentTaskToDelayedList
 2036              	.LVL208:
 2037              	.L237:
 2038 08a2 00BF     		.align	2
 2039              	.L236:
 2040 08a4 00000000 		.word	.LANCHOR0
 2041              		.cfi_endproc
 2042              	.LFE19:
 2044              		.align	1
 2045              		.global	vTaskPlaceOnEventListRestricted
 2046              		.thumb
 2047              		.thumb_func
 2049              	vTaskPlaceOnEventListRestricted:
 2050              	.LFB20:
1916:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 2051              		.loc 1 1916 0
 2052              		.cfi_startproc
 2053              		@ args = 0, pretend = 0, frame = 0
 2054              		@ frame_needed = 0, uses_anonymous_args = 0
 2055              	.LVL209:
 2056 08a8 38B5     		push	{r3, r4, r5, lr}
 2057              	.LCFI21:
 2058              		.cfi_def_cfa_offset 16
 2059              		.cfi_offset 3, -16
 2060              		.cfi_offset 4, -12
 2061              		.cfi_offset 5, -8
 2062              		.cfi_offset 14, -4
1916:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 2063              		.loc 1 1916 0
 2064 08aa 0D46     		mov	r5, r1
1919:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxEventList );
 2065              		.loc 1 1919 0
 2066 08ac 10B9     		cbnz	r0, .L239
1919:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		configASSERT( pxEventList );
 2067              		.loc 1 1919 0 is_stmt 0 discriminator 1
 2068 08ae FFF7FEFF 		bl	ulPortSetInterruptMask
 2069              	.LVL210:
 2070              	.L240:
 2071 08b2 FEE7     		b	.L240
 2072              	.LVL211:
 2073              	.L239:
1931:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2074              		.loc 1 1931 0 is_stmt 1
 2075 08b4 074C     		ldr	r4, .L241
 2076 08b6 2168     		ldr	r1, [r4, #0]
 2077              	.LVL212:
 2078 08b8 1831     		adds	r1, r1, #24
 2079 08ba FFF7FEFF 		bl	vListInsertEnd
 2080              	.LVL213:
1936:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 2081              		.loc 1 1936 0
 2082 08be 2068     		ldr	r0, [r4, #0]
 2083 08c0 0430     		adds	r0, r0, #4
 2084 08c2 FFF7FEFF 		bl	uxListRemove
 2085              	.LVL214:
1945:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
 2086              		.loc 1 1945 0
 2087 08c6 6068     		ldr	r0, [r4, #4]
 2088              	.LVL215:
1948:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
 2089              		.loc 1 1948 0
 2090 08c8 2818     		adds	r0, r5, r0
 2091              	.LVL216:
1949:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 2092              		.loc 1 1949 0
 2093 08ca BDE83840 		pop	{r3, r4, r5, lr}
1948:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
 2094              		.loc 1 1948 0
 2095 08ce FFF797BB 		b	prvAddCurrentTaskToDelayedList
 2096              	.LVL217:
 2097              	.L242:
 2098 08d2 00BF     		.align	2
 2099              	.L241:
 2100 08d4 00000000 		.word	.LANCHOR0
 2101              		.cfi_endproc
 2102              	.LFE20:
 2104              		.align	1
 2105              		.global	xTaskRemoveFromEventList
 2106              		.thumb
 2107              		.thumb_func
 2109              	xTaskRemoveFromEventList:
 2110              	.LFB21:
1955:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 2111              		.loc 1 1955 0
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 0
 2114              		@ frame_needed = 0, uses_anonymous_args = 0
 2115              	.LVL218:
1972:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2116              		.loc 1 1972 0
 2117 08d8 C368     		ldr	r3, [r0, #12]
1955:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 2118              		.loc 1 1955 0
 2119 08da 70B5     		push	{r4, r5, r6, lr}
 2120              	.LCFI22:
 2121              		.cfi_def_cfa_offset 16
 2122              		.cfi_offset 4, -16
 2123              		.cfi_offset 5, -12
 2124              		.cfi_offset 6, -8
 2125              		.cfi_offset 14, -4
1972:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2126              		.loc 1 1972 0
 2127 08dc DC68     		ldr	r4, [r3, #12]
 2128              	.LVL219:
1973:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2129              		.loc 1 1973 0
 2130 08de 14B9     		cbnz	r4, .L244
1973:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2131              		.loc 1 1973 0 is_stmt 0 discriminator 1
 2132 08e0 FFF7FEFF 		bl	ulPortSetInterruptMask
 2133              	.LVL220:
 2134              	.L245:
 2135 08e4 FEE7     		b	.L245
 2136              	.LVL221:
 2137              	.L244:
1974:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2138              		.loc 1 1974 0 is_stmt 1
 2139 08e6 04F11806 		add	r6, r4, #24
1976:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2140              		.loc 1 1976 0
 2141 08ea 124D     		ldr	r5, .L250
1974:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2142              		.loc 1 1974 0
 2143 08ec 3046     		mov	r0, r6
 2144              	.LVL222:
 2145 08ee FFF7FEFF 		bl	uxListRemove
 2146              	.LVL223:
1976:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2147              		.loc 1 1976 0
 2148 08f2 D5F8F030 		ldr	r3, [r5, #240]
 2149 08f6 7BB9     		cbnz	r3, .L246
1978:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2150              		.loc 1 1978 0
 2151 08f8 261D     		adds	r6, r4, #4
 2152 08fa 3046     		mov	r0, r6
 2153 08fc FFF7FEFF 		bl	uxListRemove
 2154              	.LVL224:
1979:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 2155              		.loc 1 1979 0
 2156 0900 E36A     		ldr	r3, [r4, #44]
 2157 0902 D5F8E820 		ldr	r2, [r5, #232]
 2158 0906 9342     		cmp	r3, r2
 2159 0908 0B4A     		ldr	r2, .L250+4
 2160 090a 88BF     		it	hi
 2161 090c C5F8E830 		strhi	r3, [r5, #232]
 2162 0910 1420     		movs	r0, #20
 2163 0912 00FB0320 		mla	r0, r0, r3, r2
 2164 0916 01E0     		b	.L249
 2165              	.L246:
1985:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2166              		.loc 1 1985 0
 2167 0918 05F1A000 		add	r0, r5, #160
 2168              	.L249:
 2169 091c 3146     		mov	r1, r6
 2170 091e FFF7FEFF 		bl	vListInsertEnd
 2171              	.LVL225:
1988:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2172              		.loc 1 1988 0
 2173 0922 044B     		ldr	r3, .L250
 2174 0924 E06A     		ldr	r0, [r4, #44]
 2175 0926 1B68     		ldr	r3, [r3, #0]
 2176              	.LVL226:
 2177 0928 DB6A     		ldr	r3, [r3, #44]
 2178              	.LVL227:
2002:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 2179              		.loc 1 2002 0
 2180 092a 9842     		cmp	r0, r3
 2181 092c 34BF     		ite	cc
 2182 092e 0020     		movcc	r0, #0
 2183              	.LVL228:
 2184 0930 0120     		movcs	r0, #1
 2185 0932 70BD     		pop	{r4, r5, r6, pc}
 2186              	.L251:
 2187              		.align	2
 2188              	.L250:
 2189 0934 00000000 		.word	.LANCHOR0
 2190 0938 14000000 		.word	.LANCHOR0+20
 2191              		.cfi_endproc
 2192              	.LFE21:
 2194              		.align	1
 2195              		.global	vTaskSetTimeOutState
 2196              		.thumb
 2197              		.thumb_func
 2199              	vTaskSetTimeOutState:
 2200              	.LFB22:
2006:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 2201              		.loc 1 2006 0
 2202              		.cfi_startproc
 2203              		@ args = 0, pretend = 0, frame = 0
 2204              		@ frame_needed = 0, uses_anonymous_args = 0
 2205              	.LVL229:
 2206 093c 08B5     		push	{r3, lr}
 2207              	.LCFI23:
 2208              		.cfi_def_cfa_offset 8
 2209              		.cfi_offset 3, -8
 2210              		.cfi_offset 14, -4
2007:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTimeOut );
 2211              		.loc 1 2007 0
 2212 093e 10B9     		cbnz	r0, .L253
2007:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTimeOut );
 2213              		.loc 1 2007 0 is_stmt 0 discriminator 1
 2214 0940 FFF7FEFF 		bl	ulPortSetInterruptMask
 2215              	.LVL230:
 2216              	.L254:
 2217 0944 FEE7     		b	.L254
 2218              	.LVL231:
 2219              	.L253:
2008:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2220              		.loc 1 2008 0 is_stmt 1
 2221 0946 034B     		ldr	r3, .L255
 2222 0948 D3F8F420 		ldr	r2, [r3, #244]
2009:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2223              		.loc 1 2009 0
 2224 094c 5B68     		ldr	r3, [r3, #4]
2008:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2225              		.loc 1 2008 0
 2226 094e 0260     		str	r2, [r0, #0]
2009:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2227              		.loc 1 2009 0
 2228 0950 4360     		str	r3, [r0, #4]
 2229 0952 08BD     		pop	{r3, pc}
 2230              	.L256:
 2231              		.align	2
 2232              	.L255:
 2233 0954 00000000 		.word	.LANCHOR0
 2234              		.cfi_endproc
 2235              	.LFE22:
 2237              		.align	1
 2238              		.global	xTaskCheckForTimeOut
 2239              		.thumb
 2240              		.thumb_func
 2242              	xTaskCheckForTimeOut:
 2243              	.LFB23:
2014:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 2244              		.loc 1 2014 0
 2245              		.cfi_startproc
 2246              		@ args = 0, pretend = 0, frame = 0
 2247              		@ frame_needed = 0, uses_anonymous_args = 0
 2248              	.LVL232:
 2249 0958 38B5     		push	{r3, r4, r5, lr}
 2250              	.LCFI24:
 2251              		.cfi_def_cfa_offset 16
 2252              		.cfi_offset 3, -16
 2253              		.cfi_offset 4, -12
 2254              		.cfi_offset 5, -8
 2255              		.cfi_offset 14, -4
2014:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 2256              		.loc 1 2014 0
 2257 095a 0D46     		mov	r5, r1
2017:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTimeOut );
 2258              		.loc 1 2017 0
 2259 095c 0446     		mov	r4, r0
 2260 095e 10B9     		cbnz	r0, .L258
2017:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTimeOut );
 2261              		.loc 1 2017 0 is_stmt 0 discriminator 1
 2262 0960 FFF7FEFF 		bl	ulPortSetInterruptMask
 2263              	.LVL233:
 2264              	.L259:
 2265 0964 FEE7     		b	.L259
 2266              	.LVL234:
 2267              	.L258:
2018:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTicksToWait );
 2268              		.loc 1 2018 0 is_stmt 1
 2269 0966 11B9     		cbnz	r1, .L260
2018:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	configASSERT( pxTicksToWait );
 2270              		.loc 1 2018 0 is_stmt 0 discriminator 1
 2271 0968 FFF7FEFF 		bl	ulPortSetInterruptMask
 2272              	.LVL235:
 2273              	.L261:
 2274 096c FEE7     		b	.L261
 2275              	.LVL236:
 2276              	.L260:
2020:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskENTER_CRITICAL();
 2277              		.loc 1 2020 0 is_stmt 1
 2278 096e FFF7FEFF 		bl	vPortEnterCritical
 2279              	.LVL237:
2026:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2280              		.loc 1 2026 0
 2281 0972 2B68     		ldr	r3, [r5, #0]
 2282 0974 5A1C     		adds	r2, r3, #1
 2283 0976 17D0     		beq	.L264
2033:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2284              		.loc 1 2033 0
 2285 0978 0F4A     		ldr	r2, .L267
 2286 097a 2168     		ldr	r1, [r4, #0]
 2287 097c D2F8F400 		ldr	r0, [r2, #244]
 2288 0980 8842     		cmp	r0, r1
 2289 0982 1146     		mov	r1, r2
 2290 0984 03D0     		beq	.L263
2033:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2291              		.loc 1 2033 0 is_stmt 0 discriminator 1
 2292 0986 5068     		ldr	r0, [r2, #4]
 2293 0988 6268     		ldr	r2, [r4, #4]
 2294 098a 9042     		cmp	r0, r2
 2295 098c 0ED2     		bcs	.L266
 2296              	.L263:
2041:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
 2297              		.loc 1 2041 0 is_stmt 1
 2298 098e 4968     		ldr	r1, [r1, #4]
 2299 0990 6268     		ldr	r2, [r4, #4]
 2300 0992 891A     		subs	r1, r1, r2
 2301 0994 9942     		cmp	r1, r3
 2302 0996 09D2     		bcs	.L266
2044:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 2303              		.loc 1 2044 0
 2304 0998 0749     		ldr	r1, .L267
 2305 099a 4968     		ldr	r1, [r1, #4]
 2306 099c 521A     		subs	r2, r2, r1
 2307 099e D318     		adds	r3, r2, r3
 2308 09a0 2B60     		str	r3, [r5, #0]
2045:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2309              		.loc 1 2045 0
 2310 09a2 2046     		mov	r0, r4
 2311 09a4 FFF7FEFF 		bl	vTaskSetTimeOutState
 2312              	.LVL238:
 2313              	.L264:
2028:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xReturn = pdFALSE;
 2314              		.loc 1 2028 0
 2315 09a8 0024     		movs	r4, #0
 2316              	.LVL239:
 2317 09aa 00E0     		b	.L262
 2318              	.LVL240:
 2319              	.L266:
2039:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = pdTRUE;
 2320              		.loc 1 2039 0
 2321 09ac 0124     		movs	r4, #1
 2322              	.LVL241:
 2323              	.L262:
2053:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	taskEXIT_CRITICAL();
 2324              		.loc 1 2053 0
 2325 09ae FFF7FEFF 		bl	vPortExitCritical
 2326              	.LVL242:
2056:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** }
 2327              		.loc 1 2056 0
 2328 09b2 2046     		mov	r0, r4
 2329 09b4 38BD     		pop	{r3, r4, r5, pc}
 2330              	.L268:
 2331 09b6 00BF     		.align	2
 2332              	.L267:
 2333 09b8 00000000 		.word	.LANCHOR0
 2334              		.cfi_endproc
 2335              	.LFE23:
 2337              		.align	1
 2338              		.global	vTaskMissedYield
 2339              		.thumb
 2340              		.thumb_func
 2342              	vTaskMissedYield:
 2343              	.LFB24:
2060:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** {
 2344              		.loc 1 2060 0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348              		@ link register save eliminated.
2061:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xMissedYield = pdTRUE;
 2349              		.loc 1 2061 0
 2350 09bc 024B     		ldr	r3, .L270
 2351 09be 0122     		movs	r2, #1
 2352 09c0 C3F8FC20 		str	r2, [r3, #252]
 2353 09c4 7047     		bx	lr
 2354              	.L271:
 2355 09c6 00BF     		.align	2
 2356              	.L270:
 2357 09c8 00000000 		.word	.LANCHOR0
 2358              		.cfi_endproc
 2359              	.LFE24:
 2361              		.align	1
 2362              		.global	xTaskGetCurrentTaskHandle
 2363              		.thumb
 2364              		.thumb_func
 2366              	xTaskGetCurrentTaskHandle:
 2367              	.LFB32:
2592:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
2593:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2594:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2595:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2596:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2597:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2598:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2599:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
2600:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2601:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2602:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 2368              		.loc 1 2602 0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 0
 2371              		@ frame_needed = 0, uses_anonymous_args = 0
 2372              		@ link register save eliminated.
2603:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	xTaskHandle xReturn;
2604:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2605:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* A critical section is not required as this is not called from
2606:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
2607:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		individual execution thread. */
2608:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		xReturn = pxCurrentTCB;
 2373              		.loc 1 2608 0
 2374 09cc 014B     		ldr	r3, .L273
 2375 09ce 1868     		ldr	r0, [r3, #0]
 2376              	.LVL243:
2609:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2610:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return xReturn;
2611:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 2377              		.loc 1 2611 0
 2378 09d0 7047     		bx	lr
 2379              	.L274:
 2380 09d2 00BF     		.align	2
 2381              	.L273:
 2382 09d4 00000000 		.word	.LANCHOR0
 2383              		.cfi_endproc
 2384              	.LFE32:
 2386              		.align	1
 2387              		.global	xTaskGetSchedulerState
 2388              		.thumb
 2389              		.thumb_func
 2391              	xTaskGetSchedulerState:
 2392              	.LFB33:
2612:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2613:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2614:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2615:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2616:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2617:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
2618:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2619:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2620:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 2393              		.loc 1 2620 0
 2394              		.cfi_startproc
 2395              		@ args = 0, pretend = 0, frame = 0
 2396              		@ frame_needed = 0, uses_anonymous_args = 0
 2397              		@ link register save eliminated.
2621:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	portBASE_TYPE xReturn;
2622:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2623:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 2398              		.loc 1 2623 0
 2399 09d8 054B     		ldr	r3, .L279
 2400 09da D3F8DC00 		ldr	r0, [r3, #220]
 2401 09de 28B1     		cbz	r0, .L276
2624:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2625:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
2626:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2627:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		else
2628:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2629:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2402              		.loc 1 2629 0
 2403 09e0 D3F8F000 		ldr	r0, [r3, #240]
2630:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2631:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 2404              		.loc 1 2631 0
 2405 09e4 0028     		cmp	r0, #0
 2406 09e6 14BF     		ite	ne
 2407 09e8 0220     		movne	r0, #2
 2408 09ea 0120     		moveq	r0, #1
 2409              	.L276:
 2410              	.LVL244:
2632:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2633:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			else
2634:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2635:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
2636:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2637:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2638:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2639:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		return xReturn;
2640:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 2411              		.loc 1 2640 0
 2412 09ec 7047     		bx	lr
 2413              	.L280:
 2414 09ee 00BF     		.align	2
 2415              	.L279:
 2416 09f0 00000000 		.word	.LANCHOR0
 2417              		.cfi_endproc
 2418              	.LFE33:
 2420              		.align	1
 2421              		.global	vTaskPriorityInherit
 2422              		.thumb
 2423              		.thumb_func
 2425              	vTaskPriorityInherit:
 2426              	.LFB34:
2641:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2642:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2643:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2644:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2645:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2646:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2647:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
2648:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 2427              		.loc 1 2648 0
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 0
 2430              		@ frame_needed = 0, uses_anonymous_args = 0
 2431              	.LVL245:
 2432 09f4 70B5     		push	{r4, r5, r6, lr}
 2433              	.LCFI25:
 2434              		.cfi_def_cfa_offset 16
 2435              		.cfi_offset 4, -16
 2436              		.cfi_offset 5, -12
 2437              		.cfi_offset 6, -8
 2438              		.cfi_offset 14, -4
2649:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
2650:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2651:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
2652:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		locked then the mutex holder might now be NULL. */
2653:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( pxMutexHolder != NULL )
 2439              		.loc 1 2653 0
 2440 09f6 0446     		mov	r4, r0
 2441 09f8 0028     		cmp	r0, #0
 2442 09fa 2BD0     		beq	.L281
2654:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2655:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 2443              		.loc 1 2655 0
 2444 09fc 164D     		ldr	r5, .L288
 2445 09fe C26A     		ldr	r2, [r0, #44]
 2446 0a00 2B68     		ldr	r3, [r5, #0]
 2447 0a02 DB6A     		ldr	r3, [r3, #44]
 2448 0a04 9A42     		cmp	r2, r3
 2449 0a06 25D2     		bcs	.L281
2656:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2657:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* Adjust the mutex holder state to account for its new priority. */
2658:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 2450              		.loc 1 2658 0
 2451 0a08 2B46     		mov	r3, r5
 2452 0a0a 53F8141B 		ldr	r1, [r3], #20
 2453 0a0e C96A     		ldr	r1, [r1, #44]
 2454 0a10 C1F10501 		rsb	r1, r1, #5
 2455 0a14 8161     		str	r1, [r0, #24]
2659:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2660:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* If the task being modified is in the ready state it will need to
2661:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				be moved into a new list. */
2662:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 2456              		.loc 1 2662 0
 2457 0a16 1421     		movs	r1, #20
 2458 0a18 01FB0233 		mla	r3, r1, r2, r3
 2459 0a1c 4169     		ldr	r1, [r0, #20]
 2460 0a1e 9942     		cmp	r1, r3
 2461 0a20 15D1     		bne	.L283
2663:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
2664:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 2462              		.loc 1 2664 0
 2463 0a22 061D     		adds	r6, r0, #4
 2464 0a24 3046     		mov	r0, r6
 2465              	.LVL246:
 2466 0a26 FFF7FEFF 		bl	uxListRemove
 2467              	.LVL247:
2665:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					{
2666:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2667:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					}
2668:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2669:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
2670:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2468              		.loc 1 2670 0
 2469 0a2a 2B68     		ldr	r3, [r5, #0]
2671:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 2470              		.loc 1 2671 0
 2471 0a2c D5F8E820 		ldr	r2, [r5, #232]
2670:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2472              		.loc 1 2670 0
 2473 0a30 DB6A     		ldr	r3, [r3, #44]
 2474              		.loc 1 2671 0
 2475 0a32 9342     		cmp	r3, r2
 2476 0a34 094A     		ldr	r2, .L288+4
 2477 0a36 88BF     		it	hi
 2478 0a38 C5F8E830 		strhi	r3, [r5, #232]
 2479 0a3c 1420     		movs	r0, #20
 2480 0a3e 00FB0320 		mla	r0, r0, r3, r2
 2481 0a42 3146     		mov	r1, r6
2670:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2482              		.loc 1 2670 0
 2483 0a44 E362     		str	r3, [r4, #44]
2672:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
2673:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				else
2674:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
2675:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					/* Just inherit the priority. */
2676:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
2677:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
2678:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2679:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
2680:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2681:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2682:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 2484              		.loc 1 2682 0
 2485 0a46 BDE87040 		pop	{r4, r5, r6, lr}
2671:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 2486              		.loc 1 2671 0
 2487 0a4a FFF7FEBF 		b	vListInsertEnd
 2488              	.LVL248:
 2489              	.L283:
2676:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2490              		.loc 1 2676 0
 2491 0a4e 2B68     		ldr	r3, [r5, #0]
 2492 0a50 DB6A     		ldr	r3, [r3, #44]
 2493 0a52 C362     		str	r3, [r0, #44]
 2494              	.L281:
 2495 0a54 70BD     		pop	{r4, r5, r6, pc}
 2496              	.L289:
 2497 0a56 00BF     		.align	2
 2498              	.L288:
 2499 0a58 00000000 		.word	.LANCHOR0
 2500 0a5c 14000000 		.word	.LANCHOR0+20
 2501              		.cfi_endproc
 2502              	.LFE34:
 2504              		.align	1
 2505              		.global	vTaskPriorityDisinherit
 2506              		.thumb
 2507              		.thumb_func
 2509              	vTaskPriorityDisinherit:
 2510              	.LFB35:
2683:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2684:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #endif
2685:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** /*-----------------------------------------------------------*/
2686:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2687:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2688:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2689:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
2690:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	{
 2511              		.loc 1 2690 0
 2512              		.cfi_startproc
 2513              		@ args = 0, pretend = 0, frame = 0
 2514              		@ frame_needed = 0, uses_anonymous_args = 0
 2515              	.LVL249:
 2516 0a60 38B5     		push	{r3, r4, r5, lr}
 2517              	.LCFI26:
 2518              		.cfi_def_cfa_offset 16
 2519              		.cfi_offset 3, -16
 2520              		.cfi_offset 4, -12
 2521              		.cfi_offset 5, -8
 2522              		.cfi_offset 14, -4
2691:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
2692:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2693:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		if( pxMutexHolder != NULL )
 2523              		.loc 1 2693 0
 2524 0a62 0446     		mov	r4, r0
 2525 0a64 E0B1     		cbz	r0, .L290
2694:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		{
2695:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 2526              		.loc 1 2695 0
 2527 0a66 C26A     		ldr	r2, [r0, #44]
 2528 0a68 036C     		ldr	r3, [r0, #64]
 2529 0a6a 9A42     		cmp	r2, r3
 2530 0a6c 18D0     		beq	.L290
2696:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			{
2697:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2698:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2699:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 2531              		.loc 1 2699 0
 2532 0a6e 051D     		adds	r5, r0, #4
 2533 0a70 2846     		mov	r0, r5
 2534              	.LVL250:
 2535 0a72 FFF7FEFF 		bl	uxListRemove
 2536              	.LVL251:
2700:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				{
2701:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2702:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				}
2703:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 
2704:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				/* Disinherit the priority before adding the task into the new
2705:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				ready list. */
2706:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
2707:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 2537              		.loc 1 2707 0
 2538 0a76 236C     		ldr	r3, [r4, #64]
2708:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 2539              		.loc 1 2708 0
 2540 0a78 C3F10502 		rsb	r2, r3, #5
 2541 0a7c A261     		str	r2, [r4, #24]
2709:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 2542              		.loc 1 2709 0
 2543 0a7e 094A     		ldr	r2, .L296
2707:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 2544              		.loc 1 2707 0
 2545 0a80 E362     		str	r3, [r4, #44]
 2546              		.loc 1 2709 0
 2547 0a82 D2F8E810 		ldr	r1, [r2, #232]
 2548 0a86 8B42     		cmp	r3, r1
 2549 0a88 88BF     		it	hi
 2550 0a8a C2F8E830 		strhi	r3, [r2, #232]
 2551 0a8e 064A     		ldr	r2, .L296+4
 2552 0a90 1420     		movs	r0, #20
 2553 0a92 00FB0320 		mla	r0, r0, r3, r2
 2554 0a96 2946     		mov	r1, r5
2710:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 			}
2711:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 		}
2712:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 	}
 2555              		.loc 1 2712 0
 2556 0a98 BDE83840 		pop	{r3, r4, r5, lr}
2709:/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 2557              		.loc 1 2709 0
 2558 0a9c FFF7FEBF 		b	vListInsertEnd
 2559              	.LVL252:
 2560              	.L290:
 2561 0aa0 38BD     		pop	{r3, r4, r5, pc}
 2562              	.L297:
 2563 0aa2 00BF     		.align	2
 2564              	.L296:
 2565 0aa4 00000000 		.word	.LANCHOR0
 2566 0aa8 14000000 		.word	.LANCHOR0+20
 2567              		.cfi_endproc
 2568              	.LFE35:
 2570              		.global	pxCurrentTCB
 2571              		.section	.rodata
 2572              		.set	.LANCHOR2,. + 0
 2575              	ucExpectedStackBytes.5901:
 2576 0000 A5       		.byte	-91
 2577 0001 A5       		.byte	-91
 2578 0002 A5       		.byte	-91
 2579 0003 A5       		.byte	-91
 2580 0004 A5       		.byte	-91
 2581 0005 A5       		.byte	-91
 2582 0006 A5       		.byte	-91
 2583 0007 A5       		.byte	-91
 2584 0008 A5       		.byte	-91
 2585 0009 A5       		.byte	-91
 2586 000a A5       		.byte	-91
 2587 000b A5       		.byte	-91
 2588 000c A5       		.byte	-91
 2589 000d A5       		.byte	-91
 2590 000e A5       		.byte	-91
 2591 000f A5       		.byte	-91
 2592 0010 A5       		.byte	-91
 2593 0011 A5       		.byte	-91
 2594 0012 A5       		.byte	-91
 2595 0013 A5       		.byte	-91
 2596              		.section	.rodata.str1.1,"aMS",%progbits,1
 2597              	.LC0:
 2598 0000 49444C45 		.ascii	"IDLE\000"
 2598      00
 2599              		.data
 2600              		.align	2
 2601              		.set	.LANCHOR1,. + 0
 2604              	xNextTaskUnblockTime:
 2605 0000 FFFFFFFF 		.word	-1
 2606              		.bss
 2607              		.align	2
 2608              		.set	.LANCHOR0,. + 0
 2611              	pxCurrentTCB:
 2612 0000 00000000 		.space	4
 2615              	xTickCount:
 2616 0004 00000000 		.space	4
 2619              	pxOverflowDelayedTaskList:
 2620 0008 00000000 		.space	4
 2623              	pxDelayedTaskList:
 2624 000c 00000000 		.space	4
 2627              	uxCurrentNumberOfTasks:
 2628 0010 00000000 		.space	4
 2631              	pxReadyTasksLists:
 2632 0014 00000000 		.space	100
 2632      00000000 
 2632      00000000 
 2632      00000000 
 2632      00000000 
 2635              	xDelayedTaskList1:
 2636 0078 00000000 		.space	20
 2636      00000000 
 2636      00000000 
 2636      00000000 
 2636      00000000 
 2639              	xDelayedTaskList2:
 2640 008c 00000000 		.space	20
 2640      00000000 
 2640      00000000 
 2640      00000000 
 2640      00000000 
 2643              	xPendingReadyList:
 2644 00a0 00000000 		.space	20
 2644      00000000 
 2644      00000000 
 2644      00000000 
 2644      00000000 
 2647              	xTasksWaitingTermination:
 2648 00b4 00000000 		.space	20
 2648      00000000 
 2648      00000000 
 2648      00000000 
 2648      00000000 
 2651              	xSuspendedTaskList:
 2652 00c8 00000000 		.space	20
 2652      00000000 
 2652      00000000 
 2652      00000000 
 2652      00000000 
 2655              	xSchedulerRunning:
 2656 00dc 00000000 		.space	4
 2659              	uxTopUsedPriority:
 2660 00e0 00000000 		.space	4
 2663              	uxTaskNumber:
 2664 00e4 00000000 		.space	4
 2667              	uxTopReadyPriority:
 2668 00e8 00000000 		.space	4
 2671              	uxTasksDeleted:
 2672 00ec 00000000 		.space	4
 2675              	uxSchedulerSuspended:
 2676 00f0 00000000 		.space	4
 2679              	xNumOfOverflows:
 2680 00f4 00000000 		.space	4
 2683              	uxMissedTicks:
 2684 00f8 00000000 		.space	4
 2687              	xMissedYield:
 2688 00fc 00000000 		.space	4
 2689              		.text
 2690              	.Letext0:
 2691              		.file 2 "/home/franz/sat/bin/../lib/gcc/arm-none-eabi/4.7.2/include/stddef.h"
 2692              		.file 3 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/include/pr
 2693              		.file 4 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/portable/p
 2694              		.file 5 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/include/li
 2695              		.file 6 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/include/ta
 2696              		.file 7 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/include/po
 2697              		.file 8 "/home/franz/sat/bin/../lib/gcc/arm-none-eabi/4.7.2/../../../../arm-none-eabi/include/stri
 2698              		.file 9 "/home/franz/Desktop/STM32F3_Multicopter/STM32F3_Multicopter_devel/src/FreeRTOS/include/ti
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/ccPyqmMb.s:20     .text:00000000 $t
     /tmp/ccPyqmMb.s:24     .text:00000000 prvAddCurrentTaskToDelayedList
     /tmp/ccPyqmMb.s:87     .text:00000034 $d
     /tmp/ccPyqmMb.s:92     .text:0000003c $t
     /tmp/ccPyqmMb.s:97     .text:0000003c xTaskGenericCreate
     /tmp/ccPyqmMb.s:400    .text:000001b8 $d
     /tmp/ccPyqmMb.s:404    .text:000001bc $t
     /tmp/ccPyqmMb.s:409    .text:000001bc vTaskDelete
     /tmp/ccPyqmMb.s:490    .text:00000220 $d
     /tmp/ccPyqmMb.s:494    .text:00000224 $t
     /tmp/ccPyqmMb.s:499    .text:00000224 uxTaskPriorityGet
     /tmp/ccPyqmMb.s:535    .text:0000023c $d
     /tmp/ccPyqmMb.s:539    .text:00000240 $t
     /tmp/ccPyqmMb.s:544    .text:00000240 vTaskPrioritySet
     /tmp/ccPyqmMb.s:672    .text:000002d8 $d
     /tmp/ccPyqmMb.s:676    .text:000002dc $t
     /tmp/ccPyqmMb.s:681    .text:000002dc xTaskIsTaskSuspended
     /tmp/ccPyqmMb.s:733    .text:00000308 $d
     /tmp/ccPyqmMb.s:737    .text:0000030c $t
     /tmp/ccPyqmMb.s:742    .text:0000030c vTaskResume
     /tmp/ccPyqmMb.s:818    .text:00000370 $d
     /tmp/ccPyqmMb.s:822    .text:00000374 $t
     /tmp/ccPyqmMb.s:827    .text:00000374 xTaskResumeFromISR
     /tmp/ccPyqmMb.s:918    .text:000003e8 $d
     /tmp/ccPyqmMb.s:923    .text:000003f0 $t
     /tmp/ccPyqmMb.s:928    .text:000003f0 vTaskStartScheduler
     /tmp/ccPyqmMb.s:1002   .text:00000440 $d
     /tmp/ccPyqmMb.s:1483   .text:00000654 prvIdleTask
     /tmp/ccPyqmMb.s:1008   .text:0000044c $t
     /tmp/ccPyqmMb.s:1013   .text:0000044c vTaskEndScheduler
     /tmp/ccPyqmMb.s:1039   .text:00000464 $d
     /tmp/ccPyqmMb.s:1043   .text:00000468 $t
     /tmp/ccPyqmMb.s:1048   .text:00000468 vTaskSuspendAll
     /tmp/ccPyqmMb.s:1064   .text:00000478 $d
     /tmp/ccPyqmMb.s:1068   .text:0000047c $t
     /tmp/ccPyqmMb.s:1073   .text:0000047c xTaskGetTickCount
     /tmp/ccPyqmMb.s:1100   .text:00000490 $d
     /tmp/ccPyqmMb.s:1104   .text:00000494 $t
     /tmp/ccPyqmMb.s:1109   .text:00000494 xTaskGetTickCountFromISR
     /tmp/ccPyqmMb.s:1136   .text:000004a8 $d
     /tmp/ccPyqmMb.s:1140   .text:000004ac $t
     /tmp/ccPyqmMb.s:1145   .text:000004ac uxTaskGetNumberOfTasks
     /tmp/ccPyqmMb.s:1160   .text:000004b4 $d
     /tmp/ccPyqmMb.s:1164   .text:000004b8 $t
     /tmp/ccPyqmMb.s:1169   .text:000004b8 vTaskIncrementTick
     /tmp/ccPyqmMb.s:1315   .text:00000580 $d
     /tmp/ccPyqmMb.s:1320   .text:00000588 $t
     /tmp/ccPyqmMb.s:1325   .text:00000588 xTaskResumeAll
     /tmp/ccPyqmMb.s:1475   .text:00000650 $d
     /tmp/ccPyqmMb.s:1479   .text:00000654 $t
     /tmp/ccPyqmMb.s:1576   .text:000006b0 $d
     /tmp/ccPyqmMb.s:1580   .text:000006b4 $t
     /tmp/ccPyqmMb.s:1585   .text:000006b4 vTaskDelay
     /tmp/ccPyqmMb.s:1638   .text:000006e4 $d
     /tmp/ccPyqmMb.s:1642   .text:000006e8 $t
     /tmp/ccPyqmMb.s:1647   .text:000006e8 vTaskDelayUntil
     /tmp/ccPyqmMb.s:1753   .text:00000750 $d
     /tmp/ccPyqmMb.s:1757   .text:00000754 $t
     /tmp/ccPyqmMb.s:1762   .text:00000754 vTaskSwitchContext
     /tmp/ccPyqmMb.s:1867   .text:000007f0 $d
     /tmp/ccPyqmMb.s:1873   .text:000007f8 $t
     /tmp/ccPyqmMb.s:1878   .text:000007f8 vTaskSuspend
     /tmp/ccPyqmMb.s:1967   .text:00000860 $d
     /tmp/ccPyqmMb.s:1971   .text:00000864 $t
     /tmp/ccPyqmMb.s:1976   .text:00000864 vTaskPlaceOnEventList
     /tmp/ccPyqmMb.s:2040   .text:000008a4 $d
     /tmp/ccPyqmMb.s:2044   .text:000008a8 $t
     /tmp/ccPyqmMb.s:2049   .text:000008a8 vTaskPlaceOnEventListRestricted
     /tmp/ccPyqmMb.s:2100   .text:000008d4 $d
     /tmp/ccPyqmMb.s:2104   .text:000008d8 $t
     /tmp/ccPyqmMb.s:2109   .text:000008d8 xTaskRemoveFromEventList
     /tmp/ccPyqmMb.s:2189   .text:00000934 $d
     /tmp/ccPyqmMb.s:2194   .text:0000093c $t
     /tmp/ccPyqmMb.s:2199   .text:0000093c vTaskSetTimeOutState
     /tmp/ccPyqmMb.s:2233   .text:00000954 $d
     /tmp/ccPyqmMb.s:2237   .text:00000958 $t
     /tmp/ccPyqmMb.s:2242   .text:00000958 xTaskCheckForTimeOut
     /tmp/ccPyqmMb.s:2333   .text:000009b8 $d
     /tmp/ccPyqmMb.s:2337   .text:000009bc $t
     /tmp/ccPyqmMb.s:2342   .text:000009bc vTaskMissedYield
     /tmp/ccPyqmMb.s:2357   .text:000009c8 $d
     /tmp/ccPyqmMb.s:2361   .text:000009cc $t
     /tmp/ccPyqmMb.s:2366   .text:000009cc xTaskGetCurrentTaskHandle
     /tmp/ccPyqmMb.s:2382   .text:000009d4 $d
     /tmp/ccPyqmMb.s:2386   .text:000009d8 $t
     /tmp/ccPyqmMb.s:2391   .text:000009d8 xTaskGetSchedulerState
     /tmp/ccPyqmMb.s:2416   .text:000009f0 $d
     /tmp/ccPyqmMb.s:2420   .text:000009f4 $t
     /tmp/ccPyqmMb.s:2425   .text:000009f4 vTaskPriorityInherit
     /tmp/ccPyqmMb.s:2499   .text:00000a58 $d
     /tmp/ccPyqmMb.s:2504   .text:00000a60 $t
     /tmp/ccPyqmMb.s:2509   .text:00000a60 vTaskPriorityDisinherit
     /tmp/ccPyqmMb.s:2565   .text:00000aa4 $d
     /tmp/ccPyqmMb.s:2611   .bss:00000000 pxCurrentTCB
     /tmp/ccPyqmMb.s:2575   .rodata:00000000 ucExpectedStackBytes.5901
     /tmp/ccPyqmMb.s:2600   .data:00000000 $d
     /tmp/ccPyqmMb.s:2604   .data:00000000 xNextTaskUnblockTime
     /tmp/ccPyqmMb.s:2607   .bss:00000000 $d
     /tmp/ccPyqmMb.s:2615   .bss:00000004 xTickCount
     /tmp/ccPyqmMb.s:2619   .bss:00000008 pxOverflowDelayedTaskList
     /tmp/ccPyqmMb.s:2623   .bss:0000000c pxDelayedTaskList
     /tmp/ccPyqmMb.s:2627   .bss:00000010 uxCurrentNumberOfTasks
     /tmp/ccPyqmMb.s:2631   .bss:00000014 pxReadyTasksLists
     /tmp/ccPyqmMb.s:2635   .bss:00000078 xDelayedTaskList1
     /tmp/ccPyqmMb.s:2639   .bss:0000008c xDelayedTaskList2
     /tmp/ccPyqmMb.s:2643   .bss:000000a0 xPendingReadyList
     /tmp/ccPyqmMb.s:2647   .bss:000000b4 xTasksWaitingTermination
     /tmp/ccPyqmMb.s:2651   .bss:000000c8 xSuspendedTaskList
     /tmp/ccPyqmMb.s:2655   .bss:000000dc xSchedulerRunning
     /tmp/ccPyqmMb.s:2659   .bss:000000e0 uxTopUsedPriority
     /tmp/ccPyqmMb.s:2663   .bss:000000e4 uxTaskNumber
     /tmp/ccPyqmMb.s:2667   .bss:000000e8 uxTopReadyPriority
     /tmp/ccPyqmMb.s:2671   .bss:000000ec uxTasksDeleted
     /tmp/ccPyqmMb.s:2675   .bss:000000f0 uxSchedulerSuspended
     /tmp/ccPyqmMb.s:2679   .bss:000000f4 xNumOfOverflows
     /tmp/ccPyqmMb.s:2683   .bss:000000f8 uxMissedTicks
     /tmp/ccPyqmMb.s:2687   .bss:000000fc xMissedYield
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.4eaffbadb3a087d856021b8a18f9e221
                           .group:00000000 wm4.newlib.h.8.378a545e43bc5669590e42e276a93323
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.197.f6039468f1d0fc1b2f8d10d31d95d32a
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.187.f0d8b8c72c4a3728cacef55a66e187f3
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.cf962ebbec441b3ac67502735f0765db
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.ce121baf7fb2f5b502889c46862d44e6
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.64.99f7f8c5cde3e8fc6197cecee063ab22
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.50.e3cb12f9608797e0cfb3c9615a6071cb
                           .group:00000000 wm4.cdefs.h.45.6b392759c8a421d1199268021d4987e3
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.string.h.125.513d6ece205e52e1cd04235cb7b31cef
                           .group:00000000 wm4.projdefs.h.70.dbccf9a6ca737be695addf5321434443
                           .group:00000000 wm4.FreeRTOSConfig.h.79.bfdec03d0f0e76f8a4cb6847c22dabd7
                           .group:00000000 wm4.portmacro.h.71.4b486245a22132630e6590c20a5362d9
                           .group:00000000 wm4.portable.h.326.d973d87d91a2870806201c5c4493d578
                           .group:00000000 wm4.mpu_wrappers.h.70.805d5308b530bfb35337fa0cda53b379
                           .group:00000000 wm4.FreeRTOS.h.153.2856cce34c845bc23d0e3eff29cca38b
                           .group:00000000 wm4.list.h.99.4794e53f44ef377a7e8b918fd5c142a2
                           .group:00000000 wm4.task.h.87.ccd4c448460750abd1f398251d355800
                           .group:00000000 wm4.timers.h.88.1f6aa39fa72d19a328c2630c34ca71fc
                           .group:00000000 wm4.StackMacros.h.70.ce860816081eafea7abd036dd40dd896

UNDEFINED SYMBOLS
vListInsert
ulPortSetInterruptMask
pvPortMalloc
vPortFree
memset
strncpy
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInitialise
vListInsertEnd
vPortExitCritical
vPortYieldFromISR
uxListRemove
vPortClearInterruptMask
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vApplicationIdleHook
vApplicationStackOverflowHook
memcmp
