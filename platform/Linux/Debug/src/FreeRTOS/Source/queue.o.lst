   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"queue.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	prvCopyDataToQueue:
  25              	.LFB12:
  26              		.file 1 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c"
   1:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
   2:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     All rights reserved
   4:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
   5:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
   7:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
   8:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
   9:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    platform software that has become a de facto standard.             *
  12:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  13:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  17:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Thank you!                                                         *
  18:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  19:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
  20:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  21:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     This file is part of the FreeRTOS distribution.
  22:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  23:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  27:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     >>! kernel.
  31:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  32:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     link: http://www.freertos.org/a00114.html
  36:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  37:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     1 tab == 4 spaces!
  38:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  39:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
  40:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  41:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    not run, what could be wrong?"                                     *
  43:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  44:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  46:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
  47:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  48:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     license and Real Time Engineers Ltd. contact details.
  50:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  51:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  55:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     licenses offer ticketed support, indemnification and middleware.
  58:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  59:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  61:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     mission critical applications that require provable dependability.
  62:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  63:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     1 tab == 4 spaces!
  64:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** */
  65:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  66:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  67:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include <string.h>
  68:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  69:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  70:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  71:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  72:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  73:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  74:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  75:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include "task.h"
  76:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include "queue.h"
  77:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  78:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  79:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  80:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif
  81:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  82:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  83:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  84:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  85:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  86:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  87:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  88:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  89:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and xTxLock structure members. */
  90:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( signed portBASE_TYPE ) -1 )
  91:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( signed portBASE_TYPE ) 0 )
  92:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  93:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* When the xQUEUE structure is used to represent a base queue its pcHead and
  94:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  95:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE structure is used to represent a mutex pcHead and pcTail pointers are
  96:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  97:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
  98:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
  99:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
 102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
 103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** structure member). */
 104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
 105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
 106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** zero. */
 110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( unsigned portBASE_TYPE ) 0 )
 111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( portTickType ) 0U )
 112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
 116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.
 117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
 119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcHead;					/*< Points to the beginning of the queue storage area. */
 121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more b
 122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcWriteTo;					/*< Points to the free next place in the storage area. */
 124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	union									/* Use of a union is an exception to the coding standard to ensure two mutually excl
 126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		signed char *pcReadFrom;			/*< Points to the last place that a queued item was read from when the
 128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		unsigned portBASE_TYPE uxRecursiveCallCount;/*< Maintains a count of the numebr of times a recurs
 129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	} u;
 130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xList xTasksWaitingToSend;				/*< List of tasks that are blocked waiting to post onto this queue. 
 132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xList xTasksWaitingToReceive;			/*< List of tasks that are blocked waiting to read from this queue
 133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	volatile unsigned portBASE_TYPE uxMessagesWaiting;/*< The number of items currently in the queue. 
 135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE uxLength;		/*< The length of the queue defined as the number of items it wi
 136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE uxItemSize;		/*< The size of each items that the queue will hold. */
 137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	volatile signed portBASE_TYPE xRxLock;	/*< Stores the number of items received from the queue (rem
 139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	volatile signed portBASE_TYPE xTxLock;	/*< Stores the number of items transmitted to the queue (ad
 140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		unsigned char ucQueueNumber;
 143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		unsigned char ucQueueType;
 144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#endif
 145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#endif
 149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } xQUEUE;
 151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	more user friendly. */
 162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		signed char *pcQueueName;
 165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xQueueHandle xHandle;
 166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of xQueueRegistryItem structures.
 169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueRegistryItem xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( xQUEUE *pxQueue ) PRIVILEGED_FUNCTION;
 184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  *
 188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue ) PRIVILEGED_FUNCTION;
 191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  *
 195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue ) PRIVILEGED_FUNCTION;
 198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * back of the queue.
 202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
 204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer ) PRIVILEGED_
 209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/*
 212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	 */
 215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	static portBASE_TYPE prvNotifyQueueSetContainer( const xQUEUE * const pxQueue, portBASE_TYPE xCopy
 216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif
 217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{														\
 227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->xRxLock == queueUNLOCKED )			\
 228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{													\
 229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxQueue )->xRxLock = queueLOCKED_UNMODIFIED;	\
 230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}													\
 231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->xTxLock == queueUNLOCKED )			\
 232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{													\
 233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxQueue )->xTxLock = queueLOCKED_UNMODIFIED;	\
 234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}													\
 235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}														\
 236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
 240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U )
 251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to	write to
 259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	versions. */
 280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return pdPASS;
 281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxIt
 285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxNewQueue;
 287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** size_t xQueueSizeInBytes;
 288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQueueHandle xReturn = NULL;
 289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Allocate the new queue structure. */
 295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Create the list of pointers to queue items.  The queue is one byte
 301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			longer than asked for to make wrap checking easier/faster. */
 302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA
 303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxNewQueue->pcHead != NULL )
 306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Initialise the queue members as described above where the
 308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				queue type is defined. */
 309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxLength = uxQueueLength;
 310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxItemSize = uxItemSize;
 311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_TRACE_FACILITY == 1 )
 314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxNewQueue->ucQueueType = ucQueueType;
 316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_TRACE_FACILITY */
 318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if( configUSE_QUEUE_SETS == 1 )
 320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxNewQueue->pxQueueSetContainer = NULL;
 322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceQUEUE_CREATE( pxNewQueue );
 326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pxNewQueue;
 327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceQUEUE_CREATE_FAILED( ucQueueType );
 331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vPortFree( pxNewQueue );
 332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xReturn );
 337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
 339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
 345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxNewQueue;
 347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Allocate the new queue structure. */
 353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Information required for priority inheritance. */
 357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Queues used as a mutex no data is actually copied into or out
 361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			of the queue. */
 362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.pcReadFrom = NULL;
 364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Each mutex has a length of 1 (like a binary semaphore) and
 366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			an item size of 0 as nothing is actually copied into or out
 367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			of the mutex. */
 368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucQueueType = ucQueueType;
 377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#endif
 379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
 381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->pxQueueSetContainer = NULL;
 383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#endif
 385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start with the correct state. */
 387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxNewQueue );
 401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
 410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is is a good way of determining if the
 415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( ( ( xQUEUE * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( xQUEUE * ) xSemaphore )->pxMutexHolder;
 423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return pxReturn;
 432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif
 435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle xMutex )
 440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xReturn;
 442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * const pxMutex = ( xQUEUE * ) xMutex;
 443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Have we unwound the call count? */
 464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( unsigned portBASE_TYPE ) 0 )
 465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* We cannot give the mutex because we are not the holder. */
 476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
 482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle xMutex, portTickType xBlockTime )
 490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xReturn;
 492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * const pxMutex = ( xQUEUE * ) xMutex;
 493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xBlockTime, pdFALSE );
 509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if we successfully obtained the mutex,
 511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			we may have blocked to reach here. */
 512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xReturn == pdPASS )
 513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
 523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_COUNTING_SEMAPHORES == 1 )
 529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE
 531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueHandle xHandle;
 533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_CO
 535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( ( xQUEUE * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( xHandle );
 548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xHandle;
 549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_COUNTING_SEMAPHORES */
 552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, port
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xTimeOutType xTimeOut;
 558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	for( ;; )
 568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be
 572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the highest priority task wanting to access the queue.  If
 573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the head item in the queue is to be overwritten then it does
 574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			not matter if the queue is full. */
 575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
 593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							takes care of that. */
 621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Return to the original privilege level before exiting the
 630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				function. */
 631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
 632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the function. */
 643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				remove this task from the event	list again - but as the
 678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Try again. */
 695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Return to the original privilege level before exiting the
 706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			function. */
 707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueAltGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, 
 717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xTimeOutType xTimeOut;
 720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxQueue );
 723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE )
 724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ;; )
 726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Is there room on the queue now?  To be running we must be
 730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				the highest priority task wanting to access the queue. */
 731:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 733:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND( pxQueue );
 734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 735:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 737:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 740:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 742:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 743:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							our own so yield immediately. */
 744:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 745:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 746:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 748:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 749:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return pdPASS;
 750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 752:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 755:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						return errQUEUE_FULL;
 757:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 759:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xEntryTimeSet = pdTRUE;
 762:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 763:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 765:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 768:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 769:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 770:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( prvIsQueueFull( pxQueue ) != pdFALSE )
 772:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 774:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portYIELD_WITHIN_API();
 776:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 777:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 779:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 780:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 781:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 783:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 785:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 788:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 789:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 790:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 791:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 793:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueAltGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTick
 795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 796:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 797:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xTimeOutType xTimeOut;
 798:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcOriginalReadPosition;
 799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxQueue );
 802:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U )
 803:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ;; )
 805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 807:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Remember our read position in case we are just peeking. */
 811:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 812:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 813:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					prvCopyDataFromQueue( pxQueue, pvBuffer );
 814:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xJustPeeking == pdFALSE )
 816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 817:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceQUEUE_RECEIVE( pxQueue );
 818:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 819:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* Data is actually being removed (not just peeked). */
 820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						--( pxQueue->uxMessagesWaiting );
 821:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 822:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 823:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 825:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 826:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* Record the information required to implement
 827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								priority inheritance should it become necessary. */
 828:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle();
 829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 831:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#endif
 832:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 833:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 835:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 837:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 838:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 839:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 840:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 841:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
 842:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 843:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceQUEUE_PEEK( pxQueue );
 844:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 845:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* We are not removing the data, so reset our read
 846:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						pointer. */
 847:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 848:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 849:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The data is being left in the queue, so see if there are
 850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						any other tasks waiting for the data. */
 851:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 852:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* Tasks that are removed from the event list will get added to
 854:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							the pending ready list as the scheduler is still suspended. */
 855:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 856:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 857:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority than this task. */
 858:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 859:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 860:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 861:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 862:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 863:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 864:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 865:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return pdPASS;
 866:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 867:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 868:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 870:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 871:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 872:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceQUEUE_RECEIVE_FAILED( pxQueue );
 873:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						return errQUEUE_EMPTY;
 874:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 875:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 876:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 877:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 878:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xEntryTimeSet = pdTRUE;
 879:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 880:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 881:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 882:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 883:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 884:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 885:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 886:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 887:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 888:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 889:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 890:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 891:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 893:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 894:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 895:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 896:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portENTER_CRITICAL();
 897:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								{
 898:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 									vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 899:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								}
 900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portEXIT_CRITICAL();
 901:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 902:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 903:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#endif
 904:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 906:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portYIELD_WITHIN_API();
 907:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 908:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 909:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 910:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 911:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 912:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 913:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
 914:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 915:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 916:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 918:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 919:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 920:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 922:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 924:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueu
 925:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 926:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
 927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 929:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 933:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 934:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 936:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are keep permanently enabled, even
 937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 938:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 939:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 940:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 941:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 942:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 943:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 944:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 945:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 946:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 947:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 948:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 949:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 950:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except we don't block if there is no room
 951:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	in the queue.  Also we don't directly wake a task that was blocked on a
 952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	queue read, instead we return a flag to say whether a context switch is
 953:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	required or not (i.e. has a task with a higher priority than us been woken
 954:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	by this	post). */
 955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 956:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 957:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 958:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 959:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 960:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 961:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 962:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 963:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* If the queue is locked we do not alter the event list.  This will
 964:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 965:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 966:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 967:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 968:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 969:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 970:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 971:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 972:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 973:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 974:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 975:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 976:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 977:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 978:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 979:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 981:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 982:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
 983:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 984:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 985:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 986:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 987:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 988:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so record that a
 989:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								context	switch is required. */
 990:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
 991:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								{
 992:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
 993:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								}
 994:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 995:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 996:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 997:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 998:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1000:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1001:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1003:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1004:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1005:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1006:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1007:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
1008:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
1010:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1011:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1012:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1013:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1014:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1015:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1016:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1018:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1019:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xTxLock );
1020:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1021:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1022:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1023:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1026:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1027:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1028:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1029:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1030:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1032:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1033:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1034:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1035:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1036:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTi
1037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1038:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
1039:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xTimeOutType xTimeOut;
1040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed char *pcOriginalReadPosition;
1041:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
1042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
1045:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1046:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1047:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1048:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1049:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1050:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	for( ;; )
1051:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1052:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1053:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1054:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running we must be
1055:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the highest priority task wanting to access the queue. */
1056:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1057:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1058:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Remember the read position in case the queue is only being
1059:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				peeked. */
1060:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1061:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1063:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1064:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
1065:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1066:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1067:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1068:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Actually removing data, not just peeking. */
1069:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					--( pxQueue->uxMessagesWaiting );
1070:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1071:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1072:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1073:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1074:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1075:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* Record the information required to implement
1076:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							priority inheritance should it become necessary. */
1077:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is
1078:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1079:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					#endif
1081:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1082:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1083:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
1085:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1086:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
1087:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1088:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1089:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1090:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1091:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1092:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1094:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The data is not being removed, so reset the read
1095:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pointer. */
1096:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1098:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1099:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					any other tasks waiting for the data. */
1100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* Tasks that are removed from the event list will get added to
1103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						the pending ready list as the scheduler is still suspended. */
1104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
1108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
1114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
1118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portENTER_CRITICAL();
1158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portEXIT_CRITICAL();
1162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif
1165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Try again. */
1176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
1185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_EMPTY;
1186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle xQueue, const void * const pvBuffer, signed
1192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
1196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
1199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are keep permanently enabled, even
1203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
1225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			locked. */
1230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
1231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						force a context switch. */
1238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xRxLock );
1250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueuePeekFromISR( xQueueHandle xQueue, const void * const pvBuffer )
1267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed char *pcOriginalReadPosition;
1271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
1272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
1275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are keep permanently enabled, even
1279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle xQueue )
1320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxReturn;
1322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return uxReturn;
1330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxQueueSpacesAvailable( const xQueueHandle xQueue )
1334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxReturn;
1336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
1337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return uxReturn;
1346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle xQueue )
1350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxReturn;
1352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
1356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return uxReturn;
1358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** void vQueueDelete( xQueueHandle xQueue )
1362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
1364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#endif
1373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue->pcHead );
1374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
1375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue )
1381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return ( ( xQUEUE * ) xQueue )->ucQueueNumber;
1383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( xQueueHandle xQueue, unsigned char ucQueueNumber )
1391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		( ( xQUEUE * ) xQueue )->ucQueueNumber = ucQueueNumber;
1393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned char ucQueueGetQueueType( xQueueHandle xQueue )
1401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return ( ( xQUEUE * ) xQueue )->ucQueueType;
1403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
1409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
  27              		.loc 1 1409 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 38B5     		push	{r3, r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 1409 0
  40 0002 1546     		mov	r5, r2
1410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  41              		.loc 1 1410 0
  42 0004 026C     		ldr	r2, [r0, #64]
  43              	.LVL1:
1409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
  44              		.loc 1 1409 0
  45 0006 0446     		mov	r4, r0
  46              		.loc 1 1410 0
  47 0008 32B9     		cbnz	r2, .L2
1411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  48              		.loc 1 1414 0
  49 000a 0568     		ldr	r5, [r0]
  50              	.LVL2:
  51 000c 3DBB     		cbnz	r5, .L4
1415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
1417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  52              		.loc 1 1417 0
  53 000e 4068     		ldr	r0, [r0, #4]
  54              	.LVL3:
  55 0010 FFF7FEFF 		bl	vTaskPriorityDisinherit
  56              	.LVL4:
1418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
  57              		.loc 1 1418 0
  58 0014 6560     		str	r5, [r4, #4]
  59 0016 22E0     		b	.L4
  60              	.LVL5:
  61              	.L2:
1419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
  62              		.loc 1 1423 0
  63 0018 65B9     		cbnz	r5, .L5
1424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
  64              		.loc 1 1425 0
  65 001a 8068     		ldr	r0, [r0, #8]
  66              	.LVL6:
  67 001c FFF7FEFF 		bl	memcpy
  68              	.LVL7:
1426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  69              		.loc 1 1426 0
  70 0020 A268     		ldr	r2, [r4, #8]
  71 0022 236C     		ldr	r3, [r4, #64]
  72 0024 1344     		add	r3, r3, r2
1427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
  73              		.loc 1 1427 0
  74 0026 6268     		ldr	r2, [r4, #4]
1426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  75              		.loc 1 1426 0
  76 0028 A360     		str	r3, [r4, #8]
  77              		.loc 1 1427 0
  78 002a 9342     		cmp	r3, r2
  79 002c 17D3     		bcc	.L4
1428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
  80              		.loc 1 1429 0
  81 002e 2368     		ldr	r3, [r4]
  82 0030 A360     		str	r3, [r4, #8]
  83 0032 14E0     		b	.L4
  84              	.LVL8:
  85              	.L5:
1430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else
1433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
  86              		.loc 1 1434 0
  87 0034 C068     		ldr	r0, [r0, #12]
  88              	.LVL9:
  89 0036 FFF7FEFF 		bl	memcpy
  90              	.LVL10:
1435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  91              		.loc 1 1435 0
  92 003a 236C     		ldr	r3, [r4, #64]
  93 003c E268     		ldr	r2, [r4, #12]
1436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
  94              		.loc 1 1436 0
  95 003e 2168     		ldr	r1, [r4]
1435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  96              		.loc 1 1435 0
  97 0040 5B42     		negs	r3, r3
  98 0042 1A44     		add	r2, r2, r3
  99              		.loc 1 1436 0
 100 0044 8A42     		cmp	r2, r1
1435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 101              		.loc 1 1435 0
 102 0046 E260     		str	r2, [r4, #12]
 103              		.loc 1 1436 0
 104 0048 02D2     		bcs	.L7
1437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 105              		.loc 1 1438 0
 106 004a 6268     		ldr	r2, [r4, #4]
 107 004c 1344     		add	r3, r3, r2
 108 004e E360     		str	r3, [r4, #12]
 109              	.L7:
1439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
 110              		.loc 1 1441 0
 111 0050 022D     		cmp	r5, #2
 112 0052 04D1     		bne	.L4
1442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 113              		.loc 1 1443 0
 114 0054 A36B     		ldr	r3, [r4, #56]
 115 0056 13B1     		cbz	r3, .L4
1444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
1447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
1448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				correct. */
1449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
 116              		.loc 1 1449 0
 117 0058 A36B     		ldr	r3, [r4, #56]
 118 005a 013B     		subs	r3, r3, #1
 119 005c A363     		str	r3, [r4, #56]
 120              	.LVL11:
 121              	.L4:
1450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	++( pxQueue->uxMessagesWaiting );
 122              		.loc 1 1454 0
 123 005e A36B     		ldr	r3, [r4, #56]
 124 0060 0133     		adds	r3, r3, #1
 125 0062 A363     		str	r3, [r4, #56]
 126 0064 38BD     		pop	{r3, r4, r5, pc}
 127              		.cfi_endproc
 128              	.LFE12:
 130              		.align	1
 131              		.thumb
 132              		.thumb_func
 134              	prvCopyDataFromQueue:
 135              	.LFB13:
1455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
1459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 136              		.loc 1 1459 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140              	.LVL12:
 141 0066 70B5     		push	{r4, r5, r6, lr}
 142              	.LCFI1:
 143              		.cfi_def_cfa_offset 16
 144              		.cfi_offset 4, -16
 145              		.cfi_offset 5, -12
 146              		.cfi_offset 6, -8
 147              		.cfi_offset 14, -4
1460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 148              		.loc 1 1460 0
 149 0068 0468     		ldr	r4, [r0]
1459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 150              		.loc 1 1459 0
 151 006a 0346     		mov	r3, r0
 152              		.loc 1 1460 0
 153 006c 6CB1     		cbz	r4, .L12
1461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 154              		.loc 1 1462 0
 155 006e C568     		ldr	r5, [r0, #12]
 156 0070 026C     		ldr	r2, [r0, #64]
1463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 157              		.loc 1 1463 0
 158 0072 4668     		ldr	r6, [r0, #4]
1462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 159              		.loc 1 1462 0
 160 0074 1544     		add	r5, r5, r2
 161              		.loc 1 1463 0
 162 0076 B542     		cmp	r5, r6
1462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 163              		.loc 1 1462 0
 164 0078 C560     		str	r5, [r0, #12]
1464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 165              		.loc 1 1465 0
 166 007a 28BF     		it	cs
 167 007c C460     		strcs	r4, [r0, #12]
1466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 168              		.loc 1 1469 0
 169 007e BDE87040 		pop	{r4, r5, r6, lr}
1467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
 170              		.loc 1 1467 0
 171 0082 0846     		mov	r0, r1
 172              	.LVL13:
 173 0084 D968     		ldr	r1, [r3, #12]
 174              	.LVL14:
 175 0086 FFF7FEBF 		b	memcpy
 176              	.LVL15:
 177              	.L12:
 178 008a 70BD     		pop	{r4, r5, r6, pc}
 179              		.cfi_endproc
 180              	.LFE13:
 182              		.align	1
 183              		.thumb
 184              		.thumb_func
 186              	prvUnlockQueue:
 187              	.LFB14:
1470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( xQUEUE *pxQueue )
1473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 188              		.loc 1 1473 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              	.LVL16:
 193 008c 10B5     		push	{r4, lr}
 194              	.LCFI2:
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 4, -8
 197              		.cfi_offset 14, -4
 198              		.loc 1 1473 0
 199 008e 0446     		mov	r4, r0
1474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	updated. */
1480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 200              		.loc 1 1480 0
 201 0090 FFF7FEFF 		bl	vPortEnterCritical
 202              	.LVL17:
 203              	.L16:
1481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 204              		.loc 1 1483 0 discriminator 1
 205 0094 A36C     		ldr	r3, [r4, #72]
 206 0096 002B     		cmp	r3, #0
 207 0098 0CDD     		ble	.L17
1484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
1487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						A context switch is required. */
1496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get added to
1502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the pending ready list as the scheduler is still suspended. */
1503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
1510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
1513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						break;
1515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 208              		.loc 1 1522 0
 209 009a 636A     		ldr	r3, [r4, #36]
 210 009c 53B1     		cbz	r3, .L17
1523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 211              		.loc 1 1524 0
 212 009e 04F12400 		add	r0, r4, #36
 213 00a2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 214              	.LVL18:
 215 00a6 08B1     		cbz	r0, .L18
1525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that a
1527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						context	switch is required. */
1528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
 216              		.loc 1 1528 0
 217 00a8 FFF7FEFF 		bl	vTaskMissedYield
 218              	.LVL19:
 219              	.L18:
1529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					break;
1534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->xTxLock );
 220              		.loc 1 1538 0
 221 00ac A36C     		ldr	r3, [r4, #72]
 222 00ae 013B     		subs	r3, r3, #1
 223 00b0 A364     		str	r3, [r4, #72]
 224 00b2 EFE7     		b	.L16
 225              	.L17:
1539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 226              		.loc 1 1541 0
 227 00b4 4FF0FF33 		mov	r3, #-1
 228 00b8 A364     		str	r3, [r4, #72]
1542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 229              		.loc 1 1543 0
 230 00ba FFF7FEFF 		bl	vPortExitCritical
 231              	.LVL20:
1544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
1546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 232              		.loc 1 1546 0
 233 00be FFF7FEFF 		bl	vPortEnterCritical
 234              	.LVL21:
 235              	.L20:
1547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 236              		.loc 1 1548 0 discriminator 1
 237 00c2 636C     		ldr	r3, [r4, #68]
 238 00c4 002B     		cmp	r3, #0
 239 00c6 0CDD     		ble	.L21
1549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 240              		.loc 1 1550 0
 241 00c8 2369     		ldr	r3, [r4, #16]
 242 00ca 53B1     		cbz	r3, .L21
1551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 243              		.loc 1 1552 0
 244 00cc 04F11000 		add	r0, r4, #16
 245 00d0 FFF7FEFF 		bl	xTaskRemoveFromEventList
 246              	.LVL22:
 247 00d4 08B1     		cbz	r0, .L22
1553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
 248              		.loc 1 1554 0
 249 00d6 FFF7FEFF 		bl	vTaskMissedYield
 250              	.LVL23:
 251              	.L22:
1555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->xRxLock );
 252              		.loc 1 1557 0
 253 00da 636C     		ldr	r3, [r4, #68]
 254 00dc 013B     		subs	r3, r3, #1
 255 00de 6364     		str	r3, [r4, #68]
 256 00e0 EFE7     		b	.L20
 257              	.L21:
1558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				break;
1562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 258              		.loc 1 1565 0
 259 00e2 4FF0FF33 		mov	r3, #-1
 260 00e6 6364     		str	r3, [r4, #68]
1566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 261              		.loc 1 1568 0
 262 00e8 BDE81040 		pop	{r4, lr}
 263              	.LVL24:
1567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 264              		.loc 1 1567 0
 265 00ec FFF7FEBF 		b	vPortExitCritical
 266              	.LVL25:
 267              		.cfi_endproc
 268              	.LFE14:
 270              		.align	1
 271              		.global	xQueueGenericReset
 272              		.thumb
 273              		.thumb_func
 275              	xQueueGenericReset:
 276              	.LFB0:
 240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 277              		.loc 1 240 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              	.LVL26:
 282 00f0 38B5     		push	{r3, r4, r5, lr}
 283              	.LCFI3:
 284              		.cfi_def_cfa_offset 16
 285              		.cfi_offset 3, -16
 286              		.cfi_offset 4, -12
 287              		.cfi_offset 5, -8
 288              		.cfi_offset 14, -4
 240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 289              		.loc 1 240 0
 290 00f2 0D46     		mov	r5, r1
 243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 291              		.loc 1 243 0
 292 00f4 0446     		mov	r4, r0
 293 00f6 10B9     		cbnz	r0, .L37
 243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 294              		.loc 1 243 0 is_stmt 0 discriminator 1
 295 00f8 FFF7FEFF 		bl	ulPortSetInterruptMask
 296              	.LVL27:
 297              	.L38:
 298 00fc FEE7     		b	.L38
 299              	.LVL28:
 300              	.L37:
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 301              		.loc 1 245 0 is_stmt 1
 302 00fe FFF7FEFF 		bl	vPortEnterCritical
 303              	.LVL29:
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 304              		.loc 1 247 0
 305 0102 226C     		ldr	r2, [r4, #64]
 306 0104 E06B     		ldr	r0, [r4, #60]
 307 0106 2368     		ldr	r3, [r4]
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 308              		.loc 1 249 0
 309 0108 A360     		str	r3, [r4, #8]
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 310              		.loc 1 247 0
 311 010a 5043     		muls	r0, r2, r0
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U )
 312              		.loc 1 250 0
 313 010c 821A     		subs	r2, r0, r2
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 314              		.loc 1 247 0
 315 010e 1918     		adds	r1, r3, r0
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U )
 316              		.loc 1 250 0
 317 0110 1344     		add	r3, r3, r2
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 318              		.loc 1 247 0
 319 0112 6160     		str	r1, [r4, #4]
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U )
 320              		.loc 1 250 0
 321 0114 E360     		str	r3, [r4, #12]
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 322              		.loc 1 248 0
 323 0116 0021     		movs	r1, #0
 251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 324              		.loc 1 251 0
 325 0118 4FF0FF33 		mov	r3, #-1
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 326              		.loc 1 248 0
 327 011c A163     		str	r1, [r4, #56]
 251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 328              		.loc 1 251 0
 329 011e 6364     		str	r3, [r4, #68]
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 330              		.loc 1 252 0
 331 0120 A364     		str	r3, [r4, #72]
 254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 332              		.loc 1 254 0
 333 0122 55B9     		cbnz	r5, .L39
 261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 334              		.loc 1 261 0
 335 0124 2369     		ldr	r3, [r4, #16]
 336 0126 83B1     		cbz	r3, .L41
 263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 337              		.loc 1 263 0
 338 0128 04F11000 		add	r0, r4, #16
 339 012c FFF7FEFF 		bl	xTaskRemoveFromEventList
 340              	.LVL30:
 341 0130 0128     		cmp	r0, #1
 342 0132 0AD1     		bne	.L41
 265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 343              		.loc 1 265 0
 344 0134 FFF7FEFF 		bl	vPortYield
 345              	.LVL31:
 346 0138 07E0     		b	.L41
 347              	.L39:
 272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 348              		.loc 1 272 0
 349 013a 04F11000 		add	r0, r4, #16
 350 013e FFF7FEFF 		bl	vListInitialise
 351              	.LVL32:
 273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 352              		.loc 1 273 0
 353 0142 04F12400 		add	r0, r4, #36
 354 0146 FFF7FEFF 		bl	vListInitialise
 355              	.LVL33:
 356              	.L41:
 276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 357              		.loc 1 276 0
 358 014a FFF7FEFF 		bl	vPortExitCritical
 359              	.LVL34:
 281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 360              		.loc 1 281 0
 361 014e 0120     		movs	r0, #1
 362 0150 38BD     		pop	{r3, r4, r5, pc}
 363              		.cfi_endproc
 364              	.LFE0:
 366              		.align	1
 367              		.global	xQueueGenericCreate
 368              		.thumb
 369              		.thumb_func
 371              	xQueueGenericCreate:
 372              	.LFB1:
 285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 373              		.loc 1 285 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              	.LVL35:
 378 0152 70B5     		push	{r4, r5, r6, lr}
 379              	.LCFI4:
 380              		.cfi_def_cfa_offset 16
 381              		.cfi_offset 4, -16
 382              		.cfi_offset 5, -12
 383              		.cfi_offset 6, -8
 384              		.cfi_offset 14, -4
 285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 385              		.loc 1 285 0
 386 0154 0E46     		mov	r6, r1
 295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 387              		.loc 1 295 0
 388 0156 0546     		mov	r5, r0
 389 0158 70B1     		cbz	r0, .L46
 297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 390              		.loc 1 297 0
 391 015a 4C20     		movs	r0, #76
 392              	.LVL36:
 393 015c FFF7FEFF 		bl	pvPortMalloc
 394              	.LVL37:
 298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 395              		.loc 1 298 0
 396 0160 0446     		mov	r4, r0
 397 0162 48B1     		cbz	r0, .L46
 398              	.LVL38:
 302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA
 399              		.loc 1 302 0
 400 0164 06FB05F0 		mul	r0, r6, r5
 401              	.LVL39:
 304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 402              		.loc 1 304 0
 403 0168 0130     		adds	r0, r0, #1
 404              	.LVL40:
 405 016a FFF7FEFF 		bl	pvPortMalloc
 406              	.LVL41:
 407 016e 2060     		str	r0, [r4]
 305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxNewQueue->pcHead != NULL )
 408              		.loc 1 305 0
 409 0170 28B9     		cbnz	r0, .L56
 331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vPortFree( pxNewQueue );
 410              		.loc 1 331 0
 411 0172 2046     		mov	r0, r4
 412 0174 FFF7FEFF 		bl	vPortFree
 413              	.LVL42:
 414              	.L46:
 336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xReturn );
 415              		.loc 1 336 0
 416 0178 FFF7FEFF 		bl	ulPortSetInterruptMask
 417              	.LVL43:
 418              	.L48:
 419 017c FEE7     		b	.L48
 420              	.LVL44:
 421              	.L56:
 309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxLength = uxQueueLength;
 422              		.loc 1 309 0
 423 017e E563     		str	r5, [r4, #60]
 310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxItemSize = uxItemSize;
 424              		.loc 1 310 0
 425 0180 2664     		str	r6, [r4, #64]
 311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 426              		.loc 1 311 0
 427 0182 2046     		mov	r0, r4
 428 0184 0121     		movs	r1, #1
 429 0186 FFF7FEFF 		bl	xQueueGenericReset
 430              	.LVL45:
 339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 431              		.loc 1 339 0
 432 018a 2046     		mov	r0, r4
 433 018c 70BD     		pop	{r4, r5, r6, pc}
 434              		.cfi_endproc
 435              	.LFE1:
 437              		.align	1
 438              		.global	xQueueGenericSend
 439              		.thumb
 440              		.thumb_func
 442              	xQueueGenericSend:
 443              	.LFB3:
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 444              		.loc 1 555 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 16
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              	.LVL46:
 449 018e 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 450              	.LCFI5:
 451              		.cfi_def_cfa_offset 40
 452              		.cfi_offset 0, -40
 453              		.cfi_offset 1, -36
 454              		.cfi_offset 2, -32
 455              		.cfi_offset 3, -28
 456              		.cfi_offset 4, -24
 457              		.cfi_offset 5, -20
 458              		.cfi_offset 6, -16
 459              		.cfi_offset 7, -12
 460              		.cfi_offset 8, -8
 461              		.cfi_offset 14, -4
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 462              		.loc 1 555 0
 463 0192 0E46     		mov	r6, r1
 464 0194 0192     		str	r2, [sp, #4]
 465 0196 1D46     		mov	r5, r3
 560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 466              		.loc 1 560 0
 467 0198 0446     		mov	r4, r0
 468 019a 10B9     		cbnz	r0, .L58
 560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 469              		.loc 1 560 0 is_stmt 0 discriminator 1
 470 019c FFF7FEFF 		bl	ulPortSetInterruptMask
 471              	.LVL47:
 472              	.L59:
 473 01a0 FEE7     		b	.L59
 474              	.LVL48:
 475              	.L58:
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 476              		.loc 1 561 0 is_stmt 1
 477 01a2 21B9     		cbnz	r1, .L60
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 478              		.loc 1 561 0 is_stmt 0 discriminator 2
 479 01a4 036C     		ldr	r3, [r0, #64]
 480              	.LVL49:
 481 01a6 13B1     		cbz	r3, .L60
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 482              		.loc 1 561 0
 483 01a8 FFF7FEFF 		bl	ulPortSetInterruptMask
 484              	.LVL50:
 485              	.L79:
 486 01ac FEE7     		b	.L79
 487              	.LVL51:
 488              	.L60:
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 489              		.loc 1 562 0 is_stmt 1
 490 01ae 022D     		cmp	r5, #2
 491 01b0 02D1     		bne	.L80
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 492              		.loc 1 562 0 is_stmt 0 discriminator 2
 493 01b2 E36B     		ldr	r3, [r4, #60]
 494 01b4 012B     		cmp	r3, #1
 495 01b6 64D1     		bne	.L63
 496              	.L80:
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 497              		.loc 1 555 0 is_stmt 1
 498 01b8 0027     		movs	r7, #0
 499              	.LVL52:
 500              	.L64:
 569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 501              		.loc 1 569 0
 502 01ba FFF7FEFF 		bl	vPortEnterCritical
 503              	.LVL53:
 575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 504              		.loc 1 575 0
 505 01be A26B     		ldr	r2, [r4, #56]
 506 01c0 E36B     		ldr	r3, [r4, #60]
 507 01c2 9A42     		cmp	r2, r3
 508 01c4 01D3     		bcc	.L66
 575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 509              		.loc 1 575 0 is_stmt 0 discriminator 1
 510 01c6 022D     		cmp	r5, #2
 511 01c8 12D1     		bne	.L67
 512              	.L66:
 578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 513              		.loc 1 578 0 is_stmt 1
 514 01ca 2046     		mov	r0, r4
 515 01cc 3146     		mov	r1, r6
 516 01ce 2A46     		mov	r2, r5
 517 01d0 FFF716FF 		bl	prvCopyDataToQueue
 518              	.LVL54:
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 519              		.loc 1 613 0
 520 01d4 636A     		ldr	r3, [r4, #36]
 521 01d6 3BB1     		cbz	r3, .L69
 615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 522              		.loc 1 615 0
 523 01d8 04F12400 		add	r0, r4, #36
 524 01dc FFF7FEFF 		bl	xTaskRemoveFromEventList
 525              	.LVL55:
 526 01e0 0128     		cmp	r0, #1
 527 01e2 01D1     		bne	.L69
 621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 528              		.loc 1 621 0
 529 01e4 FFF7FEFF 		bl	vPortYield
 530              	.LVL56:
 531              	.L69:
 627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 532              		.loc 1 627 0
 533 01e8 FFF7FEFF 		bl	vPortExitCritical
 534              	.LVL57:
 631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
 535              		.loc 1 631 0
 536 01ec 0120     		movs	r0, #1
 537 01ee 4BE0     		b	.L87
 538              	.L67:
 635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 539              		.loc 1 635 0
 540 01f0 DDF80480 		ldr	r8, [sp, #4]
 541 01f4 B8F1000F 		cmp	r8, #0
 542 01f8 02D1     		bne	.L72
 639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 543              		.loc 1 639 0
 544 01fa FFF7FEFF 		bl	vPortExitCritical
 545              	.LVL58:
 546 01fe 3EE0     		b	.L89
 547              	.L72:
 646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 548              		.loc 1 646 0
 549 0200 17B9     		cbnz	r7, .L73
 650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 550              		.loc 1 650 0
 551 0202 02A8     		add	r0, sp, #8
 552 0204 FFF7FEFF 		bl	vTaskSetTimeOutState
 553              	.LVL59:
 554              	.L73:
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 555              		.loc 1 659 0
 556 0208 FFF7FEFF 		bl	vPortExitCritical
 557              	.LVL60:
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 558              		.loc 1 664 0
 559 020c FFF7FEFF 		bl	vTaskSuspendAll
 560              	.LVL61:
 665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 561              		.loc 1 665 0
 562 0210 FFF7FEFF 		bl	vPortEnterCritical
 563              	.LVL62:
 564 0214 636C     		ldr	r3, [r4, #68]
 565 0216 0133     		adds	r3, r3, #1
 566 0218 04BF     		itt	eq
 567 021a 0023     		moveq	r3, #0
 568 021c 6364     		streq	r3, [r4, #68]
 569 021e A36C     		ldr	r3, [r4, #72]
 570 0220 0133     		adds	r3, r3, #1
 571 0222 04BF     		itt	eq
 572 0224 0023     		moveq	r3, #0
 573 0226 A364     		streq	r3, [r4, #72]
 574 0228 FFF7FEFF 		bl	vPortExitCritical
 575              	.LVL63:
 668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 576              		.loc 1 668 0
 577 022c 02A8     		add	r0, sp, #8
 578 022e 01A9     		add	r1, sp, #4
 579              	.LVL64:
 580 0230 FFF7FEFF 		bl	xTaskCheckForTimeOut
 581              	.LVL65:
 582 0234 F0B9     		cbnz	r0, .L76
 583              	.LVL66:
 584              	.LBB4:
 585              	.LBB5:
1569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
1572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
1578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
1584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle xQueue )
1593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( ( ( xQUEUE * ) xQueue )->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 )
1598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
1600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else
1602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
1604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
1611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 586              		.loc 1 1614 0
 587 0236 FFF7FEFF 		bl	vPortEnterCritical
 588              	.LVL67:
1615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 589              		.loc 1 1616 0
 590 023a D4F83880 		ldr	r8, [r4, #56]
 591 023e E76B     		ldr	r7, [r4, #60]
 592              	.LVL68:
1617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
1623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 593              		.loc 1 1625 0
 594 0240 FFF7FEFF 		bl	vPortExitCritical
 595              	.LVL69:
 596              	.LBE5:
 597              	.LBE4:
 670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 598              		.loc 1 670 0
 599 0244 B845     		cmp	r8, r7
 600 0246 0FD1     		bne	.L77
 673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 601              		.loc 1 673 0
 602 0248 04F11000 		add	r0, r4, #16
 603 024c 0199     		ldr	r1, [sp, #4]
 604 024e FFF7FEFF 		bl	vTaskPlaceOnEventList
 605              	.LVL70:
 680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 606              		.loc 1 680 0
 607 0252 2046     		mov	r0, r4
 608 0254 FFF71AFF 		bl	prvUnlockQueue
 609              	.LVL71:
 687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 610              		.loc 1 687 0
 611 0258 FFF7FEFF 		bl	xTaskResumeAll
 612              	.LVL72:
 613 025c 08B1     		cbz	r0, .L90
 614              	.LVL73:
 615              	.L78:
 616 025e 0127     		movs	r7, #1
 617 0260 ABE7     		b	.L64
 618              	.LVL74:
 619              	.L90:
 689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 620              		.loc 1 689 0
 621 0262 FFF7FEFF 		bl	vPortYield
 622              	.LVL75:
 623 0266 FAE7     		b	.L78
 624              	.L77:
 625              	.LVL76:
 695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 626              		.loc 1 695 0
 627 0268 2046     		mov	r0, r4
 628 026a FFF70FFF 		bl	prvUnlockQueue
 629              	.LVL77:
 696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 630              		.loc 1 696 0
 631 026e FFF7FEFF 		bl	xTaskResumeAll
 632              	.LVL78:
 633 0272 F4E7     		b	.L78
 634              	.LVL79:
 635              	.L76:
 702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 636              		.loc 1 702 0
 637 0274 2046     		mov	r0, r4
 638 0276 FFF709FF 		bl	prvUnlockQueue
 639              	.LVL80:
 703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 640              		.loc 1 703 0
 641 027a FFF7FEFF 		bl	xTaskResumeAll
 642              	.LVL81:
 643              	.L89:
 708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 644              		.loc 1 708 0
 645 027e 0020     		movs	r0, #0
 646 0280 02E0     		b	.L87
 647              	.LVL82:
 648              	.L63:
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 649              		.loc 1 562 0
 650 0282 FFF7FEFF 		bl	ulPortSetInterruptMask
 651              	.LVL83:
 652              	.L82:
 653 0286 FEE7     		b	.L82
 654              	.LVL84:
 655              	.L87:
 711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 656              		.loc 1 711 0
 657 0288 04B0     		add	sp, sp, #16
 658              	.LVL85:
 659              		@ sp needed
 660 028a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 661              		.cfi_endproc
 662              	.LFE3:
 664              		.align	1
 665              		.global	xQueueCreateMutex
 666              		.thumb
 667              		.thumb_func
 669              	xQueueCreateMutex:
 670              	.LFB2:
 345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 671              		.loc 1 345 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              	.LVL86:
 676 028e 38B5     		push	{r3, r4, r5, lr}
 677              	.LCFI6:
 678              		.cfi_def_cfa_offset 16
 679              		.cfi_offset 3, -16
 680              		.cfi_offset 4, -12
 681              		.cfi_offset 5, -8
 682              		.cfi_offset 14, -4
 353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 683              		.loc 1 353 0
 684 0290 4C20     		movs	r0, #76
 685              	.LVL87:
 686 0292 FFF7FEFF 		bl	pvPortMalloc
 687              	.LVL88:
 354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 688              		.loc 1 354 0
 689 0296 0446     		mov	r4, r0
 690 0298 10B9     		cbnz	r0, .L97
 400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxNewQueue );
 691              		.loc 1 400 0
 692 029a FFF7FEFF 		bl	ulPortSetInterruptMask
 693              	.LVL89:
 694              	.L94:
 695 029e FEE7     		b	.L94
 696              	.LVL90:
 697              	.L97:
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 698              		.loc 1 369 0
 699 02a0 0123     		movs	r3, #1
 357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 700              		.loc 1 357 0
 701 02a2 0025     		movs	r5, #0
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 702              		.loc 1 369 0
 703 02a4 C363     		str	r3, [r0, #60]
 371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 704              		.loc 1 371 0
 705 02a6 4FF0FF33 		mov	r3, #-1
 368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 706              		.loc 1 368 0
 707 02aa 8563     		str	r5, [r0, #56]
 357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 708              		.loc 1 357 0
 709 02ac 4560     		str	r5, [r0, #4]
 371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 710              		.loc 1 371 0
 711 02ae 4364     		str	r3, [r0, #68]
 358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 712              		.loc 1 358 0
 713 02b0 0560     		str	r5, [r0]
 372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 714              		.loc 1 372 0
 715 02b2 8364     		str	r3, [r0, #72]
 362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 716              		.loc 1 362 0
 717 02b4 8560     		str	r5, [r0, #8]
 363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.pcReadFrom = NULL;
 718              		.loc 1 363 0
 719 02b6 C560     		str	r5, [r0, #12]
 370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 720              		.loc 1 370 0
 721 02b8 0564     		str	r5, [r0, #64]
 387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 722              		.loc 1 387 0
 723 02ba 1030     		adds	r0, r0, #16
 724              	.LVL91:
 725 02bc FFF7FEFF 		bl	vListInitialise
 726              	.LVL92:
 388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 727              		.loc 1 388 0
 728 02c0 04F12400 		add	r0, r4, #36
 729 02c4 FFF7FEFF 		bl	vListInitialise
 730              	.LVL93:
 393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 731              		.loc 1 393 0
 732 02c8 2046     		mov	r0, r4
 733 02ca 2946     		mov	r1, r5
 734 02cc 2A46     		mov	r2, r5
 735 02ce 2B46     		mov	r3, r5
 736 02d0 FFF7FEFF 		bl	xQueueGenericSend
 737              	.LVL94:
 402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 738              		.loc 1 402 0
 739 02d4 2046     		mov	r0, r4
 740 02d6 38BD     		pop	{r3, r4, r5, pc}
 741              		.cfi_endproc
 742              	.LFE2:
 744              		.align	1
 745              		.global	xQueueGenericSendFromISR
 746              		.thumb
 747              		.thumb_func
 749              	xQueueGenericSendFromISR:
 750              	.LFB4:
 925:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 751              		.loc 1 925 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755              	.LVL95:
 756 02d8 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 757              	.LCFI7:
 758              		.cfi_def_cfa_offset 24
 759              		.cfi_offset 4, -24
 760              		.cfi_offset 5, -20
 761              		.cfi_offset 6, -16
 762              		.cfi_offset 7, -12
 763              		.cfi_offset 8, -8
 764              		.cfi_offset 14, -4
 925:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 765              		.loc 1 925 0
 766 02dc 0F46     		mov	r7, r1
 767 02de 1646     		mov	r6, r2
 768 02e0 1D46     		mov	r5, r3
 930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 769              		.loc 1 930 0
 770 02e2 0446     		mov	r4, r0
 771 02e4 10B9     		cbnz	r0, .L99
 930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 772              		.loc 1 930 0 is_stmt 0 discriminator 1
 773 02e6 FFF7FEFF 		bl	ulPortSetInterruptMask
 774              	.LVL96:
 775              	.L100:
 776 02ea FEE7     		b	.L100
 777              	.LVL97:
 778              	.L99:
 931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 779              		.loc 1 931 0 is_stmt 1
 780 02ec 21B9     		cbnz	r1, .L101
 931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 781              		.loc 1 931 0 is_stmt 0 discriminator 2
 782 02ee 036C     		ldr	r3, [r0, #64]
 783              	.LVL98:
 784 02f0 13B1     		cbz	r3, .L101
 931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 785              		.loc 1 931 0
 786 02f2 FFF7FEFF 		bl	ulPortSetInterruptMask
 787              	.LVL99:
 788              	.L111:
 789 02f6 FEE7     		b	.L111
 790              	.LVL100:
 791              	.L101:
 932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 792              		.loc 1 932 0 is_stmt 1
 793 02f8 022D     		cmp	r5, #2
 794 02fa 05D1     		bne	.L104
 932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 795              		.loc 1 932 0 is_stmt 0 discriminator 2
 796 02fc E36B     		ldr	r3, [r4, #60]
 797 02fe 012B     		cmp	r3, #1
 798 0300 02D0     		beq	.L104
 932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 799              		.loc 1 932 0
 800 0302 FFF7FEFF 		bl	ulPortSetInterruptMask
 801              	.LVL101:
 802              	.L113:
 803 0306 FEE7     		b	.L113
 804              	.LVL102:
 805              	.L104:
 948:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806              		.loc 1 948 0 is_stmt 1
 807 0308 FFF7FEFF 		bl	vPortValidateInterruptPriority
 808              	.LVL103:
 955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 809              		.loc 1 955 0
 810 030c FFF7FEFF 		bl	ulPortSetInterruptMask
 811              	.LVL104:
 957:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 812              		.loc 1 957 0
 813 0310 A26B     		ldr	r2, [r4, #56]
 814 0312 E36B     		ldr	r3, [r4, #60]
 815 0314 9A42     		cmp	r2, r3
 955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 816              		.loc 1 955 0
 817 0316 8046     		mov	r8, r0
 818              	.LVL105:
 957:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 819              		.loc 1 957 0
 820 0318 01D3     		bcc	.L114
 957:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 821              		.loc 1 957 0 is_stmt 0 discriminator 1
 822 031a 022D     		cmp	r5, #2
 823 031c 17D1     		bne	.L116
 824              	.L114:
 961:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 825              		.loc 1 961 0 is_stmt 1
 826 031e 2046     		mov	r0, r4
 827              	.LVL106:
 828 0320 3946     		mov	r1, r7
 829 0322 2A46     		mov	r2, r5
 830 0324 FFF76CFE 		bl	prvCopyDataToQueue
 831              	.LVL107:
 965:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 832              		.loc 1 965 0
 833 0328 A36C     		ldr	r3, [r4, #72]
 834 032a 0133     		adds	r3, r3, #1
 835 032c 0AD1     		bne	.L108
1000:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 836              		.loc 1 1000 0
 837 032e 636A     		ldr	r3, [r4, #36]
 838 0330 5BB1     		cbz	r3, .L134
1002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 839              		.loc 1 1002 0
 840 0332 04F12400 		add	r0, r4, #36
 841 0336 FFF7FEFF 		bl	xTaskRemoveFromEventList
 842              	.LVL108:
 843 033a 30B1     		cbz	r0, .L134
1006:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 844              		.loc 1 1006 0
 845 033c 2EB1     		cbz	r6, .L134
1008:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 846              		.loc 1 1008 0
 847 033e 0124     		movs	r4, #1
 848              	.LVL109:
 849 0340 3460     		str	r4, [r6]
 850 0342 05E0     		b	.L107
 851              	.LVL110:
 852              	.L108:
1019:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xTxLock );
 853              		.loc 1 1019 0
 854 0344 A36C     		ldr	r3, [r4, #72]
 855 0346 0133     		adds	r3, r3, #1
 856 0348 A364     		str	r3, [r4, #72]
 857              	.L134:
1022:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 858              		.loc 1 1022 0
 859 034a 0124     		movs	r4, #1
 860              	.LVL111:
 861 034c 00E0     		b	.L107
 862              	.LVL112:
 863              	.L116:
1027:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 864              		.loc 1 1027 0
 865 034e 0024     		movs	r4, #0
 866              	.LVL113:
 867              	.L107:
1030:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 868              		.loc 1 1030 0
 869 0350 4046     		mov	r0, r8
 870 0352 FFF7FEFF 		bl	vPortClearInterruptMask
 871              	.LVL114:
1033:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 872              		.loc 1 1033 0
 873 0356 2046     		mov	r0, r4
 874 0358 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 875              		.cfi_endproc
 876              	.LFE4:
 878              		.align	1
 879              		.global	xQueueGenericReceive
 880              		.thumb
 881              		.thumb_func
 883              	xQueueGenericReceive:
 884              	.LFB5:
1037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 885              		.loc 1 1037 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 16
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889              	.LVL115:
 890 035c 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 891              	.LCFI8:
 892              		.cfi_def_cfa_offset 40
 893              		.cfi_offset 0, -40
 894              		.cfi_offset 1, -36
 895              		.cfi_offset 2, -32
 896              		.cfi_offset 3, -28
 897              		.cfi_offset 4, -24
 898              		.cfi_offset 5, -20
 899              		.cfi_offset 6, -16
 900              		.cfi_offset 7, -12
 901              		.cfi_offset 8, -8
 902              		.cfi_offset 14, -4
1037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 903              		.loc 1 1037 0
 904 0360 0D46     		mov	r5, r1
 905 0362 0192     		str	r2, [sp, #4]
 906 0364 9846     		mov	r8, r3
1043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 907              		.loc 1 1043 0
 908 0366 0446     		mov	r4, r0
 909 0368 10B9     		cbnz	r0, .L136
1043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 910              		.loc 1 1043 0 is_stmt 0 discriminator 1
 911 036a FFF7FEFF 		bl	ulPortSetInterruptMask
 912              	.LVL116:
 913              	.L137:
 914 036e FEE7     		b	.L137
 915              	.LVL117:
 916              	.L136:
1044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 917              		.loc 1 1044 0 is_stmt 1
 918 0370 11B9     		cbnz	r1, .L138
1044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 919              		.loc 1 1044 0 is_stmt 0 discriminator 2
 920 0372 036C     		ldr	r3, [r0, #64]
 921              	.LVL118:
 922 0374 002B     		cmp	r3, #0
 923 0376 78D1     		bne	.L139
 924              	.L138:
1037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 925              		.loc 1 1037 0 is_stmt 1
 926 0378 0026     		movs	r6, #0
 927              	.LVL119:
 928              	.L140:
1052:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 929              		.loc 1 1052 0
 930 037a FFF7FEFF 		bl	vPortEnterCritical
 931              	.LVL120:
1056:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 932              		.loc 1 1056 0
 933 037e A36B     		ldr	r3, [r4, #56]
 934 0380 3BB3     		cbz	r3, .L142
1062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 935              		.loc 1 1062 0
 936 0382 2046     		mov	r0, r4
 937 0384 2946     		mov	r1, r5
1060:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 938              		.loc 1 1060 0
 939 0386 E668     		ldr	r6, [r4, #12]
 940              	.LVL121:
1062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 941              		.loc 1 1062 0
 942 0388 FFF76DFE 		bl	prvCopyDataFromQueue
 943              	.LVL122:
1064:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
 944              		.loc 1 1064 0
 945 038c B8F1000F 		cmp	r8, #0
 946 0390 12D1     		bne	.L143
1069:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					--( pxQueue->uxMessagesWaiting );
 947              		.loc 1 1069 0
 948 0392 A36B     		ldr	r3, [r4, #56]
 949 0394 013B     		subs	r3, r3, #1
 950 0396 A363     		str	r3, [r4, #56]
1073:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 951              		.loc 1 1073 0
 952 0398 2368     		ldr	r3, [r4]
 953 039a 13B9     		cbnz	r3, .L144
1077:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is
 954              		.loc 1 1077 0
 955 039c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 956              	.LVL123:
 957 03a0 6060     		str	r0, [r4, #4]
 958              	.L144:
1082:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 959              		.loc 1 1082 0
 960 03a2 2369     		ldr	r3, [r4, #16]
 961 03a4 8BB1     		cbz	r3, .L146
1084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 962              		.loc 1 1084 0
 963 03a6 04F11000 		add	r0, r4, #16
 964 03aa FFF7FEFF 		bl	xTaskRemoveFromEventList
 965              	.LVL124:
 966 03ae 0128     		cmp	r0, #1
 967 03b0 0BD1     		bne	.L146
 968              	.L148:
1086:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 969              		.loc 1 1086 0
 970 03b2 FFF7FEFF 		bl	vPortYield
 971              	.LVL125:
 972 03b6 08E0     		b	.L146
 973              	.L143:
1100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 974              		.loc 1 1100 0
 975 03b8 636A     		ldr	r3, [r4, #36]
1096:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 976              		.loc 1 1096 0
 977 03ba E660     		str	r6, [r4, #12]
1100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 978              		.loc 1 1100 0
 979 03bc 2BB1     		cbz	r3, .L146
1104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 980              		.loc 1 1104 0
 981 03be 04F12400 		add	r0, r4, #36
 982 03c2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 983              	.LVL126:
 984 03c6 0028     		cmp	r0, #0
 985 03c8 F3D1     		bne	.L148
 986              	.L146:
1112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 987              		.loc 1 1112 0
 988 03ca FFF7FEFF 		bl	vPortExitCritical
 989              	.LVL127:
1113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
 990              		.loc 1 1113 0
 991 03ce 0120     		movs	r0, #1
 992 03d0 4EE0     		b	.L162
 993              	.LVL128:
 994              	.L142:
1117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 995              		.loc 1 1117 0
 996 03d2 019F     		ldr	r7, [sp, #4]
 997 03d4 17B9     		cbnz	r7, .L150
1121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 998              		.loc 1 1121 0
 999 03d6 FFF7FEFF 		bl	vPortExitCritical
 1000              	.LVL129:
 1001 03da 44E0     		b	.L163
 1002              	.L150:
1125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1003              		.loc 1 1125 0
 1004 03dc 16B9     		cbnz	r6, .L151
1129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 1005              		.loc 1 1129 0
 1006 03de 02A8     		add	r0, sp, #8
 1007 03e0 FFF7FEFF 		bl	vTaskSetTimeOutState
 1008              	.LVL130:
 1009              	.L151:
1138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 1010              		.loc 1 1138 0
 1011 03e4 FFF7FEFF 		bl	vPortExitCritical
 1012              	.LVL131:
1143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 1013              		.loc 1 1143 0
 1014 03e8 FFF7FEFF 		bl	vTaskSuspendAll
 1015              	.LVL132:
1144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1016              		.loc 1 1144 0
 1017 03ec FFF7FEFF 		bl	vPortEnterCritical
 1018              	.LVL133:
 1019 03f0 636C     		ldr	r3, [r4, #68]
 1020 03f2 0133     		adds	r3, r3, #1
 1021 03f4 04BF     		itt	eq
 1022 03f6 0023     		moveq	r3, #0
 1023 03f8 6364     		streq	r3, [r4, #68]
 1024 03fa A36C     		ldr	r3, [r4, #72]
 1025 03fc 0133     		adds	r3, r3, #1
 1026 03fe 04BF     		itt	eq
 1027 0400 0023     		moveq	r3, #0
 1028 0402 A364     		streq	r3, [r4, #72]
 1029 0404 FFF7FEFF 		bl	vPortExitCritical
 1030              	.LVL134:
1147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1031              		.loc 1 1147 0
 1032 0408 02A8     		add	r0, sp, #8
 1033 040a 01A9     		add	r1, sp, #4
 1034              	.LVL135:
 1035 040c FFF7FEFF 		bl	xTaskCheckForTimeOut
 1036              	.LVL136:
 1037 0410 20BB     		cbnz	r0, .L154
 1038              	.LVL137:
 1039              	.LBB8:
 1040              	.LBB9:
1575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1041              		.loc 1 1575 0
 1042 0412 FFF7FEFF 		bl	vPortEnterCritical
 1043              	.LVL138:
1577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 1044              		.loc 1 1577 0
 1045 0416 A66B     		ldr	r6, [r4, #56]
 1046              	.LVL139:
1586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1047              		.loc 1 1586 0
 1048 0418 FFF7FEFF 		bl	vPortExitCritical
 1049              	.LVL140:
 1050              	.LBE9:
 1051              	.LBE8:
1149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1052              		.loc 1 1149 0
 1053 041c C6B9     		cbnz	r6, .L155
1155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1054              		.loc 1 1155 0
 1055 041e 2368     		ldr	r3, [r4]
 1056 0420 33B9     		cbnz	r3, .L156
1157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portENTER_CRITICAL();
 1057              		.loc 1 1157 0
 1058 0422 FFF7FEFF 		bl	vPortEnterCritical
 1059              	.LVL141:
1159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 1060              		.loc 1 1159 0
 1061 0426 6068     		ldr	r0, [r4, #4]
 1062 0428 FFF7FEFF 		bl	vTaskPriorityInherit
 1063              	.LVL142:
1161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portEXIT_CRITICAL();
 1064              		.loc 1 1161 0
 1065 042c FFF7FEFF 		bl	vPortExitCritical
 1066              	.LVL143:
 1067              	.L156:
1166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1068              		.loc 1 1166 0
 1069 0430 04F12400 		add	r0, r4, #36
 1070 0434 0199     		ldr	r1, [sp, #4]
 1071 0436 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1072              	.LVL144:
1167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1073              		.loc 1 1167 0
 1074 043a 2046     		mov	r0, r4
 1075 043c FFF726FE 		bl	prvUnlockQueue
 1076              	.LVL145:
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1077              		.loc 1 1168 0
 1078 0440 FFF7FEFF 		bl	xTaskResumeAll
 1079              	.LVL146:
 1080 0444 08B1     		cbz	r0, .L164
 1081              	.LVL147:
 1082              	.L157:
 1083 0446 0126     		movs	r6, #1
 1084 0448 97E7     		b	.L140
 1085              	.LVL148:
 1086              	.L164:
1170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 1087              		.loc 1 1170 0
 1088 044a FFF7FEFF 		bl	vPortYield
 1089              	.LVL149:
 1090 044e FAE7     		b	.L157
 1091              	.L155:
 1092              	.LVL150:
1176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1093              		.loc 1 1176 0
 1094 0450 2046     		mov	r0, r4
 1095 0452 FFF71BFE 		bl	prvUnlockQueue
 1096              	.LVL151:
1177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1097              		.loc 1 1177 0
 1098 0456 FFF7FEFF 		bl	xTaskResumeAll
 1099              	.LVL152:
 1100 045a F4E7     		b	.L157
 1101              	.LVL153:
 1102              	.L154:
1182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1103              		.loc 1 1182 0
 1104 045c 2046     		mov	r0, r4
 1105 045e FFF715FE 		bl	prvUnlockQueue
 1106              	.LVL154:
1183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1107              		.loc 1 1183 0
 1108 0462 FFF7FEFF 		bl	xTaskResumeAll
 1109              	.LVL155:
 1110              	.L163:
1185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_EMPTY;
 1111              		.loc 1 1185 0
 1112 0466 0020     		movs	r0, #0
 1113 0468 02E0     		b	.L162
 1114              	.LVL156:
 1115              	.L139:
1044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1116              		.loc 1 1044 0
 1117 046a FFF7FEFF 		bl	ulPortSetInterruptMask
 1118              	.LVL157:
 1119              	.L158:
 1120 046e FEE7     		b	.L158
 1121              	.LVL158:
 1122              	.L162:
1188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1123              		.loc 1 1188 0
 1124 0470 04B0     		add	sp, sp, #16
 1125              	.LVL159:
 1126              		@ sp needed
 1127 0472 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1128              		.cfi_endproc
 1129              	.LFE5:
 1131              		.align	1
 1132              		.global	xQueueReceiveFromISR
 1133              		.thumb
 1134              		.thumb_func
 1136              	xQueueReceiveFromISR:
 1137              	.LFB6:
1192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1138              		.loc 1 1192 0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 1142              	.LVL160:
 1143 0476 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1144              	.LCFI9:
 1145              		.cfi_def_cfa_offset 24
 1146              		.cfi_offset 3, -24
 1147              		.cfi_offset 4, -20
 1148              		.cfi_offset 5, -16
 1149              		.cfi_offset 6, -12
 1150              		.cfi_offset 7, -8
 1151              		.cfi_offset 14, -4
1192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1152              		.loc 1 1192 0
 1153 0478 0E46     		mov	r6, r1
 1154 047a 1546     		mov	r5, r2
1197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1155              		.loc 1 1197 0
 1156 047c 0446     		mov	r4, r0
 1157 047e 10B9     		cbnz	r0, .L166
1197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1158              		.loc 1 1197 0 is_stmt 0 discriminator 1
 1159 0480 FFF7FEFF 		bl	ulPortSetInterruptMask
 1160              	.LVL161:
 1161              	.L167:
 1162 0484 FEE7     		b	.L167
 1163              	.LVL162:
 1164              	.L166:
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1165              		.loc 1 1198 0 is_stmt 1
 1166 0486 21B9     		cbnz	r1, .L168
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1167              		.loc 1 1198 0 is_stmt 0 discriminator 2
 1168 0488 036C     		ldr	r3, [r0, #64]
 1169 048a 13B1     		cbz	r3, .L168
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1170              		.loc 1 1198 0
 1171 048c FFF7FEFF 		bl	ulPortSetInterruptMask
 1172              	.LVL163:
 1173              	.L175:
 1174 0490 FEE7     		b	.L175
 1175              	.LVL164:
 1176              	.L168:
1214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1177              		.loc 1 1214 0 is_stmt 1
 1178 0492 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1179              	.LVL165:
1216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1180              		.loc 1 1216 0
 1181 0496 FFF7FEFF 		bl	ulPortSetInterruptMask
 1182              	.LVL166:
1219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1183              		.loc 1 1219 0
 1184 049a A36B     		ldr	r3, [r4, #56]
1216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1185              		.loc 1 1216 0
 1186 049c 0746     		mov	r7, r0
 1187              	.LVL167:
1219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1188              		.loc 1 1219 0
 1189 049e CBB1     		cbz	r3, .L189
1223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1190              		.loc 1 1223 0
 1191 04a0 2046     		mov	r0, r4
 1192              	.LVL168:
 1193 04a2 3146     		mov	r1, r6
 1194 04a4 FFF7DFFD 		bl	prvCopyDataFromQueue
 1195              	.LVL169:
1224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 1196              		.loc 1 1224 0
 1197 04a8 A36B     		ldr	r3, [r4, #56]
 1198 04aa 013B     		subs	r3, r3, #1
 1199 04ac A363     		str	r3, [r4, #56]
1230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
 1200              		.loc 1 1230 0
 1201 04ae 636C     		ldr	r3, [r4, #68]
 1202 04b0 0133     		adds	r3, r3, #1
 1203 04b2 0AD1     		bne	.L171
1232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1204              		.loc 1 1232 0
 1205 04b4 2369     		ldr	r3, [r4, #16]
 1206 04b6 5BB1     		cbz	r3, .L188
1234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1207              		.loc 1 1234 0
 1208 04b8 04F11000 		add	r0, r4, #16
 1209 04bc FFF7FEFF 		bl	xTaskRemoveFromEventList
 1210              	.LVL170:
 1211 04c0 30B1     		cbz	r0, .L188
1238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 1212              		.loc 1 1238 0
 1213 04c2 2DB1     		cbz	r5, .L188
1240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 1214              		.loc 1 1240 0
 1215 04c4 0124     		movs	r4, #1
 1216              	.LVL171:
 1217 04c6 2C60     		str	r4, [r5]
 1218 04c8 05E0     		b	.L173
 1219              	.LVL172:
 1220              	.L171:
1249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xRxLock );
 1221              		.loc 1 1249 0
 1222 04ca 636C     		ldr	r3, [r4, #68]
 1223 04cc 0133     		adds	r3, r3, #1
 1224 04ce 6364     		str	r3, [r4, #68]
 1225              	.L188:
1252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1226              		.loc 1 1252 0
 1227 04d0 0124     		movs	r4, #1
 1228              	.LVL173:
 1229 04d2 00E0     		b	.L173
 1230              	.LVL174:
 1231              	.L189:
1256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 1232              		.loc 1 1256 0
 1233 04d4 1C46     		mov	r4, r3
 1234              	.LVL175:
 1235              	.L173:
1260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1236              		.loc 1 1260 0
 1237 04d6 3846     		mov	r0, r7
 1238 04d8 FFF7FEFF 		bl	vPortClearInterruptMask
 1239              	.LVL176:
1263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1240              		.loc 1 1263 0
 1241 04dc 2046     		mov	r0, r4
 1242 04de F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1243              		.cfi_endproc
 1244              	.LFE6:
 1246              		.align	1
 1247              		.global	xQueuePeekFromISR
 1248              		.thumb
 1249              		.thumb_func
 1251              	xQueuePeekFromISR:
 1252              	.LFB7:
1267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1253              		.loc 1 1267 0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 0
 1256              		@ frame_needed = 0, uses_anonymous_args = 0
 1257              	.LVL177:
 1258 04e0 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1259              	.LCFI10:
 1260              		.cfi_def_cfa_offset 24
 1261              		.cfi_offset 3, -24
 1262              		.cfi_offset 4, -20
 1263              		.cfi_offset 5, -16
 1264              		.cfi_offset 6, -12
 1265              		.cfi_offset 7, -8
 1266              		.cfi_offset 14, -4
1267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1267              		.loc 1 1267 0
 1268 04e2 0D46     		mov	r5, r1
1273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1269              		.loc 1 1273 0
 1270 04e4 0446     		mov	r4, r0
 1271 04e6 10B9     		cbnz	r0, .L191
1273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1272              		.loc 1 1273 0 is_stmt 0 discriminator 1
 1273 04e8 FFF7FEFF 		bl	ulPortSetInterruptMask
 1274              	.LVL178:
 1275              	.L192:
 1276 04ec FEE7     		b	.L192
 1277              	.LVL179:
 1278              	.L191:
1274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1279              		.loc 1 1274 0 is_stmt 1
 1280 04ee 21B9     		cbnz	r1, .L193
1274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1281              		.loc 1 1274 0 is_stmt 0 discriminator 2
 1282 04f0 036C     		ldr	r3, [r0, #64]
 1283 04f2 13B1     		cbz	r3, .L193
1274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1284              		.loc 1 1274 0
 1285 04f4 FFF7FEFF 		bl	ulPortSetInterruptMask
 1286              	.LVL180:
 1287              	.L196:
 1288 04f8 FEE7     		b	.L196
 1289              	.LVL181:
 1290              	.L193:
1290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1291              		.loc 1 1290 0 is_stmt 1
 1292 04fa FFF7FEFF 		bl	vPortValidateInterruptPriority
 1293              	.LVL182:
1292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1294              		.loc 1 1292 0
 1295 04fe FFF7FEFF 		bl	ulPortSetInterruptMask
 1296              	.LVL183:
1295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1297              		.loc 1 1295 0
 1298 0502 A36B     		ldr	r3, [r4, #56]
1292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1299              		.loc 1 1292 0
 1300 0504 0746     		mov	r7, r0
 1301              	.LVL184:
1295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1302              		.loc 1 1295 0
 1303 0506 3BB1     		cbz	r3, .L204
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1304              		.loc 1 1301 0
 1305 0508 E668     		ldr	r6, [r4, #12]
 1306              	.LVL185:
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1307              		.loc 1 1302 0
 1308 050a 2046     		mov	r0, r4
 1309              	.LVL186:
 1310 050c 2946     		mov	r1, r5
 1311 050e FFF7AAFD 		bl	prvCopyDataFromQueue
 1312              	.LVL187:
1303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1313              		.loc 1 1303 0
 1314 0512 E660     		str	r6, [r4, #12]
 1315              	.LVL188:
1305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1316              		.loc 1 1305 0
 1317 0514 0124     		movs	r4, #1
 1318              	.LVL189:
 1319 0516 00E0     		b	.L198
 1320              	.LVL190:
 1321              	.L204:
1309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 1322              		.loc 1 1309 0
 1323 0518 1C46     		mov	r4, r3
 1324              	.LVL191:
 1325              	.L198:
1313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1326              		.loc 1 1313 0
 1327 051a 3846     		mov	r0, r7
 1328 051c FFF7FEFF 		bl	vPortClearInterruptMask
 1329              	.LVL192:
1316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1330              		.loc 1 1316 0
 1331 0520 2046     		mov	r0, r4
 1332 0522 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1333              		.cfi_endproc
 1334              	.LFE7:
 1336              		.align	1
 1337              		.global	uxQueueMessagesWaiting
 1338              		.thumb
 1339              		.thumb_func
 1341              	uxQueueMessagesWaiting:
 1342              	.LFB8:
1320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1343              		.loc 1 1320 0
 1344              		.cfi_startproc
 1345              		@ args = 0, pretend = 0, frame = 0
 1346              		@ frame_needed = 0, uses_anonymous_args = 0
 1347              	.LVL193:
 1348 0524 10B5     		push	{r4, lr}
 1349              	.LCFI11:
 1350              		.cfi_def_cfa_offset 8
 1351              		.cfi_offset 4, -8
 1352              		.cfi_offset 14, -4
1323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1353              		.loc 1 1323 0
 1354 0526 0446     		mov	r4, r0
 1355 0528 10B9     		cbnz	r0, .L206
1323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1356              		.loc 1 1323 0 is_stmt 0 discriminator 1
 1357 052a FFF7FEFF 		bl	ulPortSetInterruptMask
 1358              	.LVL194:
 1359              	.L207:
 1360 052e FEE7     		b	.L207
 1361              	.LVL195:
 1362              	.L206:
1325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1363              		.loc 1 1325 0 is_stmt 1
 1364 0530 FFF7FEFF 		bl	vPortEnterCritical
 1365              	.LVL196:
1326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
 1366              		.loc 1 1326 0
 1367 0534 A46B     		ldr	r4, [r4, #56]
 1368              	.LVL197:
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1369              		.loc 1 1327 0
 1370 0536 FFF7FEFF 		bl	vPortExitCritical
 1371              	.LVL198:
1330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1372              		.loc 1 1330 0
 1373 053a 2046     		mov	r0, r4
 1374 053c 10BD     		pop	{r4, pc}
 1375              		.cfi_endproc
 1376              	.LFE8:
 1378              		.align	1
 1379              		.global	uxQueueSpacesAvailable
 1380              		.thumb
 1381              		.thumb_func
 1383              	uxQueueSpacesAvailable:
 1384              	.LFB9:
1334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1385              		.loc 1 1334 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 1389              	.LVL199:
 1390 053e 10B5     		push	{r4, lr}
 1391              	.LCFI12:
 1392              		.cfi_def_cfa_offset 8
 1393              		.cfi_offset 4, -8
 1394              		.cfi_offset 14, -4
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1395              		.loc 1 1339 0
 1396 0540 0446     		mov	r4, r0
 1397 0542 10B9     		cbnz	r0, .L209
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1398              		.loc 1 1339 0 is_stmt 0 discriminator 1
 1399 0544 FFF7FEFF 		bl	ulPortSetInterruptMask
 1400              	.LVL200:
 1401              	.L210:
 1402 0548 FEE7     		b	.L210
 1403              	.LVL201:
 1404              	.L209:
1341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1405              		.loc 1 1341 0 is_stmt 1
 1406 054a FFF7FEFF 		bl	vPortEnterCritical
 1407              	.LVL202:
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 1408              		.loc 1 1342 0
 1409 054e A36B     		ldr	r3, [r4, #56]
 1410 0550 E46B     		ldr	r4, [r4, #60]
 1411              	.LVL203:
 1412 0552 E41A     		subs	r4, r4, r3
 1413              	.LVL204:
1343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1414              		.loc 1 1343 0
 1415 0554 FFF7FEFF 		bl	vPortExitCritical
 1416              	.LVL205:
1346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1417              		.loc 1 1346 0
 1418 0558 2046     		mov	r0, r4
 1419 055a 10BD     		pop	{r4, pc}
 1420              		.cfi_endproc
 1421              	.LFE9:
 1423              		.align	1
 1424              		.global	uxQueueMessagesWaitingFromISR
 1425              		.thumb
 1426              		.thumb_func
 1428              	uxQueueMessagesWaitingFromISR:
 1429              	.LFB10:
1350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1430              		.loc 1 1350 0
 1431              		.cfi_startproc
 1432              		@ args = 0, pretend = 0, frame = 0
 1433              		@ frame_needed = 0, uses_anonymous_args = 0
 1434              	.LVL206:
 1435 055c 08B5     		push	{r3, lr}
 1436              	.LCFI13:
 1437              		.cfi_def_cfa_offset 8
 1438              		.cfi_offset 3, -8
 1439              		.cfi_offset 14, -4
1353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1440              		.loc 1 1353 0
 1441 055e 10B9     		cbnz	r0, .L212
1353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1442              		.loc 1 1353 0 is_stmt 0 discriminator 1
 1443 0560 FFF7FEFF 		bl	ulPortSetInterruptMask
 1444              	.LVL207:
 1445              	.L213:
 1446 0564 FEE7     		b	.L213
 1447              	.LVL208:
 1448              	.L212:
1355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
 1449              		.loc 1 1355 0 is_stmt 1
 1450 0566 806B     		ldr	r0, [r0, #56]
 1451              	.LVL209:
1358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1452              		.loc 1 1358 0
 1453 0568 08BD     		pop	{r3, pc}
 1454              		.cfi_endproc
 1455              	.LFE10:
 1457              		.align	1
 1458              		.global	vQueueDelete
 1459              		.thumb
 1460              		.thumb_func
 1462              	vQueueDelete:
 1463              	.LFB11:
1362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1464              		.loc 1 1362 0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 0
 1467              		@ frame_needed = 0, uses_anonymous_args = 0
 1468              	.LVL210:
 1469 056a 10B5     		push	{r4, lr}
 1470              	.LCFI14:
 1471              		.cfi_def_cfa_offset 8
 1472              		.cfi_offset 4, -8
 1473              		.cfi_offset 14, -4
1365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1474              		.loc 1 1365 0
 1475 056c 0446     		mov	r4, r0
 1476 056e 10B9     		cbnz	r0, .L215
1365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1477              		.loc 1 1365 0 is_stmt 0 discriminator 1
 1478 0570 FFF7FEFF 		bl	ulPortSetInterruptMask
 1479              	.LVL211:
 1480              	.L216:
 1481 0574 FEE7     		b	.L216
 1482              	.LVL212:
 1483              	.L215:
1373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue->pcHead );
 1484              		.loc 1 1373 0 is_stmt 1
 1485 0576 0068     		ldr	r0, [r0]
 1486              	.LVL213:
 1487 0578 FFF7FEFF 		bl	vPortFree
 1488              	.LVL214:
1374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
 1489              		.loc 1 1374 0
 1490 057c 2046     		mov	r0, r4
1375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1491              		.loc 1 1375 0
 1492 057e BDE81040 		pop	{r4, lr}
 1493              	.LVL215:
1374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
 1494              		.loc 1 1374 0
 1495 0582 FFF7FEBF 		b	vPortFree
 1496              	.LVL216:
 1497              		.cfi_endproc
 1498              	.LFE11:
 1500              		.align	1
 1501              		.global	xQueueIsQueueEmptyFromISR
 1502              		.thumb
 1503              		.thumb_func
 1505              	xQueueIsQueueEmptyFromISR:
 1506              	.LFB16:
1593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1507              		.loc 1 1593 0
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 0
 1510              		@ frame_needed = 0, uses_anonymous_args = 0
 1511              	.LVL217:
 1512 0586 08B5     		push	{r3, lr}
 1513              	.LCFI15:
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 3, -8
 1516              		.cfi_offset 14, -4
1596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1517              		.loc 1 1596 0
 1518 0588 10B9     		cbnz	r0, .L218
1596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1519              		.loc 1 1596 0 is_stmt 0 discriminator 1
 1520 058a FFF7FEFF 		bl	ulPortSetInterruptMask
 1521              	.LVL218:
 1522              	.L219:
 1523 058e FEE7     		b	.L219
 1524              	.LVL219:
 1525              	.L218:
1597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( ( ( xQUEUE * ) xQueue )->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 )
 1526              		.loc 1 1597 0 is_stmt 1
 1527 0590 806B     		ldr	r0, [r0, #56]
 1528              	.LVL220:
1607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 1529              		.loc 1 1607 0
 1530 0592 D0F10100 		rsbs	r0, r0, #1
 1531              	.LVL221:
 1532 0596 38BF     		it	cc
 1533 0598 0020     		movcc	r0, #0
 1534 059a 08BD     		pop	{r3, pc}
 1535              		.cfi_endproc
 1536              	.LFE16:
 1538              		.align	1
 1539              		.global	xQueueIsQueueFullFromISR
 1540              		.thumb
 1541              		.thumb_func
 1543              	xQueueIsQueueFullFromISR:
 1544              	.LFB18:
1626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle xQueue )
1632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1545              		.loc 1 1632 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 0, uses_anonymous_args = 0
 1549              	.LVL222:
 1550 059c 08B5     		push	{r3, lr}
 1551              	.LCFI16:
 1552              		.cfi_def_cfa_offset 8
 1553              		.cfi_offset 3, -8
 1554              		.cfi_offset 14, -4
1633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1555              		.loc 1 1635 0
 1556 059e 10B9     		cbnz	r0, .L221
 1557              		.loc 1 1635 0 is_stmt 0 discriminator 1
 1558 05a0 FFF7FEFF 		bl	ulPortSetInterruptMask
 1559              	.LVL223:
 1560              	.L222:
 1561 05a4 FEE7     		b	.L222
 1562              	.LVL224:
 1563              	.L221:
1636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( ( ( xQUEUE * ) xQueue )->uxMessagesWaiting == ( ( xQUEUE * ) xQueue )->uxLength )
 1564              		.loc 1 1636 0 is_stmt 1
 1565 05a6 826B     		ldr	r2, [r0, #56]
 1566              	.LVL225:
 1567 05a8 C06B     		ldr	r0, [r0, #60]
 1568              	.LVL226:
1637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
1639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else
1641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
1643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 1569              		.loc 1 1646 0
 1570 05aa 131A     		subs	r3, r2, r0
 1571 05ac 5842     		rsbs	r0, r3, #0
 1572              	.LVL227:
 1573 05ae 5841     		adcs	r0, r0, r3
 1574 05b0 08BD     		pop	{r3, pc}
 1575              		.cfi_endproc
 1576              	.LFE18:
 1578              		.align	1
 1579              		.global	xQueueCRSend
 1580              		.thumb
 1581              		.thumb_func
 1583              	xQueueCRSend:
 1584              	.LFB19:
1647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRSend( xQueueHandle xQueue, const void *pvItemToQueue, portTickType xT
1652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1585              		.loc 1 1652 0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 0
 1588              		@ frame_needed = 0, uses_anonymous_args = 0
 1589              	.LVL228:
 1590 05b2 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1591              	.LCFI17:
 1592              		.cfi_def_cfa_offset 24
 1593              		.cfi_offset 4, -24
 1594              		.cfi_offset 5, -20
 1595              		.cfi_offset 6, -16
 1596              		.cfi_offset 7, -12
 1597              		.cfi_offset 8, -8
 1598              		.cfi_offset 14, -4
 1599              		.loc 1 1652 0
 1600 05b6 0446     		mov	r4, r0
 1601              	.LVL229:
 1602 05b8 0E46     		mov	r6, r1
 1603 05ba 1546     		mov	r5, r2
1653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xReturn;
1654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
1655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
1657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
1658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
1659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1604              		.loc 1 1659 0
 1605 05bc FFF7FEFF 		bl	ulPortSetInterruptMask
 1606              	.LVL230:
 1607              	.LBB12:
 1608              	.LBB13:
1614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1609              		.loc 1 1614 0
 1610 05c0 FFF7FEFF 		bl	vPortEnterCritical
 1611              	.LVL231:
1616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1612              		.loc 1 1616 0
 1613 05c4 D4F83880 		ldr	r8, [r4, #56]
 1614 05c8 E76B     		ldr	r7, [r4, #60]
 1615              	.LVL232:
1625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1616              		.loc 1 1625 0
 1617 05ca FFF7FEFF 		bl	vPortExitCritical
 1618              	.LVL233:
 1619              	.LBE13:
 1620              	.LBE12:
1660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1621              		.loc 1 1661 0
 1622 05ce B845     		cmp	r8, r7
 1623 05d0 0CD1     		bne	.L224
1662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
1664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				posting? */
1665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
1666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
1668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
1669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
 1624              		.loc 1 1669 0
 1625 05d2 2846     		mov	r0, r5
1665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
 1626              		.loc 1 1665 0
 1627 05d4 3DB3     		cbz	r5, .L234
 1628              		.loc 1 1669 0
 1629 05d6 04F11001 		add	r1, r4, #16
 1630 05da FFF7FEFF 		bl	vCoRoutineAddToDelayedList
 1631              	.LVL234:
1670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
 1632              		.loc 1 1670 0
 1633 05de 0020     		movs	r0, #0
 1634 05e0 FFF7FEFF 		bl	vPortClearInterruptMask
 1635              	.LVL235:
1671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
 1636              		.loc 1 1671 0
 1637 05e4 6FF00300 		mvn	r0, #3
 1638 05e8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1639              	.LVL236:
 1640              	.L224:
1672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
1676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
1677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1641              		.loc 1 1680 0
 1642 05ec 0020     		movs	r0, #0
 1643 05ee FFF7FEFF 		bl	vPortClearInterruptMask
 1644              	.LVL237:
1681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1645              		.loc 1 1682 0
 1646 05f2 FFF7FEFF 		bl	ulPortSetInterruptMask
 1647              	.LVL238:
1683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 1648              		.loc 1 1684 0
 1649 05f6 A26B     		ldr	r2, [r4, #56]
 1650 05f8 E36B     		ldr	r3, [r4, #60]
 1651 05fa 9A42     		cmp	r2, r3
 1652 05fc 11D2     		bcs	.L230
1685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
1687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
 1653              		.loc 1 1687 0
 1654 05fe 2046     		mov	r0, r4
 1655 0600 3146     		mov	r1, r6
 1656 0602 0022     		movs	r2, #0
 1657 0604 FFF7FCFC 		bl	prvCopyDataToQueue
 1658              	.LVL239:
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
1689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
1691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1659              		.loc 1 1691 0
 1660 0608 636A     		ldr	r3, [r4, #36]
 1661 060a 0BB9     		cbnz	r3, .L228
 1662              	.L229:
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
 1663              		.loc 1 1688 0
 1664 060c 0125     		movs	r5, #1
 1665              	.LVL240:
 1666 060e 09E0     		b	.L227
 1667              	.LVL241:
 1668              	.L228:
1692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
1694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
1695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
1696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
1697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1669              		.loc 1 1697 0
 1670 0610 04F12400 		add	r0, r4, #36
 1671 0614 FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1672              	.LVL242:
 1673 0618 0028     		cmp	r0, #0
 1674 061a F7D0     		beq	.L229
1698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
1700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
1701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
 1675              		.loc 1 1701 0
 1676 061c 6FF00405 		mvn	r5, #4
 1677              	.LVL243:
 1678 0620 00E0     		b	.L227
 1679              	.LVL244:
 1680              	.L230:
1702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
 1681              		.loc 1 1707 0
 1682 0622 0025     		movs	r5, #0
 1683              	.LVL245:
 1684              	.L227:
1708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1685              		.loc 1 1710 0
 1686 0624 0020     		movs	r0, #0
 1687              	.LVL246:
 1688              	.L234:
 1689 0626 FFF7FEFF 		bl	vPortClearInterruptMask
 1690              	.LVL247:
1711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
 1691              		.loc 1 1712 0
 1692 062a 2846     		mov	r0, r5
1713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1693              		.loc 1 1713 0
 1694 062c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1695              		.cfi_endproc
 1696              	.LFE19:
 1698              		.align	1
 1699              		.global	xQueueCRReceive
 1700              		.thumb
 1701              		.thumb_func
 1703              	xQueueCRReceive:
 1704              	.LFB20:
1714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRReceive( xQueueHandle xQueue, void *pvBuffer, portTickType xTicksToWa
1721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1705              		.loc 1 1721 0
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 0
 1708              		@ frame_needed = 0, uses_anonymous_args = 0
 1709              	.LVL248:
 1710 0630 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1711              	.LCFI18:
 1712              		.cfi_def_cfa_offset 24
 1713              		.cfi_offset 3, -24
 1714              		.cfi_offset 4, -20
 1715              		.cfi_offset 5, -16
 1716              		.cfi_offset 6, -12
 1717              		.cfi_offset 7, -8
 1718              		.cfi_offset 14, -4
 1719              		.loc 1 1721 0
 1720 0632 0446     		mov	r4, r0
 1721              	.LVL249:
 1722 0634 0F46     		mov	r7, r1
 1723 0636 1546     		mov	r5, r2
1722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xReturn;
1723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
1724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
1726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
1727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
1728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1724              		.loc 1 1728 0
 1725 0638 FFF7FEFF 		bl	ulPortSetInterruptMask
 1726              	.LVL250:
1729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 )
 1727              		.loc 1 1730 0
 1728 063c A66B     		ldr	r6, [r4, #56]
 1729 063e 5EB9     		cbnz	r6, .L236
1731:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
1733:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				leave with nothing? */
1734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
1735:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
1737:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
1738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
 1730              		.loc 1 1738 0
 1731 0640 2846     		mov	r0, r5
1734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
 1732              		.loc 1 1734 0
 1733 0642 6DB3     		cbz	r5, .L247
 1734              		.loc 1 1738 0
 1735 0644 04F12401 		add	r1, r4, #36
 1736 0648 FFF7FEFF 		bl	vCoRoutineAddToDelayedList
 1737              	.LVL251:
1739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
 1738              		.loc 1 1739 0
 1739 064c 3046     		mov	r0, r6
 1740 064e FFF7FEFF 		bl	vPortClearInterruptMask
 1741              	.LVL252:
1740:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
 1742              		.loc 1 1740 0
 1743 0652 6FF00300 		mvn	r0, #3
 1744 0656 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1745              	.LVL253:
 1746              	.L236:
1741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1742:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1743:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1744:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
1745:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
1746:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1748:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1749:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1747              		.loc 1 1749 0
 1748 0658 0020     		movs	r0, #0
 1749 065a FFF7FEFF 		bl	vPortClearInterruptMask
 1750              	.LVL254:
1750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1751              		.loc 1 1751 0
 1752 065e FFF7FEFF 		bl	ulPortSetInterruptMask
 1753              	.LVL255:
1752:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1754              		.loc 1 1753 0
 1755 0662 A56B     		ldr	r5, [r4, #56]
 1756              	.LVL256:
 1757 0664 DDB1     		cbz	r5, .L239
1754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1755:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
1756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 1758              		.loc 1 1756 0
 1759 0666 E368     		ldr	r3, [r4, #12]
 1760 0668 226C     		ldr	r2, [r4, #64]
1757:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
 1761              		.loc 1 1757 0
 1762 066a 6168     		ldr	r1, [r4, #4]
1756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 1763              		.loc 1 1756 0
 1764 066c 1344     		add	r3, r3, r2
 1765              		.loc 1 1757 0
 1766 066e 8B42     		cmp	r3, r1
1756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 1767              		.loc 1 1756 0
 1768 0670 E360     		str	r3, [r4, #12]
1758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1759:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
 1769              		.loc 1 1759 0
 1770 0672 24BF     		itt	cs
 1771 0674 2368     		ldrcs	r3, [r4]
 1772 0676 E360     		strcs	r3, [r4, #12]
1760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
 1773              		.loc 1 1761 0
 1774 0678 A36B     		ldr	r3, [r4, #56]
1762:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
 1775              		.loc 1 1762 0
 1776 067a E168     		ldr	r1, [r4, #12]
1761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
 1777              		.loc 1 1761 0
 1778 067c 013B     		subs	r3, r3, #1
 1779 067e A363     		str	r3, [r4, #56]
 1780              		.loc 1 1762 0
 1781 0680 3846     		mov	r0, r7
 1782 0682 FFF7FEFF 		bl	memcpy
 1783              	.LVL257:
1763:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
1765:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
1767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1784              		.loc 1 1767 0
 1785 0686 2369     		ldr	r3, [r4, #16]
 1786 0688 0BB9     		cbnz	r3, .L241
 1787              	.L242:
1764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
 1788              		.loc 1 1764 0
 1789 068a 0125     		movs	r5, #1
 1790 068c 07E0     		b	.L239
 1791              	.L241:
1768:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1769:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
1770:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
1771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
1772:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
1773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1792              		.loc 1 1773 0
 1793 068e 04F11000 		add	r0, r4, #16
 1794 0692 FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1795              	.LVL258:
 1796 0696 0028     		cmp	r0, #0
 1797 0698 F7D0     		beq	.L242
1774:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
 1798              		.loc 1 1775 0
 1799 069a 6FF00405 		mvn	r5, #4
 1800              	.LVL259:
 1801              	.L239:
1776:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1777:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1779:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1780:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1781:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
1782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1783:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1802              		.loc 1 1784 0
 1803 069e 0020     		movs	r0, #0
 1804              	.LVL260:
 1805              	.L247:
 1806 06a0 FFF7FEFF 		bl	vPortClearInterruptMask
 1807              	.LVL261:
1785:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
 1808              		.loc 1 1786 0
 1809 06a4 2846     		mov	r0, r5
1787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1810              		.loc 1 1787 0
 1811 06a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1812              		.cfi_endproc
 1813              	.LFE20:
 1815              		.align	1
 1816              		.global	xQueueCRSendFromISR
 1817              		.thumb
 1818              		.thumb_func
 1820              	xQueueCRSendFromISR:
 1821              	.LFB21:
1788:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1789:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1790:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1791:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1793:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRSendFromISR( xQueueHandle xQueue, const void *pvItemToQueue, signed p
1795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1822              		.loc 1 1795 0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 0
 1825              		@ frame_needed = 0, uses_anonymous_args = 0
 1826              	.LVL262:
 1827 06a8 38B5     		push	{r3, r4, r5, lr}
 1828              	.LCFI19:
 1829              		.cfi_def_cfa_offset 16
 1830              		.cfi_offset 3, -16
 1831              		.cfi_offset 4, -12
 1832              		.cfi_offset 5, -8
 1833              		.cfi_offset 14, -4
 1834              		.loc 1 1795 0
 1835 06aa 1546     		mov	r5, r2
1796:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
1797:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1798:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
1799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
1800:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 1836              		.loc 1 1800 0
 1837 06ac C36B     		ldr	r3, [r0, #60]
 1838 06ae 826B     		ldr	r2, [r0, #56]
 1839              	.LVL263:
 1840 06b0 9A42     		cmp	r2, r3
1795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1841              		.loc 1 1795 0
 1842 06b2 0446     		mov	r4, r0
 1843              		.loc 1 1800 0
 1844 06b4 01D3     		bcc	.L249
 1845              	.LVL264:
 1846              	.L251:
 1847 06b6 2846     		mov	r0, r5
 1848 06b8 38BD     		pop	{r3, r4, r5, pc}
 1849              	.LVL265:
 1850              	.L249:
1801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1802:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
 1851              		.loc 1 1802 0
 1852 06ba 0022     		movs	r2, #0
 1853 06bc FFF7A0FC 		bl	prvCopyDataToQueue
 1854              	.LVL266:
1803:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
1805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
1806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
 1855              		.loc 1 1806 0
 1856 06c0 002D     		cmp	r5, #0
 1857 06c2 F8D1     		bne	.L251
1807:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1858              		.loc 1 1808 0
 1859 06c4 606A     		ldr	r0, [r4, #36]
 1860 06c6 30B1     		cbz	r0, .L250
1809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1861              		.loc 1 1810 0
 1862 06c8 04F12400 		add	r0, r4, #36
 1863 06cc FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1864              	.LVL267:
 1865 06d0 0030     		adds	r0, r0, #0
 1866 06d2 18BF     		it	ne
 1867 06d4 0120     		movne	r0, #1
 1868              	.L250:
1811:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1812:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						return pdTRUE;
1813:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1814:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1817:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1818:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
1819:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1869              		.loc 1 1819 0
 1870 06d6 38BD     		pop	{r3, r4, r5, pc}
 1871              		.cfi_endproc
 1872              	.LFE21:
 1874              		.align	1
 1875              		.global	xQueueCRReceiveFromISR
 1876              		.thumb
 1877              		.thumb_func
 1879              	xQueueCRReceiveFromISR:
 1880              	.LFB22:
1820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1821:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1822:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1823:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1825:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1826:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRReceiveFromISR( xQueueHandle xQueue, void *pvBuffer, signed portBASE_
1827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1881              		.loc 1 1827 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 1885              	.LVL268:
1828:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xReturn;
1829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
1830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1831:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
1832:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
1833:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1886              		.loc 1 1833 0
 1887 06d8 836B     		ldr	r3, [r0, #56]
1827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1888              		.loc 1 1827 0
 1889 06da 70B5     		push	{r4, r5, r6, lr}
 1890              	.LCFI20:
 1891              		.cfi_def_cfa_offset 16
 1892              		.cfi_offset 4, -16
 1893              		.cfi_offset 5, -12
 1894              		.cfi_offset 6, -8
 1895              		.cfi_offset 14, -4
1827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1896              		.loc 1 1827 0
 1897 06dc 0446     		mov	r4, r0
 1898 06de 1546     		mov	r5, r2
 1899              		.loc 1 1833 0
 1900 06e0 FBB1     		cbz	r3, .L258
1834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1835:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
1836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 1901              		.loc 1 1836 0
 1902 06e2 C368     		ldr	r3, [r0, #12]
 1903 06e4 026C     		ldr	r2, [r0, #64]
 1904              	.LVL269:
1837:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
 1905              		.loc 1 1837 0
 1906 06e6 4668     		ldr	r6, [r0, #4]
1836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 1907              		.loc 1 1836 0
 1908 06e8 1344     		add	r3, r3, r2
 1909              		.loc 1 1837 0
 1910 06ea B342     		cmp	r3, r6
1836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 1911              		.loc 1 1836 0
 1912 06ec C360     		str	r3, [r0, #12]
1838:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1839:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
 1913              		.loc 1 1839 0
 1914 06ee 24BF     		itt	cs
 1915 06f0 0368     		ldrcs	r3, [r0]
 1916 06f2 C360     		strcs	r3, [r0, #12]
1840:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1841:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 1917              		.loc 1 1841 0
 1918 06f4 836B     		ldr	r3, [r0, #56]
 1919 06f6 013B     		subs	r3, r3, #1
 1920 06f8 8363     		str	r3, [r0, #56]
1842:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
 1921              		.loc 1 1842 0
 1922 06fa 0846     		mov	r0, r1
 1923              	.LVL270:
 1924 06fc E168     		ldr	r1, [r4, #12]
 1925              	.LVL271:
 1926 06fe FFF7FEFF 		bl	memcpy
 1927              	.LVL272:
1843:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1844:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
 1928              		.loc 1 1844 0
 1929 0702 2B68     		ldr	r3, [r5]
 1930 0704 0BB1     		cbz	r3, .L256
 1931              	.L257:
1845:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1846:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1847:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1848:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1849:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
1851:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1852:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1854:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1855:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1932              		.loc 1 1855 0
 1933 0706 0120     		movs	r0, #1
 1934 0708 70BD     		pop	{r4, r5, r6, pc}
 1935              	.LVL273:
 1936              	.L256:
1846:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1937              		.loc 1 1846 0
 1938 070a 2369     		ldr	r3, [r4, #16]
 1939 070c 002B     		cmp	r3, #0
 1940 070e FAD0     		beq	.L257
1848:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1941              		.loc 1 1848 0
 1942 0710 04F11000 		add	r0, r4, #16
 1943 0714 FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1944              	.LVL274:
 1945 0718 0028     		cmp	r0, #0
 1946 071a F4D0     		beq	.L257
1850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
 1947              		.loc 1 1850 0
 1948 071c 0120     		movs	r0, #1
 1949 071e 2860     		str	r0, [r5]
 1950 0720 70BD     		pop	{r4, r5, r6, pc}
 1951              	.LVL275:
 1952              	.L258:
1856:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1857:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1858:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1859:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 1953              		.loc 1 1859 0
 1954 0722 1846     		mov	r0, r3
 1955              	.LVL276:
1860:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1861:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1862:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
1863:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1956              		.loc 1 1863 0
 1957 0724 70BD     		pop	{r4, r5, r6, pc}
 1958              		.cfi_endproc
 1959              	.LFE22:
 1961              		.align	1
 1962              		.global	vQueueWaitForMessageRestricted
 1963              		.thumb
 1964              		.thumb_func
 1966              	vQueueWaitForMessageRestricted:
 1967              	.LFB23:
1864:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1865:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1866:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1867:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1868:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
1869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1870:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
1871:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1872:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE ux;
1873:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1874:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
1875:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		a free slot. */
1876:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZ
1877:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1878:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1879:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1880:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
1881:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1882:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
1883:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				break;
1884:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1885:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1886:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1887:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1888:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
1889:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1890:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1891:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
1892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1893:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( xQueueHandle xQueue )
1894:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1895:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE ux;
1896:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1897:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
1898:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		registry. */
1899:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZ
1900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1901:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
1902:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1903:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
1904:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
1905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				break;
1906:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1907:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1908:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1909:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1910:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1911:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
1912:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1913:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1914:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TIMERS == 1 )
1915:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1916:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
1917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1968              		.loc 1 1917 0
 1969              		.cfi_startproc
 1970              		@ args = 0, pretend = 0, frame = 0
 1971              		@ frame_needed = 0, uses_anonymous_args = 0
 1972              	.LVL277:
 1973 0726 38B5     		push	{r3, r4, r5, lr}
 1974              	.LCFI21:
 1975              		.cfi_def_cfa_offset 16
 1976              		.cfi_offset 3, -16
 1977              		.cfi_offset 4, -12
 1978              		.cfi_offset 5, -8
 1979              		.cfi_offset 14, -4
 1980              		.loc 1 1917 0
 1981 0728 0446     		mov	r4, r0
 1982              	.LVL278:
 1983 072a 0D46     		mov	r5, r1
1918:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
1919:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1920:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* This function should not be called by application code hence the
1921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1922:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
1923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		It can result in vListInsert() being called on a list that can only
1924:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
1925:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
1926:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		section. */
1927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
1929:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
1930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
1931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
1932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
1933:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
1934:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1984              		.loc 1 1934 0
 1985 072c FFF7FEFF 		bl	vPortEnterCritical
 1986              	.LVL279:
 1987 0730 636C     		ldr	r3, [r4, #68]
 1988 0732 0133     		adds	r3, r3, #1
 1989 0734 04BF     		itt	eq
 1990 0736 0023     		moveq	r3, #0
 1991 0738 6364     		streq	r3, [r4, #68]
 1992 073a A36C     		ldr	r3, [r4, #72]
 1993 073c 0133     		adds	r3, r3, #1
 1994 073e 04BF     		itt	eq
 1995 0740 0023     		moveq	r3, #0
 1996 0742 A364     		streq	r3, [r4, #72]
 1997 0744 FFF7FEFF 		bl	vPortExitCritical
 1998              	.LVL280:
1935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 1999              		.loc 1 1935 0
 2000 0748 A36B     		ldr	r3, [r4, #56]
 2001 074a 23B9     		cbnz	r3, .L268
1936:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
1938:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2002              		.loc 1 1938 0
 2003 074c 04F12400 		add	r0, r4, #36
 2004 0750 2946     		mov	r1, r5
 2005 0752 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 2006              	.LVL281:
 2007              	.L268:
1939:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1940:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvUnlockQueue( pxQueue );
 2008              		.loc 1 1940 0
 2009 0756 2046     		mov	r0, r4
1941:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 2010              		.loc 1 1941 0
 2011 0758 BDE83840 		pop	{r3, r4, r5, lr}
 2012              	.LVL282:
1940:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvUnlockQueue( pxQueue );
 2013              		.loc 1 1940 0
 2014 075c FFF796BC 		b	prvUnlockQueue
 2015              	.LVL283:
 2016              		.cfi_endproc
 2017              	.LFE23:
 2019              	.Letext0:
 2020              		.file 2 "/home/user/gcc-arm-none-eabi-4_8-2013q4/lib/gcc/arm-none-eabi/4.8.3/include/stddef.h"
 2021              		.file 3 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/portable/GCC/ARM_CM4F/p
 2022              		.file 4 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/list.h"
 2023              		.file 5 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/task.h"
 2024              		.file 6 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/queue.h"
 2025              		.file 7 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/portable.h"
 2026              		.file 8 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/croutine.h"
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
     /tmp/ccjAO3lg.s:20     .text:00000000 $t
     /tmp/ccjAO3lg.s:24     .text:00000000 prvCopyDataToQueue
     /tmp/ccjAO3lg.s:134    .text:00000066 prvCopyDataFromQueue
     /tmp/ccjAO3lg.s:186    .text:0000008c prvUnlockQueue
     /tmp/ccjAO3lg.s:275    .text:000000f0 xQueueGenericReset
     /tmp/ccjAO3lg.s:371    .text:00000152 xQueueGenericCreate
     /tmp/ccjAO3lg.s:442    .text:0000018e xQueueGenericSend
     /tmp/ccjAO3lg.s:669    .text:0000028e xQueueCreateMutex
     /tmp/ccjAO3lg.s:749    .text:000002d8 xQueueGenericSendFromISR
     /tmp/ccjAO3lg.s:883    .text:0000035c xQueueGenericReceive
     /tmp/ccjAO3lg.s:1136   .text:00000476 xQueueReceiveFromISR
     /tmp/ccjAO3lg.s:1251   .text:000004e0 xQueuePeekFromISR
     /tmp/ccjAO3lg.s:1341   .text:00000524 uxQueueMessagesWaiting
     /tmp/ccjAO3lg.s:1383   .text:0000053e uxQueueSpacesAvailable
     /tmp/ccjAO3lg.s:1428   .text:0000055c uxQueueMessagesWaitingFromISR
     /tmp/ccjAO3lg.s:1462   .text:0000056a vQueueDelete
     /tmp/ccjAO3lg.s:1505   .text:00000586 xQueueIsQueueEmptyFromISR
     /tmp/ccjAO3lg.s:1543   .text:0000059c xQueueIsQueueFullFromISR
     /tmp/ccjAO3lg.s:1583   .text:000005b2 xQueueCRSend
     /tmp/ccjAO3lg.s:1703   .text:00000630 xQueueCRReceive
     /tmp/ccjAO3lg.s:1820   .text:000006a8 xQueueCRSendFromISR
     /tmp/ccjAO3lg.s:1879   .text:000006d8 xQueueCRReceiveFromISR
     /tmp/ccjAO3lg.s:1966   .text:00000726 vQueueWaitForMessageRestricted
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e41257821655b1beb88e1ee583b76eae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.51.fdf1045aaa750fe709619c2027b96513
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.cdefs.h.56.f411b57d64a46a132cc788f4ff08e67a
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.projdefs.h.67.e147d0bb14773a90ce9490c5c93d4b17
                           .group:00000000 wm4.FreeRTOSConfig.h.79.5ce50f1f04ae36d94916fa991aa4b8d7
                           .group:00000000 wm4.portmacro.h.68.6a65242bb09b79c298caf96e860eebfc
                           .group:00000000 wm4.portable.h.323.74480596d2f6d1d8387fc23ab95d1e43
                           .group:00000000 wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168
                           .group:00000000 wm4.FreeRTOS.h.150.cc84f37778a1fad138e88914409bc9ad
                           .group:00000000 wm4.list.h.96.3fa6b36eff50c0aca81a4cee845ec2dc
                           .group:00000000 wm4.task.h.84.f228f660597151d3901b6cf328174595
                           .group:00000000 wm4.queue.h.68.bff47af2af4e0b8db648fa29647630bc
                           .group:00000000 wm4.croutine.h.67.a67ac56b9022b6112912e5be1cbfa749

UNDEFINED SYMBOLS
vTaskPriorityDisinherit
memcpy
vPortEnterCritical
xTaskRemoveFromEventList
vTaskMissedYield
vPortExitCritical
ulPortSetInterruptMask
vPortYield
vListInitialise
pvPortMalloc
vPortFree
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortValidateInterruptPriority
vPortClearInterruptMask
xTaskGetCurrentTaskHandle
vTaskPriorityInherit
vCoRoutineAddToDelayedList
xCoRoutineRemoveFromEventList
vTaskPlaceOnEventListRestricted
