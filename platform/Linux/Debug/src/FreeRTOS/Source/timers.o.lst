   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"timers.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	prvCheckForValidListAndQueue:
  25              	.LFB11:
  26              		.file 1 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c"
   1:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*
   2:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     All rights reserved
   4:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
   5:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
   7:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     ***************************************************************************
   8:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *                                                                       *
   9:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *    platform software that has become a de facto standard.             *
  12:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *                                                                       *
  13:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *                                                                       *
  17:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *    Thank you!                                                         *
  18:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *                                                                       *
  19:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     ***************************************************************************
  20:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  21:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     This file is part of the FreeRTOS distribution.
  22:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  23:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  27:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     >>! kernel.
  31:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  32:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     link: http://www.freertos.org/a00114.html
  36:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  37:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     1 tab == 4 spaces!
  38:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  39:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     ***************************************************************************
  40:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *                                                                       *
  41:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *    not run, what could be wrong?"                                     *
  43:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *                                                                       *
  44:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****      *                                                                       *
  46:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     ***************************************************************************
  47:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  48:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     license and Real Time Engineers Ltd. contact details.
  50:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  51:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  55:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     licenses offer ticketed support, indemnification and middleware.
  58:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  59:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     engineered and independently SIL3 certified version for use in safety and
  61:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     mission critical applications that require provable dependability.
  62:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  63:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****     1 tab == 4 spaces!
  64:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** */
  65:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  66:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /* Standard includes. */
  67:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #include <stdlib.h>
  68:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  69:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  70:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  71:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** task.h is included from an application file. */
  72:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  73:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  74:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #include "FreeRTOS.h"
  75:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #include "task.h"
  76:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #include "queue.h"
  77:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #include "timers.h"
  78:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  79:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  80:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  81:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** header files above, but not in this file, in order to generate the correct
  82:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** privileged Vs unprivileged linkage and placement. */
  83:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  84:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  85:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  86:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /* This entire source file will be skipped if the application is not configured
  87:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  88:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** of this file.  If you want to include software timer functionality then ensure
  89:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  90:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #if ( configUSE_TIMERS == 1 )
  91:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  92:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /* Misc definitions. */
  93:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #define tmrNO_DELAY		( portTickType ) 0U
  94:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
  95:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /* The definition of the timers themselves. */
  96:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** typedef struct tmrTimerControl
  97:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
  98:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	const signed char		*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included 
  99:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xListItem				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for ev
 100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	portTickType			xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
 101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	unsigned portBASE_TYPE	uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically rest
 102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
 103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	tmrTIMER_CALLBACK		pxCallbackFunction;	/*<< The function that will be called when the timer expire
 104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** } xTIMER;
 105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /* The definition of messages that can be sent and received on the timer
 107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** queue. */
 108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** typedef struct tmrTimerQueueMessage
 109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	portBASE_TYPE			xMessageID;			/*<< The command being sent to the timer service task. */
 111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	portTickType			xMessageValue;		/*<< An optional value used by a subset of commands, for example, w
 112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xTIMER *				pxTimer;			/*<< The timer to which the command will be applied. */
 113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** } xTIMER_MESSAGE;
 114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static variables must be declared volatile. */
 117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** timer service task is allowed to access xActiveTimerList. */
 121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static xList xActiveTimerList1;
 122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static xList xActiveTimerList2;
 123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static xList *pxCurrentTimerList;
 124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static xList *pxOverflowTimerList;
 125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /* A queue that is used to send commands to the timer service task. */
 127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static xQueueHandle xTimerQueue = NULL;
 128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
 130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	PRIVILEGED_DATA static xTaskHandle xTimerTaskHandle = NULL;
 132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #endif
 134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*lint +e956 */
 136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*
 140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * been initialised already.
 142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  */
 143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*
 146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * xTimerQueue queue.
 149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  */
 150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
 151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*
 153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * Called by the timer service task to interpret and process a command it
 154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * received on the timer queue.
 155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  */
 156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void	prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*
 159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  */
 162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, por
 163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*
 165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * auto reload timer, then call its callback.
 167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  */
 168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow ) PRIVILEGE
 169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*
 171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * current timer list does not still reference some timers.
 173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  */
 174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( portTickType xLastTime ) PRIVILEGED_FUNCTION;
 175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*
 177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  */
 180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched ) PRIVILEGED_FUNCTION
 181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*
 183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * If the timer list contains any active timers then return the expire time of
 184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * to pdTRUE.
 187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  */
 188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty ) PRIVILEGED_FUNCTION;
 189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*
 191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  * until either a timer does expire or a command is received.
 193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c ****  */
 194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
 195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xTimerCreateTimerTask( void )
 199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xReturn = pdFAIL;
 201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* This function is called when the scheduler is started if
 203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	timer service task has been created/initialised.  If timers have already
 205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	been created then the initialisation will already have been performed. */
 206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	prvCheckForValidListAndQueue();
 207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
 211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			/* Create the timer task, storing its handle in xTimerTaskHandle so
 213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
 214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) confi
 215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		#else
 217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			/* Create the timer task without storing its handle. */
 219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) confi
 220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		#endif
 222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	configASSERT( xReturn );
 225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	return xReturn;
 226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** xTimerHandle xTimerCreate( const signed char * const pcTimerName, portTickType xTimerPeriodInTicks,
 230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** xTIMER *pxNewTimer;
 232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* Allocate the timer structure. */
 234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimerPeriodInTicks == ( portTickType ) 0U )
 235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		pxNewTimer = NULL;
 237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	else
 239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( pxNewTimer != NULL )
 242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			/* Ensure the infrastructure used by the timer service task has been
 244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			created/initialised. */
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			prvCheckForValidListAndQueue();
 246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			/* Initialise the timer structure members using the function parameters. */
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->pcTimerName = pcTimerName;
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->uxAutoReload = uxAutoReload;
 251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->pvTimerID = pvTimerID;
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			traceTIMER_CREATE( pxNewTimer );
 256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		else
 258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			traceTIMER_CREATE_FAILED();
 260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	return ( xTimerHandle ) pxNewTimer;
 267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOp
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xReturn = pdFAIL;
 273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** xTIMER_MESSAGE xMessage;
 274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	on a particular timer definition. */
 277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xMessage.xMessageID = xCommandID;
 281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xMessage.xMessageValue = xOptionalValue;
 282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xMessage.pxTimer = ( xTIMER * ) xTimer;
 283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( pxHigherPriorityTaskWoken == NULL )
 285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			{
 288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			}
 290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			else
 291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			{
 292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			}
 294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		else
 296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	return xReturn;
 304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
 308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xTaskHandle xTimerGetTimerDaemonTaskHandle( void )
 310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		started, then xTimerTaskHandle will be NULL. */
 313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		configASSERT( ( xTimerTaskHandle != NULL ) );
 314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		return xTimerTaskHandle;
 315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** #endif
 318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
 321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** xTIMER *pxTimer;
 323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xResult;
 324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	been performed to ensure the list is not empty. */
 327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* This is the only time a timer is inserted into a list using
 336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		a time relative to anything other than the current time.  It
 337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		will therefore be inserted into the correct list relative to
 338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		the time this task thinks it is now, even if a command to
 339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		switch lists due to a tick count overflow is already waiting in
 340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		the timer queue. */
 341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			/* The timer expired before it was added to the active timer
 344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			list.  Reload it now.  */
 345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			configASSERT( xResult );
 347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			( void ) xResult;
 348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* Call the timer callback. */
 352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvTimerTask( void *pvParameters )
 357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portTickType xNextExpireTime;
 359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xListWasEmpty;
 360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* Just to avoid compiler warnings. */
 362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	( void ) pvParameters;
 363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	for( ;; )
 365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		obtain the time at which the next timer will expire. */
 368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		until either a timer does expire, or a command is received. */
 372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* Empty the command queue. */
 375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		prvProcessReceivedCommands();
 376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
 381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portTickType xTimeNow;
 383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xTimerListsWereSwitched;
 384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	vTaskSuspendAll();
 386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		then don't process this timer as any timers that remained in the list
 390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		when the lists were switched will have been processed within the
 391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		prvSampelTimeNow() function. */
 392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			{
 398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				( void ) xTaskResumeAll();
 399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			}
 401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			else
 402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			{
 403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				/* The tick count has not overflowed, and the next expire
 404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				time has not been reached yet.  This task should therefore
 405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				block to wait for the next expire time or a command to be
 406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				received - whichever comes first.  The following line cannot
 407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				case when the current timer list is empty. */
 409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				{
 413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					/* Yield to wait for either a command to arrive, or the block time
 414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					to expire.  If a command arrived between the critical section being
 415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					exited and this yield then the yield will not cause the task
 416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					to block. */
 417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					portYIELD_WITHIN_API();
 418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				}
 419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			}
 420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		else
 422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			( void ) xTaskResumeAll();
 424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
 430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portTickType xNextExpireTime;
 432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	timer lists will be switched and the next expiry time can be
 439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	re-assessed.  */
 440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	else
 446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xNextExpireTime = ( portTickType ) 0U;
 449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	return xNextExpireTime;
 452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
 456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portTickType xTimeNow;
 458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only 
 459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimeNow < xLastTime )
 463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		prvSwitchTimerLists( xLastTime );
 465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	else
 468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xLastTime = xTimeNow;
 473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	return xTimeNow;
 475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, por
 479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xProcessTimerNow = pdFALSE;
 481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
 486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		timer was issued, and the time the command was processed? */
 489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			/* The time between a command being issued and the command being
 492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			processed actually exceeds the timers period.  */
 493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		else
 496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	else
 501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			but the expiry time has not, then the timer must have already passed
 506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			its expiry time and should be processed immediately. */
 507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		else
 510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	return xProcessTimerNow;
 516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void	prvProcessReceivedCommands( void )
 520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** xTIMER_MESSAGE xMessage;
 522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** xTIMER *pxTimer;
 523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xTimerListsWereSwitched, xResult;
 524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portTickType xTimeNow;
 525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		pxTimer = xMessage.pxTimer;
 529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			/* The timer is in a list, remove it. */
 533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
 537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* In this case the xTimerListsWereSwitched parameter is not used, but 
 539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		it must be present in the function call.  prvSampleTimeNow() must be 
 540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		called after the message is received from xTimerQueue so there is no 
 541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		possibility of a higher priority task adding a message to the message
 542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		queue with a time that is ahead of the timer daemon task (because it
 543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		pre-empted the timer daemon task after the xTimeNow value was set). */
 544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		switch( xMessage.xMessageID )
 547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			case tmrCOMMAND_START :
 549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				/* Start or restart a timer. */
 550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks
 551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				{
 552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					/* The timer expired before it was added to the active timer
 553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					list.  Process it now. */
 554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					{
 558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->
 559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 						configASSERT( xResult );
 560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 						( void ) xResult;
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					}
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				}
 563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				break;
 564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			case tmrCOMMAND_STOP :
 566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				/* The timer has already been removed from the active list.
 567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				There is nothing to do here. */
 568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				break;
 569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			case tmrCOMMAND_CHANGE_PERIOD :
 571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				/* The new period does not really have a reference, and can be
 575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				longer or shorter than the old one.  The command time is 
 576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				therefore set to the current time, and as the period cannot be
 577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				zero the next expiry time can only be in the future, meaning
 578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				(unlike for the xTimerStart() case above) there is no fail case
 579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				that needs to be handled here. */
 580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTim
 581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				break;
 582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			case tmrCOMMAND_DELETE :
 584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				/* The timer has already been removed from the active list,
 585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				just free up the memory. */
 586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				vPortFree( pxTimer );
 587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				break;
 588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			default	:
 590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				/* Don't expect to get here. */
 591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				break;
 592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( portTickType xLastTime )
 598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portTickType xNextExpireTime, xReloadTime;
 600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** xList *pxTemp;
 601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** xTIMER *pxTimer;
 602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xResult;
 603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* Remove compiler warnings if configASSERT() is not defined. */
 605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	( void ) xLastTime;
 606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	If there are any timers still referenced from the current timer list
 609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	then they must have expired and should be processed before the lists
 610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	are switched. */
 611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* Remove the timer from the list. */
 616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		have not yet been switched. */
 622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			the timer going into the same timer list then it has already expired
 628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			and the timer should be re-inserted into the current list so it is
 629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			the lists have been swapped. */
 632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			{
 635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			}
 639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			else
 640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			{
 641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY )
 642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				( void ) xResult;
 644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			}
 645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	pxTemp = pxCurrentTimerList;
 649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvCheckForValidListAndQueue( void )
 655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
  27              		.loc 1 655 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 3, -24
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
 656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	queue used to communicate with the timer service, have been
 658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	initialised. */
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( xTimerQueue == NULL )
  40              		.loc 1 661 0
  41 0002 0D4C     		ldr	r4, .L4
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
  42              		.loc 1 659 0
  43 0004 FFF7FEFF 		bl	vPortEnterCritical
  44              	.LVL0:
  45              		.loc 1 661 0
  46 0008 2568     		ldr	r5, [r4]
  47 000a 85B9     		cbnz	r5, .L2
 662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		{
 663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList1 );
  48              		.loc 1 663 0
  49 000c 271D     		adds	r7, r4, #4
  50 000e 3846     		mov	r0, r7
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList2 );
  51              		.loc 1 664 0
  52 0010 04F11806 		add	r6, r4, #24
 663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			vListInitialise( &xActiveTimerList1 );
  53              		.loc 1 663 0
  54 0014 FFF7FEFF 		bl	vListInitialise
  55              	.LVL1:
  56              		.loc 1 664 0
  57 0018 3046     		mov	r0, r6
  58 001a FFF7FEFF 		bl	vListInitialise
  59              	.LVL2:
 665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_
  60              		.loc 1 667 0
  61 001e 0520     		movs	r0, #5
  62 0020 0C21     		movs	r1, #12
  63 0022 2A46     		mov	r2, r5
 665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
  64              		.loc 1 665 0
  65 0024 E762     		str	r7, [r4, #44]
 666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
  66              		.loc 1 666 0
  67 0026 2663     		str	r6, [r4, #48]
  68              		.loc 1 667 0
  69 0028 FFF7FEFF 		bl	xQueueGenericCreate
  70              	.LVL3:
  71 002c 2060     		str	r0, [r4]
  72              	.L2:
 668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		}
 669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
  73              		.loc 1 671 0
  74 002e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
  75              		.loc 1 670 0
  76 0032 FFF7FEBF 		b	vPortExitCritical
  77              	.LVL4:
  78              	.L5:
  79 0036 00BF     		.align	2
  80              	.L4:
  81 0038 00000000 		.word	.LANCHOR0
  82              		.cfi_endproc
  83              	.LFE11:
  85              		.align	1
  86              		.thumb
  87              		.thumb_func
  89              	prvInsertTimerInActiveList:
  90              	.LFB8:
 479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
  91              		.loc 1 479 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              	.LVL5:
  96 003c 10B5     		push	{r4, lr}
  97              	.LCFI1:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 4, -8
 100              		.cfi_offset 14, -4
 479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 101              		.loc 1 479 0
 102 003e 0446     		mov	r4, r0
 103              	.LVL6:
 485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
 104              		.loc 1 485 0
 105 0040 9142     		cmp	r1, r2
 482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 106              		.loc 1 482 0
 107 0042 4160     		str	r1, [r0, #4]
 483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 108              		.loc 1 483 0
 109 0044 2061     		str	r0, [r4, #16]
 485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
 110              		.loc 1 485 0
 111 0046 06D8     		bhi	.L7
 489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 112              		.loc 1 489 0
 113 0048 8169     		ldr	r1, [r0, #24]
 114              	.LVL7:
 115 004a D21A     		subs	r2, r2, r3
 116              	.LVL8:
 117 004c 8A42     		cmp	r2, r1
 118 004e 0DD2     		bcs	.L11
 119              	.LVL9:
 120              	.LBB4:
 121              	.LBB5:
 497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 122              		.loc 1 497 0
 123 0050 074B     		ldr	r3, .L13
 124              	.LVL10:
 125 0052 186B     		ldr	r0, [r3, #48]
 126              	.LVL11:
 127 0054 05E0     		b	.L12
 128              	.LVL12:
 129              	.L7:
 130              	.LBE5:
 131              	.LBE4:
 502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 132              		.loc 1 502 0
 133 0056 9A42     		cmp	r2, r3
 134 0058 01D2     		bcs	.L9
 502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 135              		.loc 1 502 0 is_stmt 0 discriminator 1
 136 005a 9942     		cmp	r1, r3
 137 005c 06D2     		bcs	.L11
 138              	.L9:
 511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 139              		.loc 1 511 0 is_stmt 1
 140 005e 044B     		ldr	r3, .L13
 141              	.LVL13:
 142 0060 D86A     		ldr	r0, [r3, #44]
 143              	.LVL14:
 144              	.L12:
 145 0062 211D     		adds	r1, r4, #4
 146 0064 FFF7FEFF 		bl	vListInsert
 147              	.LVL15:
 480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xProcessTimerNow = pdFALSE;
 148              		.loc 1 480 0
 149 0068 0020     		movs	r0, #0
 150 006a 10BD     		pop	{r4, pc}
 151              	.LVL16:
 152              	.L11:
 493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xProcessTimerNow = pdTRUE;
 153              		.loc 1 493 0
 154 006c 0120     		movs	r0, #1
 155              	.LVL17:
 516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 156              		.loc 1 516 0
 157 006e 10BD     		pop	{r4, pc}
 158              	.LVL18:
 159              	.L14:
 160              		.align	2
 161              	.L13:
 162 0070 00000000 		.word	.LANCHOR0
 163              		.cfi_endproc
 164              	.LFE8:
 166              		.align	1
 167              		.global	xTimerCreateTimerTask
 168              		.thumb
 169              		.thumb_func
 171              	xTimerCreateTimerTask:
 172              	.LFB0:
 199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 173              		.loc 1 199 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              	.LVL19:
 178 0074 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 179              	.LCFI2:
 180              		.cfi_def_cfa_offset 24
 181              		.cfi_offset 0, -24
 182              		.cfi_offset 1, -20
 183              		.cfi_offset 2, -16
 184              		.cfi_offset 3, -12
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	prvCheckForValidListAndQueue();
 187              		.loc 1 206 0
 188 0076 FFF7C3FF 		bl	prvCheckForValidListAndQueue
 189              	.LVL20:
 208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 190              		.loc 1 208 0
 191 007a 0C4B     		ldr	r3, .L24
 192 007c 1B68     		ldr	r3, [r3]
 193 007e 13B9     		cbnz	r3, .L16
 194              	.LVL21:
 195              	.L18:
 224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	configASSERT( xReturn );
 196              		.loc 1 224 0
 197 0080 FFF7FEFF 		bl	ulPortSetInterruptMask
 198              	.LVL22:
 199 0084 10E0     		b	.L17
 200              	.LVL23:
 201              	.L16:
 219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) confi
 202              		.loc 1 219 0
 203 0086 0323     		movs	r3, #3
 204 0088 0093     		str	r3, [sp]
 205 008a 0023     		movs	r3, #0
 206 008c 0193     		str	r3, [sp, #4]
 207 008e 0293     		str	r3, [sp, #8]
 208 0090 0393     		str	r3, [sp, #12]
 209 0092 0748     		ldr	r0, .L24+4
 210 0094 0749     		ldr	r1, .L24+8
 211 0096 4FF4A072 		mov	r2, #320
 212 009a FFF7FEFF 		bl	xTaskGenericCreate
 213              	.LVL24:
 224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	configASSERT( xReturn );
 214              		.loc 1 224 0
 215 009e 0028     		cmp	r0, #0
 216 00a0 EED0     		beq	.L18
 226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 217              		.loc 1 226 0
 218 00a2 05B0     		add	sp, sp, #20
 219              		@ sp needed
 220 00a4 5DF804FB 		ldr	pc, [sp], #4
 221              	.LVL25:
 222              	.L17:
 223 00a8 FEE7     		b	.L17
 224              	.L25:
 225 00aa 00BF     		.align	2
 226              	.L24:
 227 00ac 00000000 		.word	.LANCHOR0
 228 00b0 00000000 		.word	prvTimerTask
 229 00b4 00000000 		.word	.LC0
 230              		.cfi_endproc
 231              	.LFE0:
 233              		.align	1
 234              		.global	xTimerCreate
 235              		.thumb
 236              		.thumb_func
 238              	xTimerCreate:
 239              	.LFB1:
 230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 240              		.loc 1 230 0
 241              		.cfi_startproc
 242              		@ args = 4, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              	.LVL26:
 245 00b8 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 246              	.LCFI3:
 247              		.cfi_def_cfa_offset 24
 248              		.cfi_offset 4, -24
 249              		.cfi_offset 5, -20
 250              		.cfi_offset 6, -16
 251              		.cfi_offset 7, -12
 252              		.cfi_offset 8, -8
 253              		.cfi_offset 14, -4
 230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 254              		.loc 1 230 0
 255 00bc 8046     		mov	r8, r0
 256 00be 1746     		mov	r7, r2
 257 00c0 1E46     		mov	r6, r3
 234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimerPeriodInTicks == ( portTickType ) 0U )
 258              		.loc 1 234 0
 259 00c2 0D46     		mov	r5, r1
 260 00c4 89B1     		cbz	r1, .L27
 240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
 261              		.loc 1 240 0
 262 00c6 2820     		movs	r0, #40
 263              	.LVL27:
 264 00c8 FFF7FEFF 		bl	pvPortMalloc
 265              	.LVL28:
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( pxNewTimer != NULL )
 266              		.loc 1 241 0
 267 00cc 0446     		mov	r4, r0
 268 00ce 78B1     		cbz	r0, .L32
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			prvCheckForValidListAndQueue();
 269              		.loc 1 245 0
 270 00d0 FFF796FF 		bl	prvCheckForValidListAndQueue
 271              	.LVL29:
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 272              		.loc 1 252 0
 273 00d4 069B     		ldr	r3, [sp, #24]
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->pcTimerName = pcTimerName;
 274              		.loc 1 248 0
 275 00d6 C4F80080 		str	r8, [r4]
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 276              		.loc 1 249 0
 277 00da A561     		str	r5, [r4, #24]
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->uxAutoReload = uxAutoReload;
 278              		.loc 1 250 0
 279 00dc E761     		str	r7, [r4, #28]
 251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->pvTimerID = pvTimerID;
 280              		.loc 1 251 0
 281 00de 2662     		str	r6, [r4, #32]
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 282              		.loc 1 252 0
 283 00e0 6362     		str	r3, [r4, #36]
 253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 284              		.loc 1 253 0
 285 00e2 201D     		adds	r0, r4, #4
 286 00e4 FFF7FEFF 		bl	vListInitialiseItem
 287              	.LVL30:
 288 00e8 02E0     		b	.L32
 289              	.LVL31:
 290              	.L27:
 264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 291              		.loc 1 264 0
 292 00ea FFF7FEFF 		bl	ulPortSetInterruptMask
 293              	.LVL32:
 294              	.L30:
 295 00ee FEE7     		b	.L30
 296              	.LVL33:
 297              	.L32:
 267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 298              		.loc 1 267 0
 299 00f0 2046     		mov	r0, r4
 300 00f2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 301              		.cfi_endproc
 302              	.LFE1:
 304              		.align	1
 305              		.global	xTimerGenericCommand
 306              		.thumb
 307              		.thumb_func
 309              	xTimerGenericCommand:
 310              	.LFB2:
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 311              		.loc 1 271 0
 312              		.cfi_startproc
 313              		@ args = 4, pretend = 0, frame = 16
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              	.LVL34:
 316 00f6 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 317              	.LCFI4:
 318              		.cfi_def_cfa_offset 32
 319              		.cfi_offset 0, -32
 320              		.cfi_offset 1, -28
 321              		.cfi_offset 2, -24
 322              		.cfi_offset 3, -20
 323              		.cfi_offset 4, -16
 324              		.cfi_offset 5, -12
 325              		.cfi_offset 6, -8
 326              		.cfi_offset 14, -4
 277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 327              		.loc 1 277 0
 328 00f8 0F4D     		ldr	r5, .L41
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 329              		.loc 1 271 0
 330 00fa 0646     		mov	r6, r0
 277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 331              		.loc 1 277 0
 332 00fc 2868     		ldr	r0, [r5]
 333              	.LVL35:
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 334              		.loc 1 271 0
 335 00fe 1C46     		mov	r4, r3
 277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimerQueue != NULL )
 336              		.loc 1 277 0
 337 0100 B8B1     		cbz	r0, .L36
 280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xMessage.xMessageID = xCommandID;
 338              		.loc 1 280 0
 339 0102 0191     		str	r1, [sp, #4]
 281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xMessage.xMessageValue = xOptionalValue;
 340              		.loc 1 281 0
 341 0104 0292     		str	r2, [sp, #8]
 282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xMessage.pxTimer = ( xTIMER * ) xTimer;
 342              		.loc 1 282 0
 343 0106 0396     		str	r6, [sp, #12]
 284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( pxHigherPriorityTaskWoken == NULL )
 344              		.loc 1 284 0
 345 0108 73B9     		cbnz	r3, .L37
 286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 346              		.loc 1 286 0
 347 010a FFF7FEFF 		bl	xTaskGetSchedulerState
 348              	.LVL36:
 349 010e 0128     		cmp	r0, #1
 292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 350              		.loc 1 292 0
 351 0110 18BF     		it	ne
 352 0112 2246     		movne	r2, r4
 288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 353              		.loc 1 288 0
 354 0114 2868     		ldr	r0, [r5]
 355 0116 08BF     		it	eq
 356 0118 089A     		ldreq	r2, [sp, #32]
 357 011a 01A9     		add	r1, sp, #4
 358 011c 0CBF     		ite	eq
 359 011e 2346     		moveq	r3, r4
 292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 360              		.loc 1 292 0
 361 0120 1346     		movne	r3, r2
 362 0122 FFF7FEFF 		bl	xQueueGenericSend
 363              	.LVL37:
 364 0126 04E0     		b	.L36
 365              	.LVL38:
 366              	.L37:
 297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 367              		.loc 1 297 0
 368 0128 1A46     		mov	r2, r3
 369              	.LVL39:
 370 012a 01A9     		add	r1, sp, #4
 371              	.LVL40:
 372 012c 0023     		movs	r3, #0
 373              	.LVL41:
 374 012e FFF7FEFF 		bl	xQueueGenericSendFromISR
 375              	.LVL42:
 376              	.L36:
 304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 377              		.loc 1 304 0
 378 0132 04B0     		add	sp, sp, #16
 379              		@ sp needed
 380 0134 70BD     		pop	{r4, r5, r6, pc}
 381              	.LVL43:
 382              	.L42:
 383 0136 00BF     		.align	2
 384              	.L41:
 385 0138 00000000 		.word	.LANCHOR0
 386              		.cfi_endproc
 387              	.LFE2:
 389              		.align	1
 390              		.thumb
 391              		.thumb_func
 393              	prvSwitchTimerLists.isra.1:
 394              	.LFB15:
 597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** static void prvSwitchTimerLists( portTickType xLastTime )
 395              		.loc 1 597 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 0
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399 013c F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 400              	.LCFI5:
 401              		.cfi_def_cfa_offset 32
 402              		.cfi_offset 0, -32
 403              		.cfi_offset 1, -28
 404              		.cfi_offset 2, -24
 405              		.cfi_offset 4, -20
 406              		.cfi_offset 5, -16
 407              		.cfi_offset 6, -12
 408              		.cfi_offset 7, -8
 409              		.cfi_offset 14, -4
 410              	.L45:
 611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 411              		.loc 1 611 0
 412 013e 164D     		ldr	r5, .L52
 413 0140 EB6A     		ldr	r3, [r5, #44]
 414 0142 1A68     		ldr	r2, [r3]
 415 0144 1AB3     		cbz	r2, .L51
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 416              		.loc 1 613 0
 417 0146 DB68     		ldr	r3, [r3, #12]
 616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 418              		.loc 1 616 0
 419 0148 DC68     		ldr	r4, [r3, #12]
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 420              		.loc 1 613 0
 421 014a 1E68     		ldr	r6, [r3]
 422              	.LVL44:
 617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 423              		.loc 1 617 0
 424 014c 271D     		adds	r7, r4, #4
 425 014e 3846     		mov	r0, r7
 426 0150 FFF7FEFF 		bl	uxListRemove
 427              	.LVL45:
 622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 428              		.loc 1 622 0
 429 0154 636A     		ldr	r3, [r4, #36]
 430 0156 2046     		mov	r0, r4
 431 0158 9847     		blx	r3
 432              	.LVL46:
 624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 433              		.loc 1 624 0
 434 015a E369     		ldr	r3, [r4, #28]
 435 015c 012B     		cmp	r3, #1
 436 015e EED1     		bne	.L45
 632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 437              		.loc 1 632 0
 438 0160 A369     		ldr	r3, [r4, #24]
 439 0162 3344     		add	r3, r3, r6
 440              	.LVL47:
 633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			if( xReloadTime > xNextExpireTime )
 441              		.loc 1 633 0
 442 0164 B342     		cmp	r3, r6
 443 0166 06D9     		bls	.L47
 635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 444              		.loc 1 635 0
 445 0168 6360     		str	r3, [r4, #4]
 636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 446              		.loc 1 636 0
 447 016a 2461     		str	r4, [r4, #16]
 637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 448              		.loc 1 637 0
 449 016c E86A     		ldr	r0, [r5, #44]
 450 016e 3946     		mov	r1, r7
 451 0170 FFF7FEFF 		bl	vListInsert
 452              	.LVL48:
 453 0174 E3E7     		b	.L45
 454              	.LVL49:
 455              	.L47:
 641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY )
 456              		.loc 1 641 0
 457 0176 0021     		movs	r1, #0
 458 0178 0091     		str	r1, [sp]
 459 017a 2046     		mov	r0, r4
 460 017c 3246     		mov	r2, r6
 461 017e 0B46     		mov	r3, r1
 462              	.LVL50:
 463 0180 FFF7FEFF 		bl	xTimerGenericCommand
 464              	.LVL51:
 642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				configASSERT( xResult );
 465              		.loc 1 642 0
 466 0184 0028     		cmp	r0, #0
 467 0186 DAD1     		bne	.L45
 468 0188 FFF7FEFF 		bl	ulPortSetInterruptMask
 469              	.LVL52:
 470              	.L49:
 471 018c FEE7     		b	.L49
 472              	.LVL53:
 473              	.L51:
 649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 474              		.loc 1 649 0
 475 018e 2A6B     		ldr	r2, [r5, #48]
 476 0190 EA62     		str	r2, [r5, #44]
 650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	pxOverflowTimerList = pxTemp;
 477              		.loc 1 650 0
 478 0192 2B63     		str	r3, [r5, #48]
 651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 479              		.loc 1 651 0
 480 0194 03B0     		add	sp, sp, #12
 481              		@ sp needed
 482 0196 F0BD     		pop	{r4, r5, r6, r7, pc}
 483              	.L53:
 484              		.align	2
 485              	.L52:
 486 0198 00000000 		.word	.LANCHOR0
 487              		.cfi_endproc
 488              	.LFE15:
 490              		.align	1
 491              		.thumb
 492              		.thumb_func
 494              	prvTimerTask:
 495              	.LFB4:
 357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 496              		.loc 1 357 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 16
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500              	.LVL54:
 501 019c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 502              	.LCFI6:
 503              		.cfi_def_cfa_offset 24
 504              		.cfi_offset 4, -24
 505              		.cfi_offset 5, -20
 506              		.cfi_offset 6, -16
 507              		.cfi_offset 7, -12
 508              		.cfi_offset 8, -8
 509              		.cfi_offset 14, -4
 510 01a0 86B0     		sub	sp, sp, #24
 511              	.LCFI7:
 512              		.cfi_def_cfa_offset 48
 513              	.LVL55:
 514              	.L77:
 515              	.LBB18:
 516              	.LBB19:
 440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 517              		.loc 1 440 0 discriminator 1
 518 01a2 514C     		ldr	r4, .L84
 519 01a4 E36A     		ldr	r3, [r4, #44]
 520 01a6 1A68     		ldr	r2, [r3]
 521 01a8 D2F10108 		rsbs	r8, r2, #1
 522 01ac 38BF     		it	cc
 523 01ae 4FF00008 		movcc	r8, #0
 524              	.LVL56:
 525 01b2 2746     		mov	r7, r4
 441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 526              		.loc 1 441 0 discriminator 1
 527 01b4 B8F1000F 		cmp	r8, #0
 528 01b8 02D1     		bne	.L78
 443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 529              		.loc 1 443 0
 530 01ba DB68     		ldr	r3, [r3, #12]
 531 01bc 1D68     		ldr	r5, [r3]
 532              	.LVL57:
 533 01be 00E0     		b	.L55
 534              	.LVL58:
 535              	.L78:
 448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xNextExpireTime = ( portTickType ) 0U;
 536              		.loc 1 448 0
 537 01c0 0025     		movs	r5, #0
 538              	.L55:
 539              	.LVL59:
 540              	.LBE19:
 541              	.LBE18:
 542              	.LBB20:
 543              	.LBB21:
 385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	vTaskSuspendAll();
 544              		.loc 1 385 0
 545 01c2 FFF7FEFF 		bl	vTaskSuspendAll
 546              	.LVL60:
 547              	.LBB22:
 548              	.LBB23:
 460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 549              		.loc 1 460 0
 550 01c6 FFF7FEFF 		bl	xTaskGetTickCount
 551              	.LVL61:
 462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimeNow < xLastTime )
 552              		.loc 1 462 0
 553 01ca 636B     		ldr	r3, [r4, #52]
 554 01cc 9842     		cmp	r0, r3
 460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 555              		.loc 1 460 0
 556 01ce 0646     		mov	r6, r0
 557              	.LVL62:
 462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimeNow < xLastTime )
 558              		.loc 1 462 0
 559 01d0 03D2     		bcs	.L79
 464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		prvSwitchTimerLists( xLastTime );
 560              		.loc 1 464 0
 561 01d2 FFF7B3FF 		bl	prvSwitchTimerLists.isra.1
 562              	.LVL63:
 465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 563              		.loc 1 465 0
 564 01d6 0123     		movs	r3, #1
 565 01d8 00E0     		b	.L56
 566              	.LVL64:
 567              	.L79:
 469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 568              		.loc 1 469 0
 569 01da 0023     		movs	r3, #0
 570              	.LVL65:
 571              	.L56:
 472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xLastTime = xTimeNow;
 572              		.loc 1 472 0
 573 01dc 6663     		str	r6, [r4, #52]
 574              	.LBE23:
 575              	.LBE22:
 393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 576              		.loc 1 393 0
 577 01de 002B     		cmp	r3, #0
 578 01e0 33D1     		bne	.L57
 579              	.LVL66:
 396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 580              		.loc 1 396 0
 581 01e2 B8F1000F 		cmp	r8, #0
 582 01e6 26D1     		bne	.L58
 583 01e8 B542     		cmp	r5, r6
 584 01ea 24D8     		bhi	.L58
 398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				( void ) xTaskResumeAll();
 585              		.loc 1 398 0
 586 01ec FFF7FEFF 		bl	xTaskResumeAll
 587              	.LVL67:
 588              	.LBB24:
 589              	.LBB25:
 327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 590              		.loc 1 327 0
 591 01f0 3D4B     		ldr	r3, .L84
 592 01f2 DB6A     		ldr	r3, [r3, #44]
 593 01f4 DB68     		ldr	r3, [r3, #12]
 594 01f6 DC68     		ldr	r4, [r3, #12]
 595              	.LVL68:
 328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 596              		.loc 1 328 0
 597 01f8 201D     		adds	r0, r4, #4
 598 01fa FFF7FEFF 		bl	uxListRemove
 599              	.LVL69:
 333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 600              		.loc 1 333 0
 601 01fe E369     		ldr	r3, [r4, #28]
 602 0200 012B     		cmp	r3, #1
 603 0202 14D1     		bne	.L59
 341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 604              		.loc 1 341 0
 605 0204 A169     		ldr	r1, [r4, #24]
 606 0206 2046     		mov	r0, r4
 607 0208 2944     		add	r1, r1, r5
 608 020a 3246     		mov	r2, r6
 609 020c 2B46     		mov	r3, r5
 610 020e FFF715FF 		bl	prvInsertTimerInActiveList
 611              	.LVL70:
 612 0212 0128     		cmp	r0, #1
 613 0214 0BD1     		bne	.L59
 345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 614              		.loc 1 345 0
 615 0216 CDF80080 		str	r8, [sp]
 616 021a 2046     		mov	r0, r4
 617 021c 4146     		mov	r1, r8
 618 021e 2A46     		mov	r2, r5
 619 0220 4346     		mov	r3, r8
 620 0222 FFF7FEFF 		bl	xTimerGenericCommand
 621              	.LVL71:
 346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			configASSERT( xResult );
 622              		.loc 1 346 0
 623 0226 10B9     		cbnz	r0, .L59
 624 0228 FFF7FEFF 		bl	ulPortSetInterruptMask
 625              	.LVL72:
 626              	.L60:
 627 022c FEE7     		b	.L60
 628              	.L59:
 352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 629              		.loc 1 352 0
 630 022e 636A     		ldr	r3, [r4, #36]
 631 0230 2046     		mov	r0, r4
 632 0232 9847     		blx	r3
 633              	.LVL73:
 634 0234 21E0     		b	.L69
 635              	.LVL74:
 636              	.L58:
 637              	.LBE25:
 638              	.LBE24:
 409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 639              		.loc 1 409 0
 640 0236 2068     		ldr	r0, [r4]
 641 0238 A91B     		subs	r1, r5, r6
 642 023a FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 643              	.LVL75:
 411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 644              		.loc 1 411 0
 645 023e FFF7FEFF 		bl	xTaskResumeAll
 646              	.LVL76:
 647 0242 D0B9     		cbnz	r0, .L69
 417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					portYIELD_WITHIN_API();
 648              		.loc 1 417 0
 649 0244 FFF7FEFF 		bl	vPortYield
 650              	.LVL77:
 651 0248 17E0     		b	.L69
 652              	.LVL78:
 653              	.L57:
 423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			( void ) xTaskResumeAll();
 654              		.loc 1 423 0
 655 024a FFF7FEFF 		bl	xTaskResumeAll
 656              	.LVL79:
 657 024e 14E0     		b	.L69
 658              	.LVL80:
 659              	.L76:
 660              	.LBE21:
 661              	.LBE20:
 662              	.LBB26:
 663              	.LBB27:
 528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		pxTimer = xMessage.pxTimer;
 664              		.loc 1 528 0
 665 0250 059C     		ldr	r4, [sp, #20]
 666              	.LVL81:
 530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 667              		.loc 1 530 0
 668 0252 6369     		ldr	r3, [r4, #20]
 669 0254 13B1     		cbz	r3, .L63
 533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 670              		.loc 1 533 0
 671 0256 201D     		adds	r0, r4, #4
 672 0258 FFF7FEFF 		bl	uxListRemove
 673              	.LVL82:
 674              	.L63:
 675              	.LBB28:
 676              	.LBB29:
 460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 677              		.loc 1 460 0
 678 025c FFF7FEFF 		bl	xTaskGetTickCount
 679              	.LVL83:
 462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimeNow < xLastTime )
 680              		.loc 1 462 0
 681 0260 7B6B     		ldr	r3, [r7, #52]
 682 0262 9842     		cmp	r0, r3
 460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xTimeNow = xTaskGetTickCount();
 683              		.loc 1 460 0
 684 0264 0646     		mov	r6, r0
 685              	.LVL84:
 462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	if( xTimeNow < xLastTime )
 686              		.loc 1 462 0
 687 0266 01D2     		bcs	.L64
 464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		prvSwitchTimerLists( xLastTime );
 688              		.loc 1 464 0
 689 0268 FFF768FF 		bl	prvSwitchTimerLists.isra.1
 690              	.LVL85:
 691              	.L64:
 692              	.LBE29:
 693              	.LBE28:
 546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		switch( xMessage.xMessageID )
 694              		.loc 1 546 0
 695 026c 039D     		ldr	r5, [sp, #12]
 696              	.LBB31:
 697              	.LBB30:
 472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	xLastTime = xTimeNow;
 698              		.loc 1 472 0
 699 026e 7E63     		str	r6, [r7, #52]
 700              	.LBE30:
 701              	.LBE31:
 546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		switch( xMessage.xMessageID )
 702              		.loc 1 546 0
 703 0270 022D     		cmp	r5, #2
 704 0272 28D0     		beq	.L66
 705 0274 032D     		cmp	r5, #3
 706 0276 33D0     		beq	.L67
 707 0278 45B1     		cbz	r5, .L83
 708              	.LVL86:
 709              	.L69:
 526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 710              		.loc 1 526 0
 711 027a 0022     		movs	r2, #0
 712 027c 3868     		ldr	r0, [r7]
 713 027e 03A9     		add	r1, sp, #12
 714 0280 1346     		mov	r3, r2
 715 0282 FFF7FEFF 		bl	xQueueGenericReceive
 716              	.LVL87:
 717 0286 0028     		cmp	r0, #0
 718 0288 E2D1     		bne	.L76
 719 028a 8AE7     		b	.L77
 720              	.LVL88:
 721              	.L83:
 550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks
 722              		.loc 1 550 0
 723 028c 049B     		ldr	r3, [sp, #16]
 724 028e A169     		ldr	r1, [r4, #24]
 725 0290 2046     		mov	r0, r4
 726 0292 1944     		add	r1, r1, r3
 727 0294 3246     		mov	r2, r6
 728 0296 FFF7D1FE 		bl	prvInsertTimerInActiveList
 729              	.LVL89:
 730 029a 0128     		cmp	r0, #1
 731 029c EDD1     		bne	.L69
 554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 732              		.loc 1 554 0
 733 029e 636A     		ldr	r3, [r4, #36]
 734 02a0 2046     		mov	r0, r4
 735 02a2 9847     		blx	r3
 736              	.LVL90:
 556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 737              		.loc 1 556 0
 738 02a4 E369     		ldr	r3, [r4, #28]
 739 02a6 012B     		cmp	r3, #1
 740 02a8 E7D1     		bne	.L69
 558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->
 741              		.loc 1 558 0
 742 02aa A269     		ldr	r2, [r4, #24]
 743 02ac 049B     		ldr	r3, [sp, #16]
 744 02ae 0095     		str	r5, [sp]
 745 02b0 1A44     		add	r2, r2, r3
 746 02b2 2046     		mov	r0, r4
 747 02b4 2946     		mov	r1, r5
 748 02b6 2B46     		mov	r3, r5
 749 02b8 FFF7FEFF 		bl	xTimerGenericCommand
 750              	.LVL91:
 559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 						configASSERT( xResult );
 751              		.loc 1 559 0
 752 02bc 0028     		cmp	r0, #0
 753 02be DCD1     		bne	.L69
 754 02c0 FFF7FEFF 		bl	ulPortSetInterruptMask
 755              	.LVL92:
 756              	.L73:
 757 02c4 FEE7     		b	.L73
 758              	.L66:
 571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 759              		.loc 1 571 0
 760 02c6 0499     		ldr	r1, [sp, #16]
 761 02c8 A161     		str	r1, [r4, #24]
 572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 762              		.loc 1 572 0
 763 02ca 11B9     		cbnz	r1, .L74
 764 02cc FFF7FEFF 		bl	ulPortSetInterruptMask
 765              	.LVL93:
 766              	.L75:
 767 02d0 FEE7     		b	.L75
 768              	.L74:
 580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTim
 769              		.loc 1 580 0
 770 02d2 2046     		mov	r0, r4
 771 02d4 3144     		add	r1, r1, r6
 772 02d6 3246     		mov	r2, r6
 773 02d8 3346     		mov	r3, r6
 774 02da FFF7AFFE 		bl	prvInsertTimerInActiveList
 775              	.LVL94:
 776 02de CCE7     		b	.L69
 777              	.L67:
 586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 				vPortFree( pxTimer );
 778              		.loc 1 586 0
 779 02e0 2046     		mov	r0, r4
 780 02e2 FFF7FEFF 		bl	vPortFree
 781              	.LVL95:
 782 02e6 C8E7     		b	.L69
 783              	.L85:
 784              		.align	2
 785              	.L84:
 786 02e8 00000000 		.word	.LANCHOR0
 787              	.LBE27:
 788              	.LBE26:
 789              		.cfi_endproc
 790              	.LFE4:
 792              		.align	1
 793              		.global	xTimerIsTimerActive
 794              		.thumb
 795              		.thumb_func
 797              	xTimerIsTimerActive:
 798              	.LFB12:
 672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xTimerIsTimerActive( xTimerHandle xTimer )
 675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 799              		.loc 1 675 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              	.LVL96:
 804 02ec 10B5     		push	{r4, lr}
 805              	.LCFI8:
 806              		.cfi_def_cfa_offset 8
 807              		.cfi_offset 4, -8
 808              		.cfi_offset 14, -4
 809              		.loc 1 675 0
 810 02ee 0446     		mov	r4, r0
 811              	.LVL97:
 676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** portBASE_TYPE xTimerIsInActiveList;
 677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** xTIMER *pxTimer = ( xTIMER * ) xTimer;
 678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	/* Is the timer in the list of active timers? */
 680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	taskENTER_CRITICAL();
 812              		.loc 1 680 0
 813 02f0 FFF7FEFF 		bl	vPortEnterCritical
 814              	.LVL98:
 681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	{
 682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		/* Checking to see if it is in the NULL list in effect checks to see if
 683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		it is referenced from either the current or the overflow timer lists in
 684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		one go, but the logic has to be reversed, hence the '!'. */
 685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 815              		.loc 1 685 0
 816 02f4 6469     		ldr	r4, [r4, #20]
 817              	.LVL99:
 818 02f6 0034     		adds	r4, r4, #0
 819 02f8 18BF     		it	ne
 820 02fa 0124     		movne	r4, #1
 821              	.LVL100:
 686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	}
 687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	taskEXIT_CRITICAL();
 822              		.loc 1 687 0
 823 02fc FFF7FEFF 		bl	vPortExitCritical
 824              	.LVL101:
 688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	return xTimerIsInActiveList;
 690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 825              		.loc 1 690 0
 826 0300 2046     		mov	r0, r4
 827 0302 10BD     		pop	{r4, pc}
 828              		.cfi_endproc
 829              	.LFE12:
 831              		.align	1
 832              		.global	pvTimerGetTimerID
 833              		.thumb
 834              		.thumb_func
 836              	pvTimerGetTimerID:
 837              	.LFB13:
 691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** void *pvTimerGetTimerID( xTimerHandle xTimer )
 694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** {
 838              		.loc 1 694 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 0
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842              		@ link register save eliminated.
 843              	.LVL102:
 695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** xTIMER *pxTimer = ( xTIMER * ) xTimer;
 696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 
 697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** 	return pxTimer->pvTimerID;
 698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/timers.c **** }
 844              		.loc 1 698 0
 845 0304 006A     		ldr	r0, [r0, #32]
 846              	.LVL103:
 847 0306 7047     		bx	lr
 848              		.cfi_endproc
 849              	.LFE13:
 851              		.section	.rodata.str1.1,"aMS",%progbits,1
 852              	.LC0:
 853 0000 546D7220 		.ascii	"Tmr Svc\000"
 853      53766300 
 854              		.bss
 855              		.align	2
 856              		.set	.LANCHOR0,. + 0
 859              	xTimerQueue:
 860 0000 00000000 		.space	4
 863              	xActiveTimerList1:
 864 0004 00000000 		.space	20
 864      00000000 
 864      00000000 
 864      00000000 
 864      00000000 
 867              	xActiveTimerList2:
 868 0018 00000000 		.space	20
 868      00000000 
 868      00000000 
 868      00000000 
 868      00000000 
 871              	pxCurrentTimerList:
 872 002c 00000000 		.space	4
 875              	pxOverflowTimerList:
 876 0030 00000000 		.space	4
 879              	xLastTime.5055:
 880 0034 00000000 		.space	4
 881              		.text
 882              	.Letext0:
 883              		.file 2 "/home/user/gcc-arm-none-eabi-4_8-2013q4/lib/gcc/arm-none-eabi/4.8.3/include/stddef.h"
 884              		.file 3 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/projdefs.h"
 885              		.file 4 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/portable/GCC/ARM_CM4F/p
 886              		.file 5 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/list.h"
 887              		.file 6 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/task.h"
 888              		.file 7 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/queue.h"
 889              		.file 8 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/timers.h"
 890              		.file 9 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/portable.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
     /tmp/ccZ4pWmb.s:20     .text:00000000 $t
     /tmp/ccZ4pWmb.s:24     .text:00000000 prvCheckForValidListAndQueue
     /tmp/ccZ4pWmb.s:81     .text:00000038 $d
     /tmp/ccZ4pWmb.s:85     .text:0000003c $t
     /tmp/ccZ4pWmb.s:89     .text:0000003c prvInsertTimerInActiveList
     /tmp/ccZ4pWmb.s:162    .text:00000070 $d
     /tmp/ccZ4pWmb.s:166    .text:00000074 $t
     /tmp/ccZ4pWmb.s:171    .text:00000074 xTimerCreateTimerTask
     /tmp/ccZ4pWmb.s:227    .text:000000ac $d
     /tmp/ccZ4pWmb.s:494    .text:0000019c prvTimerTask
     /tmp/ccZ4pWmb.s:233    .text:000000b8 $t
     /tmp/ccZ4pWmb.s:238    .text:000000b8 xTimerCreate
     /tmp/ccZ4pWmb.s:309    .text:000000f6 xTimerGenericCommand
     /tmp/ccZ4pWmb.s:385    .text:00000138 $d
     /tmp/ccZ4pWmb.s:389    .text:0000013c $t
     /tmp/ccZ4pWmb.s:393    .text:0000013c prvSwitchTimerLists.isra.1
     /tmp/ccZ4pWmb.s:486    .text:00000198 $d
     /tmp/ccZ4pWmb.s:490    .text:0000019c $t
     /tmp/ccZ4pWmb.s:786    .text:000002e8 $d
     /tmp/ccZ4pWmb.s:792    .text:000002ec $t
     /tmp/ccZ4pWmb.s:797    .text:000002ec xTimerIsTimerActive
     /tmp/ccZ4pWmb.s:836    .text:00000304 pvTimerGetTimerID
     /tmp/ccZ4pWmb.s:855    .bss:00000000 $d
     /tmp/ccZ4pWmb.s:859    .bss:00000000 xTimerQueue
     /tmp/ccZ4pWmb.s:863    .bss:00000004 xActiveTimerList1
     /tmp/ccZ4pWmb.s:867    .bss:00000018 xActiveTimerList2
     /tmp/ccZ4pWmb.s:871    .bss:0000002c pxCurrentTimerList
     /tmp/ccZ4pWmb.s:875    .bss:00000030 pxOverflowTimerList
     /tmp/ccZ4pWmb.s:879    .bss:00000034 xLastTime.5055
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e41257821655b1beb88e1ee583b76eae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.51.fdf1045aaa750fe709619c2027b96513
                           .group:00000000 wm4.projdefs.h.67.e147d0bb14773a90ce9490c5c93d4b17
                           .group:00000000 wm4.FreeRTOSConfig.h.79.5ce50f1f04ae36d94916fa991aa4b8d7
                           .group:00000000 wm4.portmacro.h.68.6a65242bb09b79c298caf96e860eebfc
                           .group:00000000 wm4.portable.h.323.74480596d2f6d1d8387fc23ab95d1e43
                           .group:00000000 wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168
                           .group:00000000 wm4.FreeRTOS.h.150.cc84f37778a1fad138e88914409bc9ad
                           .group:00000000 wm4.list.h.96.3fa6b36eff50c0aca81a4cee845ec2dc
                           .group:00000000 wm4.task.h.84.f228f660597151d3901b6cf328174595
                           .group:00000000 wm4.queue.h.68.bff47af2af4e0b8db648fa29647630bc
                           .group:00000000 wm4.timers.h.86.d5e43463ce2885102019230eae2c0769

UNDEFINED SYMBOLS
vPortEnterCritical
vListInitialise
xQueueGenericCreate
vPortExitCritical
vListInsert
ulPortSetInterruptMask
xTaskGenericCreate
pvPortMalloc
vListInitialiseItem
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
vTaskSuspendAll
xTaskGetTickCount
xTaskResumeAll
vQueueWaitForMessageRestricted
vPortYield
xQueueGenericReceive
vPortFree
