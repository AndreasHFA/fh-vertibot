   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	prvAddCurrentTaskToDelayedList:
  25              	.LFB29:
  26              		.file 1 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c"
   1:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
   2:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
   5:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
   7:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     ***************************************************************************
   8:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
   9:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    platform software that has become a de facto standard.             *
  12:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  13:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  17:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    Thank you!                                                         *
  18:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  19:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  20:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  21:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
  22:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  23:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  27:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     >>! kernel.
  31:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  32:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  36:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  37:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  38:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  39:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  40:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  41:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    not run, what could be wrong?"                                     *
  43:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  44:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  46:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  47:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  48:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     license and Real Time Engineers Ltd. contact details.
  50:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  51:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  55:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and middleware.
  58:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  59:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  61:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  62:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  63:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  64:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** */
  65:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  66:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  67:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  68:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include <string.h>
  69:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  70:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  71:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  72:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  73:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  74:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  75:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  76:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  77:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include "task.h"
  78:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include "timers.h"
  79:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  80:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  81:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  82:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  83:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  84:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  85:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  86:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  87:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  88:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  89:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  90:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  91:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  92:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  93:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  94:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  95:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Sanity check the configuration. */
  96:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
  97:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if INCLUDE_vTaskSuspend != 1
  98:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
  99:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
 115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
 118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xListItem				xGenericListItem;	/*< The list that the state list item of a task is reference from d
 121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xListItem				xEventListItem;		/*< Used to reference a task from an event list. */
 122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
 124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
 125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Points to the end of the stack on architectures where the sta
 128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting; /*< Holds the critical section nesting depth for ports 
 132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< Stores a number that increments each time a TCB is create
 136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE  uxTaskNumber;	/*< Stores a number specifically for use by third party tra
 137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		unsigned long ulRunTimeCounter;			/*< Stores the amount of time the task has spent in the Running
 149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		struct _reent xNewLib_reent;
 160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** } tskTCB;
 163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * be global, rather than file scope.
 168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define static
 171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList;				/*< Points to the delayed task list c
 183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but t
 189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;			/*< Holds the handle of the idle task
 202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
 208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxPendedTicks 			= ( unsigned portBASE_TYPE 
 212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xYieldPending 					= pdFALSE;
 213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
 215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xNextTaskUnblockTime				= portMAX_DELAY;
 216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTotalRunTime = 0UL;			/*< Holds the total amount of executi
 221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	state task. */
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )																		\
 253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																													\
 254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )																		\
 255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{																												\
 256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );																		\
 257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}																												\
 258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()																			\
 263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																													\
 264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */												\
 265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )										\
 266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{																												\
 267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopReadyPriority );																			\
 268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			--uxTopReadyPriority;																						\
 269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}																												\
 270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																														\
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of										\
 272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */													\
 273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );						\
 274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	being used. */
 281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																								\
 297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTopPriority;															\
 298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																									\
 299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )													\
 311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																								\
 312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == 0 )				\
 313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{																							\
 314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );						\
 315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}																							\
 316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** count overflows. */
 324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {																									\
 326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xList *pxTemp;																					\
 327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																									\
 328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																									\
 331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																									\
 336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )											\
 337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																								\
 338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set												\
 339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime to the maximum possible value so it is									\
 340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		extremely unlikely that the																	\
 341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until								\
 342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */													\
 343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;														\
 344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}																								\
 345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else																							\
 346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																								\
 347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of								\
 348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at								\
 349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed							\
 350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */																	\
 351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );						\
 352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );				\
 353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}																								\
 354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																				\
 363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB )																			\
 364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );																\
 365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( 
 375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** extern void vApplicationStackOverflowHook( xTaskHandle xTask, signed char *pcTaskName );
 378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** extern void vApplicationTickHook( void );
 379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * into the TCB structure.
 385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
 432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * allocation was successful.
 436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Fills an xTaskStatusType structure with information on each task that is
 441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static unsigned portBASE_TYPE prvListTaskWithinSingleList( xTaskStatusType *pxTaskStatusArray, xLi
 450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static unsigned short prvTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_
 461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xReturn;
 482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** tskTCB * pxNewTCB;
 483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	checking that the allocation was successful. */
 489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
 503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		required by the port. */
 513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) =
 520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MAS
 527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			other extreme of the stack space. */
 531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the	top of stack variable is updated. */
 542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			task can use this as a handle to delete the task later if
 556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			required.*/
 557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		updated. */
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				the suspended state - make this the current task. */
 569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					initialisation required.  We will not recover if this call
 575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					fails, but we will report the failure. */
 576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvInitialiseTaskLists();
 577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
 580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				current task if it is the highest priority task to be created
 583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				so far. */
 584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
 588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
 590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
 611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			then it should run now. */
 622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xReturn;
 630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( xTaskHandle xTaskToDelete )
 636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			the termination list and free up any memory allocated by the
 647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			scheduler for the TCB and stack. */
 648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			can detect that the task lists need re-generating. */
 668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			block. */
 701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			const portTickType xConstTickCount = xTickCount;
 702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
 709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
 719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
 723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 731:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 733:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 735:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 737:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				both lists. */
 739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 740:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 742:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					no need to check, and the port reset macro can be called
 743:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					directly. */
 744:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 745:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 746:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 748:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 749:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 752:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 755:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 757:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 759:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 762:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 763:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 765:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 768:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 769:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 770:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 772:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 774:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
 776:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 777:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
 778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 779:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 780:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				is resumed.
 781:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 783:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				executing task. */
 784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 785:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				not a problem. */
 787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 788:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 789:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 790:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 791:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				both lists. */
 792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 793:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					no need to check, and the port reset macro can be called
 796:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					directly. */
 797:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 798:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 802:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 803:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 807:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 811:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 812:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 813:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 814:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 817:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( xTaskHandle xTask )
 818:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 819:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xList *pxStateList;
 821:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 822:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 823:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 825:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
 826:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 828:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
 829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 831:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 832:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxStateList = ( xList * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
 833:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 835:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 837:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 838:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
 839:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				lists. */
 840:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 841:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 842:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 843:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
 844:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 845:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 846:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
 847:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					list. */
 848:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					eReturn = eSuspended;
 849:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
 851:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 852:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
 853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 854:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 855:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
 856:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					tasks list. */
 857:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 858:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 859:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
 860:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 861:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
 862:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 863:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
 864:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
 865:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 866:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 867:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 868:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return eReturn;
 870:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 871:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 872:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
 873:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 874:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 875:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 876:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 877:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle xTask )
 878:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 879:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 880:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 881:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 882:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 883:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 884:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 885:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 886:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 887:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 888:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 889:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 890:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 891:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 893:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 894:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
 895:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 896:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 897:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 898:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 899:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( xTaskHandle xTask, unsigned portBASE_TYPE uxNewPriority )
 900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 901:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 902:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxCurrentBasePriority, uxPriorityUsedOnEntry;
 903:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 904:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 906:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 907:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
 908:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 909:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 910:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 911:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 912:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 913:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 914:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 915:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
 916:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
 917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 918:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 919:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 920:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 922:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 924:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 925:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#else
 926:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 929:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
 930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 933:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
 934:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 936:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 938:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
 939:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
 940:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
 941:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
 942:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 943:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						{
 944:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 945:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						}
 946:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
 947:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					else
 948:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
 949:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
 950:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
 951:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
 952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
 953:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 954:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 956:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
 957:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
 958:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
 959:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 960:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 961:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else
 962:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 963:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
 964:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
 965:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
 966:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 967:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 968:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
 969:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
 970:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
 971:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 972:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 973:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 974:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 975:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
 976:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
 977:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 978:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
 979:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
 981:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 982:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
 983:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 984:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 985:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#else
 986:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 987:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 988:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 989:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#endif
 990:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 991:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( portTickType ) configMAX_PRIORITIES - 
 992:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 993:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
 994:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
 995:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
 996:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
 997:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
 998:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1000:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1001:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
1003:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1004:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1005:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1006:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1007:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1008:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1010:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1011:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1012:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
1013:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1014:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
1015:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1016:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1018:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1019:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1020:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1021:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1022:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1023:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1026:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1027:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1028:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1029:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1030:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( xTaskHandle xTaskToSuspend )
1031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1032:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1033:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1034:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1035:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1036:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			being suspended. */
1038:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1039:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1041:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
1043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
1044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1045:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1046:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1047:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1048:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1049:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1050:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1051:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1052:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1053:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1054:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
1055:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1056:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1057:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1058:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1059:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1060:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1061:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1063:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1064:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1065:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
1066:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1067:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1068:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1069:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1070:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1071:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1072:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1073:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1074:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1075:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					is. */
1076:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1077:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1078:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else
1079:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1081:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1082:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1083:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1085:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1086:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1087:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1088:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1089:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1090:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1091:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
1092:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
1094:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
1095:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1096:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
1098:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1099:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Is the task we are attempting to resume actually in the
1100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		suspended list? */
1101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
1102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the
1107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				Suspended state?  It is possible to be in the suspended
1108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				list because it is blocked on a task with no timeout
1109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				specified. */
1110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
1111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
1113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
1118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskResume( xTaskHandle xTaskToResume )
1126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
1128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
1151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						will leave the lists in the correct state for the next yield. */
1152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						portYIELD_WITHIN_API();
1153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle xTaskToResume )
1167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
1169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) xTaskToResume;
1170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxSavedInterruptStatus;
1171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else
1209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* We cannot access the delayed or ready lists, so will hold this
1211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					task pending until the scheduler is resumed, at which point a
1212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					yield will be performed if necessary. */
1213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#else
1237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		starts to run. */
1259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
1271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portable interface. */
1279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			function will not return. */
1283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
1290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn );
1295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static portTickType prvGetExpectedIdleTime( void )
1321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portTickType xReturn;
1323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			processed. */
1333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
1341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** tskTCB *pxTCB;
1349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xAlreadyYielded = pdFALSE;
1350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
1363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
1367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
1370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
1375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* If we have moved a task that has a priority higher than
1378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					the current task then we should yield. */
1379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
1382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
1389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
1391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
1393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						{
1394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							xYieldPending = pdTRUE;
1395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						}
1396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						--uxPendedTicks;
1397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xYieldPending == pdTRUE )
1401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xAlreadyYielded = pdTRUE;
1403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
1404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
1411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCount( void )
1415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xTicks;
1417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
1422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xTicks;
1426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCountFromISR( void )
1430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xReturn;
1432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are keep permanently enabled, even
1437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xReturn = xTickCount;
1452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xReturn;
1455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
1463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
1469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetSystemState( xTaskStatusType *pxTaskStatusArray, unsigned portBASE
1484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTask = 0, uxQueue = configMAX_PRIORITIES;
1486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
1491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Fill in an xTaskStatusType structure with information on each
1493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
1494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				do
1495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxQueue--;
1497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
1498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( unsigned portBASE_TYPE ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception 
1500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Fill in an xTaskStatusType structure with information on each
1502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
1503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( xList * ) pxDelayedT
1504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( xList * ) pxOverflow
1505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Fill in an xTaskStatusType structure with information on
1509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
1511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#endif
1513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Fill in an xTaskStatusType structure with information on
1517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
1518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
1519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#endif
1521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
1525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#else
1529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#endif
1531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#else
1534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
1536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
1538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#endif
1541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
1544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return uxTask;
1546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetIdleTaskHandle( void )
1554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
1559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 1. */
1568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( portTickType xTicksToJump )
1571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
1575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
1577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xTaskIncrementTick( void )
1584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** tskTCB * pxTCB;
1586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xItemValue;
1587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xSwitchRequired = pdFALSE;
1588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
1592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
1597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		++xTickCount;
1598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			block. */
1602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			const portTickType xConstTickCount = xTickCount;
1603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount == ( portTickType ) 0U )
1605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
1607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in the
1610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			queue in the order of their wake time - meaning once one tasks has been
1611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			found whose block time has not expired there is no need not look any
1612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			further	down the list. */
1613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
1614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				for( ;; )
1616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime to
1620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						the	maximum possible value so it is extremely unlikely that
1621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
1622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						next time through. */
1623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
1624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						break;
1625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					else
1627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* The delayed list is not empty, get the value of the item
1629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						at the head of the delayed list.  This is the time at which
1630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						the task at the head of the delayed list must be removed
1631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						from the Blocked state. */
1632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
1634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						if( xConstTickCount < xItemValue )
1636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						{
1637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							/* It is not time to unblock this item yet, but the item
1638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							value is the time at which the task at the head of the
1639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							blocked list must be removed from the Blocked state -
1640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							so record the item value in xNextTaskUnblockTime. */
1641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
1642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							break;
1643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						}
1644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
1646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
1647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* Is the task waiting on an event also?  If so remove it
1649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						from the event list. */
1650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						{
1652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						}
1654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* Place the unblocked task into the appropriate ready
1656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						list. */
1657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
1658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* A task being unblocked cannot cause an immediate context
1660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						switch if preemption is turned off. */
1661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
1662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						{
1663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							/* Preemption is on, but a context switch should only
1664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							be performed if the unblocked task has a priority that
1665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							is equal to or higher than the currently executing
1666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							task. */
1667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							{
1669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 								xSwitchRequired = pdTRUE;
1670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							}
1671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						}
1672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#endif /* configUSE_PREEMPTION */
1673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
1679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
1680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
1681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
1682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned p
1684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
1686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
1689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		
1690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
1693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
1694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
1695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
1697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */		
1700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
1702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
1704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
1707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif
1712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
1715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
1717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
1719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
1722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
1724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
1730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1731:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1733:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
1735:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1737:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1740:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1742:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1743:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1744:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1745:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1746:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
1747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1748:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1749:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
1751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1752:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1755:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1757:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1759:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
1762:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1763:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1765:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1768:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1769:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1770:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1772:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
1774:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1776:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
1777:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1779:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
1780:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1781:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1783:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1785:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
1788:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1789:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1790:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
1791:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1793:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1796:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1797:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1798:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
1800:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
1802:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1803:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1807:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
1809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1811:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
1812:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1813:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1814:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
1815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
1817:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1818:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1819:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		switch. */
1820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
1821:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1822:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
1823:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
1825:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
1826:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
1828:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1831:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#else
1832:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1833:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#endif
1834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1835:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
1836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				accumulated	time so far.  The time the task started running was
1837:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
1838:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				protection here	so count values are only valid until the timer
1839:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
1840:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
1841:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
1842:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
1843:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1844:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
1845:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1846:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
1847:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1848:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
1849:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
1851:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1852:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
1854:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1855:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
1856:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1857:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1858:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1859:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1860:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
1861:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1862:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1863:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1864:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1865:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1866:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1867:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1868:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
1869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1870:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xTimeToWake;
1871:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1872:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
1873:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1874:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1875:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED. */
1876:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1877:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1878:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1879:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event. */
1880:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1881:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1882:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1883:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1884:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1885:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
1886:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1887:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
1888:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
1889:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1890:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1891:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1893:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1894:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
1895:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1896:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1897:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1898:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			indefinitely. */
1899:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
1900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1901:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1902:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1903:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1904:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1906:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1907:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1908:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1909:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
1910:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1911:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1912:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1913:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1914:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1915:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1916:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
1917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1918:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1919:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1920:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if configUSE_TIMERS == 1
1921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1922:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
1923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1924:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
1925:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1926:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
1927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
1929:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
1931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		it should be called from a critical section. */
1932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1933:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1934:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
1935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
1936:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
1937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
1938:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1939:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1940:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
1941:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
1942:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		function is called form a critical section. */
1943:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
1944:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1945:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
1946:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			check, and the port reset macro can be called directly. */
1947:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1948:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1949:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1950:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
1951:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
1952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
1953:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1954:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL();
1955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
1956:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1957:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1958:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
1959:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1960:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1961:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1962:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1963:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** tskTCB *pxUnblockedTCB;
1964:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1965:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1966:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1967:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1968:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1969:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1970:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1971:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	it to the ready list.
1972:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1973:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
1974:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1975:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	means we can always expect exclusive access to the event list here.
1976:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1977:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
1978:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
1979:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
1981:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1982:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1983:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1984:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1985:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
1986:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
1987:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1988:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
1989:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1990:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1991:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		task pending until the scheduler is resumed. */
1992:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1993:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1994:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1995:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
1996:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1997:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
1998:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
1999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2000:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		switch now. */
2001:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2003:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2004:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2005:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2006:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2007:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
2008:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2010:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2011:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2012:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xReturn;
2013:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2014:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2015:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2016:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
2017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2018:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
2019:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
2020:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
2021:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2022:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2023:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
2025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2026:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
2027:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2028:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
2029:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
2030:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2032:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2033:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2034:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		const portTickType xConstTickCount = xTickCount;
2035:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2036:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2038:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2039:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			therefore never time out. */
2040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
2041:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
2043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2045:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif
2046:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2047:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
2048:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2049:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2050:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2051:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2052:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2053:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
2054:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2055:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
2056:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2057:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2058:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
2059:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
2060:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
2061:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
2063:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2064:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
2065:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2066:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2067:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2068:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2069:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xReturn;
2070:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2071:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2072:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2073:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
2074:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2075:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
2076:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2077:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2078:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2079:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2081:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
2082:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2083:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2085:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2086:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
2087:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2088:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = ( tskTCB * ) xTask;
2089:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
2090:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2091:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
2092:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
2094:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2095:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2096:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return uxReturn;
2097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2098:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2099:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
2105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
2109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = ( tskTCB * ) xTask;
2111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
2112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
2118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
2119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The Idle task.
2120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
2121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
2122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
2125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
2126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
2127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
2128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
2131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
2132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( ;; )
2134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have been deleted. */
2136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
2137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
2142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
2143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
2144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskYIELD();
2145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
2151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
2153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			timeslice.
2154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
2156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
2158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
2159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
2160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskYIELD();
2162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
2169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
2172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
2173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
2176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
2182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portTickType xExpectedIdleTime;
2186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
2190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			valid. */
2192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
2197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
2200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					be used. */
2201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
2206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
2209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
2210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
2212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
2220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
2229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
2231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
2234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
2236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if configUSE_TIMERS == 0
2238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The idle task exists in addition to the application tasks. */
2240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				const unsigned portBASE_TYPE uxNonApplicationTasks = 1;
2241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If timers are not being used and all the tasks are in the
2243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				suspended list (which might mean they have an infinite block
2244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				time rather than actually being suspended) then it is safe to
2245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				turn all clocks off and just wait for external interrupts. */
2246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicati
2247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					eReturn = eNoTasksWaitingTimeout;
2249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif /* configUSE_TIMERS */
2252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return eReturn;
2255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
2260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE x;
2262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
2264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++
2265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
2267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
2271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
2272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			break;
2274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
2280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
2283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
2284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
2286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
2289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
2292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
2294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
2296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
2297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
2299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
2301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
2303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( por
2304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
2305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
2309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
2331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		( void ) usStackDepth;
2332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
2347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
2360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxPriority;
2362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX
2364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
2366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
2369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
2370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
2371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
2375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
2377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
2381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	using list2. */
2386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
2387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
2388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portBASE_TYPE xListIsEmpty;
2396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
2399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
2400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
2402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
2403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
2404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
2406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				tskTCB *pxTCB;
2408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
2412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
2413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
2414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
2415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
2419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* vTaskDelete */
2423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
2427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
  27              		.loc 1 2427 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
2428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
2429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  32              		.loc 1 2429 0
  33 0000 0C4B     		ldr	r3, .L5
  34 0002 1A68     		ldr	r2, [r3]
2427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
  35              		.loc 1 2427 0
  36 0004 10B5     		push	{r4, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 4, -8
  40              		.cfi_offset 14, -4
  41              		.loc 1 2429 0
  42 0006 5060     		str	r0, [r2, #4]
2430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xTimeToWake < xTickCount )
  43              		.loc 1 2431 0
  44 0008 5A68     		ldr	r2, [r3, #4]
  45 000a 9042     		cmp	r0, r2
2427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
  46              		.loc 1 2427 0
  47 000c 0446     		mov	r4, r0
  48              		.loc 1 2431 0
  49 000e 06D2     		bcs	.L2
  50              	.LVL1:
  51              	.LBB4:
  52              	.LBB5:
2432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  53              		.loc 1 2434 0
  54 0010 9868     		ldr	r0, [r3, #8]
  55              	.LVL2:
  56 0012 1968     		ldr	r1, [r3]
  57              	.LBE5:
  58              	.LBE4:
2435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
2437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The wake time has not overflowed, so we can use the current block list. */
2439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		too. */
2444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
2445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
2447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
  59              		.loc 1 2449 0
  60 0014 BDE81040 		pop	{r4, lr}
  61              	.LVL3:
  62              	.LBB7:
  63              	.LBB6:
2434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  64              		.loc 1 2434 0
  65 0018 0431     		adds	r1, r1, #4
  66 001a FFF7FEBF 		b	vListInsert
  67              	.LVL4:
  68              	.L2:
  69              	.LBE6:
  70              	.LBE7:
2439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  71              		.loc 1 2439 0
  72 001e D868     		ldr	r0, [r3, #12]
  73              	.LVL5:
  74 0020 1968     		ldr	r1, [r3]
  75 0022 0431     		adds	r1, r1, #4
  76 0024 FFF7FEFF 		bl	vListInsert
  77              	.LVL6:
2444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
  78              		.loc 1 2444 0
  79 0028 034B     		ldr	r3, .L5+4
  80 002a 1A68     		ldr	r2, [r3]
  81 002c 9442     		cmp	r4, r2
2446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
  82              		.loc 1 2446 0
  83 002e 38BF     		it	cc
  84 0030 1C60     		strcc	r4, [r3]
  85 0032 10BD     		pop	{r4, pc}
  86              	.LVL7:
  87              	.L6:
  88              		.align	2
  89              	.L5:
  90 0034 00000000 		.word	.LANCHOR0
  91 0038 00000000 		.word	.LANCHOR1
  92              		.cfi_endproc
  93              	.LFE29:
  95              		.align	1
  96              		.global	xTaskGenericCreate
  97              		.thumb
  98              		.thumb_func
 100              	xTaskGenericCreate:
 101              	.LFB0:
 480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 102              		.loc 1 480 0
 103              		.cfi_startproc
 104              		@ args = 16, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              	.LVL8:
 107 003c 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 108              	.LCFI1:
 109              		.cfi_def_cfa_offset 40
 110              		.cfi_offset 3, -40
 111              		.cfi_offset 4, -36
 112              		.cfi_offset 5, -32
 113              		.cfi_offset 6, -28
 114              		.cfi_offset 7, -24
 115              		.cfi_offset 8, -20
 116              		.cfi_offset 9, -16
 117              		.cfi_offset 10, -12
 118              		.cfi_offset 11, -8
 119              		.cfi_offset 14, -4
 480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 120              		.loc 1 480 0
 121 0040 0A9F     		ldr	r7, [sp, #40]
 122 0042 0B9E     		ldr	r6, [sp, #44]
 123 0044 DDF830B0 		ldr	fp, [sp, #48]
 124 0048 8946     		mov	r9, r1
 125 004a 1546     		mov	r5, r2
 126 004c 9A46     		mov	r10, r3
 484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 127              		.loc 1 484 0
 128 004e 8046     		mov	r8, r0
 129 0050 10B9     		cbnz	r0, .L8
 484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 130              		.loc 1 484 0 is_stmt 0 discriminator 1
 131 0052 FFF7FEFF 		bl	ulPortSetInterruptMask
 132              	.LVL9:
 133              	.L9:
 134 0056 FEE7     		b	.L9
 135              	.LVL10:
 136              	.L8:
 485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 137              		.loc 1 485 0 is_stmt 1
 138 0058 042F     		cmp	r7, #4
 139 005a 02D9     		bls	.L10
 485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 140              		.loc 1 485 0 is_stmt 0 discriminator 1
 141 005c FFF7FEFF 		bl	ulPortSetInterruptMask
 142              	.LVL11:
 143              	.L11:
 144 0060 FEE7     		b	.L11
 145              	.LVL12:
 146              	.L10:
 147              	.LBB15:
 148              	.LBB16:
2450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** tskTCB *pxNewTCB;
2455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	the implementation of the port malloc function. */
2458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 149              		.loc 1 2458 0 is_stmt 1
 150 0062 4420     		movs	r0, #68
 151              	.LVL13:
 152 0064 FFF7FEFF 		bl	pvPortMalloc
 153              	.LVL14:
2459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 154              		.loc 1 2460 0
 155 0068 0446     		mov	r4, r0
 156 006a 0028     		cmp	r0, #0
 157 006c 00F09E80 		beq	.L12
2461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		be deleted later if required. */
2465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * siz
 158              		.loc 1 2465 0
 159 0070 5846     		mov	r0, fp
 160              	.LVL15:
 161 0072 BBF1000F 		cmp	fp, #0
 162 0076 02D1     		bne	.L13
 163              	.LVL16:
 164 0078 A800     		lsls	r0, r5, #2
 165              	.LVL17:
 166 007a FFF7FEFF 		bl	pvPortMalloc
 167              	.LVL18:
 168              	.L13:
 169 007e 2063     		str	r0, [r4, #48]
2466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 170              		.loc 1 2467 0
 171 0080 18B9     		cbnz	r0, .L14
2468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vPortFree( pxNewTCB );
 172              		.loc 1 2470 0
 173 0082 2046     		mov	r0, r4
 174 0084 FFF7FEFF 		bl	vPortFree
 175              	.LVL19:
 176 0088 90E0     		b	.L12
 177              	.LVL20:
 178              	.L14:
2471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB = NULL;
2472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
2474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Just to help debugging. */
2476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof
 179              		.loc 1 2476 0
 180 008a AD00     		lsls	r5, r5, #2
 181              	.LVL21:
 182 008c 2A46     		mov	r2, r5
 183 008e A521     		movs	r1, #165
 184 0090 FFF7FEFF 		bl	memset
 185              	.LVL22:
 186              	.LBE16:
 187              	.LBE15:
 188              	.LBB17:
 515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 189              		.loc 1 515 0
 190 0094 236B     		ldr	r3, [r4, #48]
 191 0096 043D     		subs	r5, r5, #4
 192              	.LVL23:
 193 0098 2B44     		add	r3, r3, r5
 516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 194              		.loc 1 516 0
 195 009a 23F0070B 		bic	fp, r3, #7
 196              	.LVL24:
 197              	.LBB18:
 198              	.LBB19:
2264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++
 199              		.loc 1 2264 0
 200 009e 0025     		movs	r5, #0
 201              	.LVL25:
 202              	.L16:
 203 00a0 6319     		adds	r3, r4, r5
2266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
 204              		.loc 1 2266 0
 205 00a2 19F80520 		ldrb	r2, [r9, r5]	@ zero_extendqisi2
 206 00a6 83F83420 		strb	r2, [r3, #52]
2271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 207              		.loc 1 2271 0
 208 00aa 19F90530 		ldrsb	r3, [r9, r5]
 209 00ae 13B1     		cbz	r3, .L15
2264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++
 210              		.loc 1 2264 0
 211 00b0 0135     		adds	r5, r5, #1
 212              	.LVL26:
 213 00b2 0A2D     		cmp	r5, #10
 214 00b4 F4D1     		bne	.L16
 215              	.L15:
2279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 216              		.loc 1 2279 0
 217 00b6 0023     		movs	r3, #0
2295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 218              		.loc 1 2295 0
 219 00b8 04F10409 		add	r9, r4, #4
 220              	.LVL27:
2279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 221              		.loc 1 2279 0
 222 00bc 84F83D30 		strb	r3, [r4, #61]
2295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 223              		.loc 1 2295 0
 224 00c0 4846     		mov	r0, r9
2288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 225              		.loc 1 2288 0
 226 00c2 E762     		str	r7, [r4, #44]
2291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 227              		.loc 1 2291 0
 228 00c4 2764     		str	r7, [r4, #64]
2295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 229              		.loc 1 2295 0
 230 00c6 FFF7FEFF 		bl	vListInitialiseItem
 231              	.LVL28:
2296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 232              		.loc 1 2296 0
 233 00ca 04F11800 		add	r0, r4, #24
 234 00ce FFF7FEFF 		bl	vListInitialiseItem
 235              	.LVL29:
2303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( por
 236              		.loc 1 2303 0
 237 00d2 C7F10503 		rsb	r3, r7, #5
2300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 238              		.loc 1 2300 0
 239 00d6 2461     		str	r4, [r4, #16]
2303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( por
 240              		.loc 1 2303 0
 241 00d8 A361     		str	r3, [r4, #24]
2304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 242              		.loc 1 2304 0
 243 00da 6462     		str	r4, [r4, #36]
 244              	.LBE19:
 245              	.LBE18:
 548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 246              		.loc 1 548 0
 247 00dc 5846     		mov	r0, fp
 248 00de 4146     		mov	r1, r8
 249 00e0 5246     		mov	r2, r10
 250 00e2 FFF7FEFF 		bl	pxPortInitialiseStack
 251              	.LVL30:
 252 00e6 2060     		str	r0, [r4]
 552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 253              		.loc 1 552 0
 254 00e8 06B1     		cbz	r6, .L17
 557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 255              		.loc 1 557 0
 256 00ea 3460     		str	r4, [r6]
 257              	.L17:
 564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 258              		.loc 1 564 0
 259 00ec 314D     		ldr	r5, .L43
 260              	.LVL31:
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 261              		.loc 1 562 0
 262 00ee FFF7FEFF 		bl	vPortEnterCritical
 263              	.LVL32:
 564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 264              		.loc 1 564 0
 265 00f2 2B69     		ldr	r3, [r5, #16]
 266 00f4 0133     		adds	r3, r3, #1
 267 00f6 2B61     		str	r3, [r5, #16]
 565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 268              		.loc 1 565 0
 269 00f8 2B68     		ldr	r3, [r5]
 270 00fa 05F1140A 		add	r10, r5, #20
 271              	.LVL33:
 272 00fe 4BBB     		cbnz	r3, .L18
 569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 273              		.loc 1 569 0
 274 0100 2C60     		str	r4, [r5]
 571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 275              		.loc 1 571 0
 276 0102 2A69     		ldr	r2, [r5, #16]
 277 0104 012A     		cmp	r2, #1
 278 0106 2DD1     		bne	.L20
 279 0108 9846     		mov	r8, r3
 280              	.LVL34:
 281              	.L22:
 282              	.LBB20:
 283              	.LBB21:
2365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 284              		.loc 1 2365 0
 285 010a 0AEB0800 		add	r0, r10, r8
 286 010e 08F11408 		add	r8, r8, #20
 287 0112 FFF7FEFF 		bl	vListInitialise
 288              	.LVL35:
2363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX
 289              		.loc 1 2363 0
 290 0116 B8F1640F 		cmp	r8, #100
 291 011a 264E     		ldr	r6, .L43
 292 011c F5D1     		bne	.L22
2368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 293              		.loc 1 2368 0
 294 011e 06F1780B 		add	fp, r6, #120
 295              	.LVL36:
 296 0122 5846     		mov	r0, fp
2369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 297              		.loc 1 2369 0
 298 0124 06F18C08 		add	r8, r6, #140
2368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 299              		.loc 1 2368 0
 300 0128 FFF7FEFF 		bl	vListInitialise
 301              	.LVL37:
2369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 302              		.loc 1 2369 0
 303 012c 4046     		mov	r0, r8
 304 012e FFF7FEFF 		bl	vListInitialise
 305              	.LVL38:
2370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 306              		.loc 1 2370 0
 307 0132 06F1A000 		add	r0, r6, #160
 308 0136 FFF7FEFF 		bl	vListInitialise
 309              	.LVL39:
2374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 310              		.loc 1 2374 0
 311 013a 06F1B400 		add	r0, r6, #180
 312 013e FFF7FEFF 		bl	vListInitialise
 313              	.LVL40:
2380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 314              		.loc 1 2380 0
 315 0142 06F1C800 		add	r0, r6, #200
 316 0146 FFF7FEFF 		bl	vListInitialise
 317              	.LVL41:
2386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 318              		.loc 1 2386 0
 319 014a C6F80CB0 		str	fp, [r6, #12]
2387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 320              		.loc 1 2387 0
 321 014e C6F80880 		str	r8, [r6, #8]
 322 0152 07E0     		b	.L20
 323              	.LVL42:
 324              	.L18:
 325              	.LBE21:
 326              	.LBE20:
 584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 327              		.loc 1 584 0
 328 0154 D5F8DC30 		ldr	r3, [r5, #220]
 329 0158 23B9     		cbnz	r3, .L20
 586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 330              		.loc 1 586 0
 331 015a 2B68     		ldr	r3, [r5]
 332 015c DB6A     		ldr	r3, [r3, #44]
 333 015e BB42     		cmp	r3, r7
 588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 334              		.loc 1 588 0
 335 0160 98BF     		it	ls
 336 0162 2C60     		strls	r4, [r5]
 337              	.LVL43:
 338              	.L20:
 593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 339              		.loc 1 593 0
 340 0164 D5F8E030 		ldr	r3, [r5, #224]
 603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 341              		.loc 1 603 0
 342 0168 D5F8E420 		ldr	r2, [r5, #228]
 593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 343              		.loc 1 593 0
 344 016c 0133     		adds	r3, r3, #1
 345 016e C5F8E030 		str	r3, [r5, #224]
 603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 346              		.loc 1 603 0
 347 0172 E36A     		ldr	r3, [r4, #44]
 348 0174 9342     		cmp	r3, r2
 349 0176 88BF     		it	hi
 350 0178 0E4A     		ldrhi	r2, .L43
 351 017a 4FF01400 		mov	r0, #20
 352 017e 00FB03A0 		mla	r0, r0, r3, r10
 353 0182 4946     		mov	r1, r9
 354 0184 88BF     		it	hi
 355 0186 C2F8E430 		strhi	r3, [r2, #228]
 356 018a FFF7FEFF 		bl	vListInsertEnd
 357              	.LVL44:
 608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 358              		.loc 1 608 0
 359 018e FFF7FEFF 		bl	vPortExitCritical
 360              	.LVL45:
 361              	.LBE17:
 618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 362              		.loc 1 618 0
 363 0192 D5F8DC30 		ldr	r3, [r5, #220]
 364 0196 33B1     		cbz	r3, .L28
 622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 365              		.loc 1 622 0
 366 0198 064B     		ldr	r3, .L43
 367 019a 1B68     		ldr	r3, [r3]
 368 019c DB6A     		ldr	r3, [r3, #44]
 369 019e BB42     		cmp	r3, r7
 370 01a0 01D2     		bcs	.L28
 624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 371              		.loc 1 624 0
 372 01a2 FFF7FEFF 		bl	vPortYield
 373              	.LVL46:
 374              	.L28:
 375              	.LBB22:
 605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 376              		.loc 1 605 0
 377 01a6 0120     		movs	r0, #1
 378 01a8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 379              	.LVL47:
 380              	.L12:
 381              	.LBE22:
 612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 382              		.loc 1 612 0
 383 01ac 4FF0FF30 		mov	r0, #-1
 630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 384              		.loc 1 630 0
 385 01b0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 386              	.LVL48:
 387              	.L44:
 388              		.align	2
 389              	.L43:
 390 01b4 00000000 		.word	.LANCHOR0
 391              		.cfi_endproc
 392              	.LFE0:
 394              		.align	1
 395              		.global	vTaskDelete
 396              		.thumb
 397              		.thumb_func
 399              	vTaskDelete:
 400              	.LFB1:
 636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 401              		.loc 1 636 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              	.LVL49:
 406 01b8 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 407              	.LCFI2:
 408              		.cfi_def_cfa_offset 24
 409              		.cfi_offset 3, -24
 410              		.cfi_offset 4, -20
 411              		.cfi_offset 5, -16
 412              		.cfi_offset 6, -12
 413              		.cfi_offset 7, -8
 414              		.cfi_offset 14, -4
 636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 415              		.loc 1 636 0
 416 01ba 0446     		mov	r4, r0
 417 01bc 154D     		ldr	r5, .L55
 639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 418              		.loc 1 639 0
 419 01be FFF7FEFF 		bl	vPortEnterCritical
 420              	.LVL50:
 642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 421              		.loc 1 642 0
 422 01c2 04B9     		cbnz	r4, .L46
 642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 423              		.loc 1 642 0 is_stmt 0 discriminator 1
 424 01c4 2C68     		ldr	r4, [r5]
 425              	.LVL51:
 426              	.L46:
 648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 427              		.loc 1 648 0 is_stmt 1 discriminator 3
 428 01c6 261D     		adds	r6, r4, #4
 429 01c8 3046     		mov	r0, r6
 430 01ca FFF7FEFF 		bl	uxListRemove
 431              	.LVL52:
 654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 432              		.loc 1 654 0 discriminator 3
 433 01ce A36A     		ldr	r3, [r4, #40]
 434 01d0 1BB1     		cbz	r3, .L47
 656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 435              		.loc 1 656 0
 436 01d2 04F11800 		add	r0, r4, #24
 437 01d6 FFF7FEFF 		bl	uxListRemove
 438              	.LVL53:
 439              	.L47:
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 440              		.loc 1 659 0
 441 01da 0E4F     		ldr	r7, .L55
 442 01dc 3146     		mov	r1, r6
 443 01de 07F1B400 		add	r0, r7, #180
 444 01e2 FFF7FEFF 		bl	vListInsertEnd
 445              	.LVL54:
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 446              		.loc 1 664 0
 447 01e6 D5F8E830 		ldr	r3, [r5, #232]
 448 01ea 0133     		adds	r3, r3, #1
 449 01ec C5F8E830 		str	r3, [r5, #232]
 668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 450              		.loc 1 668 0
 451 01f0 D5F8E030 		ldr	r3, [r5, #224]
 452 01f4 0133     		adds	r3, r3, #1
 453 01f6 C5F8E030 		str	r3, [r5, #224]
 672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 454              		.loc 1 672 0
 455 01fa FFF7FEFF 		bl	vPortExitCritical
 456              	.LVL55:
 675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 457              		.loc 1 675 0
 458 01fe D5F8DC30 		ldr	r3, [r5, #220]
 459 0202 33B1     		cbz	r3, .L45
 677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 460              		.loc 1 677 0
 461 0204 3B68     		ldr	r3, [r7]
 462 0206 9C42     		cmp	r4, r3
 463 0208 03D1     		bne	.L45
 682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 464              		.loc 1 682 0
 465 020a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 466              	.LVL56:
 679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 467              		.loc 1 679 0
 468 020e FFF7FEBF 		b	vPortYield
 469              	.LVL57:
 470              	.L45:
 471 0212 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 472              	.LVL58:
 473              	.L56:
 474              		.align	2
 475              	.L55:
 476 0214 00000000 		.word	.LANCHOR0
 477              		.cfi_endproc
 478              	.LFE1:
 480              		.align	1
 481              		.global	uxTaskPriorityGet
 482              		.thumb
 483              		.thumb_func
 485              	uxTaskPriorityGet:
 486              	.LFB4:
 878:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 487              		.loc 1 878 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              	.LVL59:
 492 0218 10B5     		push	{r4, lr}
 493              	.LCFI3:
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 4, -8
 496              		.cfi_offset 14, -4
 878:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 497              		.loc 1 878 0
 498 021a 0446     		mov	r4, r0
 882:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 499              		.loc 1 882 0
 500 021c FFF7FEFF 		bl	vPortEnterCritical
 501              	.LVL60:
 886:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 502              		.loc 1 886 0
 503 0220 0CB9     		cbnz	r4, .L58
 886:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 504              		.loc 1 886 0 is_stmt 0 discriminator 1
 505 0222 034B     		ldr	r3, .L59
 506 0224 1C68     		ldr	r4, [r3]
 507              	.LVL61:
 508              	.L58:
 887:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 509              		.loc 1 887 0 is_stmt 1 discriminator 3
 510 0226 E46A     		ldr	r4, [r4, #44]
 511              	.LVL62:
 889:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 512              		.loc 1 889 0 discriminator 3
 513 0228 FFF7FEFF 		bl	vPortExitCritical
 514              	.LVL63:
 892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 515              		.loc 1 892 0 discriminator 3
 516 022c 2046     		mov	r0, r4
 517 022e 10BD     		pop	{r4, pc}
 518              	.LVL64:
 519              	.L60:
 520              		.align	2
 521              	.L59:
 522 0230 00000000 		.word	.LANCHOR0
 523              		.cfi_endproc
 524              	.LFE4:
 526              		.align	1
 527              		.global	vTaskPrioritySet
 528              		.thumb
 529              		.thumb_func
 531              	vTaskPrioritySet:
 532              	.LFB5:
 900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 533              		.loc 1 900 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537              	.LVL65:
 905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 538              		.loc 1 905 0
 539 0234 0429     		cmp	r1, #4
 900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 540              		.loc 1 900 0
 541 0236 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 542              	.LCFI4:
 543              		.cfi_def_cfa_offset 24
 544              		.cfi_offset 4, -24
 545              		.cfi_offset 5, -20
 546              		.cfi_offset 6, -16
 547              		.cfi_offset 7, -12
 548              		.cfi_offset 8, -8
 549              		.cfi_offset 14, -4
 900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 550              		.loc 1 900 0
 551 023a 0446     		mov	r4, r0
 552 023c 0D46     		mov	r5, r1
 905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 553              		.loc 1 905 0
 554 023e 02D9     		bls	.L62
 905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 555              		.loc 1 905 0 is_stmt 0 discriminator 1
 556 0240 FFF7FEFF 		bl	ulPortSetInterruptMask
 557              	.LVL66:
 558              	.L63:
 559 0244 FEE7     		b	.L63
 560              	.LVL67:
 561              	.L62:
 913:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 562              		.loc 1 913 0 is_stmt 1
 563 0246 FFF7FEFF 		bl	vPortEnterCritical
 564              	.LVL68:
 917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 565              		.loc 1 917 0
 566 024a 0CB9     		cbnz	r4, .L64
 917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 567              		.loc 1 917 0 is_stmt 0 discriminator 1
 568 024c 204B     		ldr	r3, .L76
 569 024e 1C68     		ldr	r4, [r3]
 570              	.LVL69:
 571              	.L64:
 923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 572              		.loc 1 923 0 is_stmt 1 discriminator 3
 573 0250 236C     		ldr	r3, [r4, #64]
 574              	.LVL70:
 931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 575              		.loc 1 931 0 discriminator 3
 576 0252 AB42     		cmp	r3, r5
 577 0254 38D0     		beq	.L66
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 578              		.loc 1 935 0
 579 0256 9D42     		cmp	r5, r3
 580 0258 1D4A     		ldr	r2, .L76
 581 025a 09D9     		bls	.L67
 937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 582              		.loc 1 937 0
 583 025c 1168     		ldr	r1, [r2]
 584 025e 8C42     		cmp	r4, r1
 585 0260 0BD0     		beq	.L75
 942:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 586              		.loc 1 942 0
 587 0262 1268     		ldr	r2, [r2]
 588 0264 D66A     		ldr	r6, [r2, #44]
 589 0266 B542     		cmp	r5, r6
 590 0268 34BF     		ite	cc
 591 026a 0026     		movcc	r6, #0
 592 026c 0126     		movcs	r6, #1
 593 026e 05E0     		b	.L68
 594              	.L67:
 954:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 595              		.loc 1 954 0
 596 0270 1668     		ldr	r6, [r2]
 597 0272 A21B     		subs	r2, r4, r6
 598 0274 5642     		rsbs	r6, r2, #0
 599 0276 5641     		adcs	r6, r6, r2
 600 0278 00E0     		b	.L68
 601              	.L75:
 903:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 602              		.loc 1 903 0
 603 027a 0026     		movs	r6, #0
 604              	.L68:
 605              	.LVL71:
 971:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 606              		.loc 1 971 0
 607 027c E26A     		ldr	r2, [r4, #44]
 608              	.LVL72:
 983:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 609              		.loc 1 983 0
 610 027e 2564     		str	r5, [r4, #64]
 977:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 611              		.loc 1 977 0
 612 0280 9342     		cmp	r3, r2
 979:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 613              		.loc 1 979 0
 614 0282 08BF     		it	eq
 615 0284 E562     		streq	r5, [r4, #44]
 991:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( portTickType ) configMAX_PRIORITIES - 
 616              		.loc 1 991 0
 617 0286 C5F10505 		rsb	r5, r5, #5
 618              	.LVL73:
 619 028a A561     		str	r5, [r4, #24]
 997:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
 620              		.loc 1 997 0
 621 028c 104D     		ldr	r5, .L76
 622 028e 1423     		movs	r3, #20
 623              	.LVL74:
 624 0290 05F11400 		add	r0, r5, #20
 625 0294 03FB0202 		mla	r2, r3, r2, r0
 626              	.LVL75:
 627 0298 6369     		ldr	r3, [r4, #20]
 628 029a 9342     		cmp	r3, r2
 629 029c 8046     		mov	r8, r0
 630 029e 10D1     		bne	.L71
1002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 631              		.loc 1 1002 0
 632 02a0 271D     		adds	r7, r4, #4
 633 02a2 3846     		mov	r0, r7
 634 02a4 FFF7FEFF 		bl	uxListRemove
 635              	.LVL76:
1009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 636              		.loc 1 1009 0
 637 02a8 E36A     		ldr	r3, [r4, #44]
 638 02aa D5F8E420 		ldr	r2, [r5, #228]
 639 02ae 9342     		cmp	r3, r2
 640 02b0 01D9     		bls	.L74
1009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 641              		.loc 1 1009 0 is_stmt 0 discriminator 1
 642 02b2 C5F8E430 		str	r3, [r5, #228]
 643              	.L74:
1009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 644              		.loc 1 1009 0 discriminator 2
 645 02b6 1420     		movs	r0, #20
 646 02b8 00FB0380 		mla	r0, r0, r3, r8
 647 02bc 3946     		mov	r1, r7
 648 02be FFF7FEFF 		bl	vListInsertEnd
 649              	.LVL77:
 650              	.L71:
1012:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
 651              		.loc 1 1012 0 is_stmt 1
 652 02c2 0EB1     		cbz	r6, .L66
1014:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 653              		.loc 1 1014 0
 654 02c4 FFF7FEFF 		bl	vPortYield
 655              	.LVL78:
 656              	.L66:
1023:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 657              		.loc 1 1023 0
 658 02c8 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 659              	.LVL79:
1022:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 660              		.loc 1 1022 0
 661 02cc FFF7FEBF 		b	vPortExitCritical
 662              	.LVL80:
 663              	.L77:
 664              		.align	2
 665              	.L76:
 666 02d0 00000000 		.word	.LANCHOR0
 667              		.cfi_endproc
 668              	.LFE5:
 670              		.align	1
 671              		.global	xTaskIsTaskSuspended
 672              		.thumb
 673              		.thumb_func
 675              	xTaskIsTaskSuspended:
 676              	.LFB7:
1092:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 677              		.loc 1 1092 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
 681              	.LVL81:
 682 02d4 08B5     		push	{r3, lr}
 683              	.LCFI5:
 684              		.cfi_def_cfa_offset 8
 685              		.cfi_offset 3, -8
 686              		.cfi_offset 14, -4
1097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 687              		.loc 1 1097 0
 688 02d6 10B9     		cbnz	r0, .L79
1097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 689              		.loc 1 1097 0 is_stmt 0 discriminator 1
 690 02d8 FFF7FEFF 		bl	ulPortSetInterruptMask
 691              	.LVL82:
 692              	.L80:
 693 02dc FEE7     		b	.L80
 694              	.LVL83:
 695              	.L79:
1101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 696              		.loc 1 1101 0 is_stmt 1
 697 02de 4369     		ldr	r3, [r0, #20]
 698 02e0 064A     		ldr	r2, .L87
 699 02e2 9342     		cmp	r3, r2
 700 02e4 08D1     		bne	.L86
 701              	.LVL84:
 702              	.LBB25:
 703              	.LBB26:
1104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 704              		.loc 1 1104 0
 705 02e6 806A     		ldr	r0, [r0, #40]
 706              	.LVL85:
 707 02e8 283B     		subs	r3, r3, #40
 708 02ea 9842     		cmp	r0, r3
 709 02ec 04D0     		beq	.L86
1110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 710              		.loc 1 1110 0
 711 02ee D0F10100 		rsbs	r0, r0, #1
 712 02f2 38BF     		it	cc
 713 02f4 0020     		movcc	r0, #0
 714              	.LVL86:
 715 02f6 08BD     		pop	{r3, pc}
 716              	.LVL87:
 717              	.L86:
1093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 718              		.loc 1 1093 0
 719 02f8 0020     		movs	r0, #0
 720              	.LVL88:
 721              	.LBE26:
 722              	.LBE25:
1118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 723              		.loc 1 1118 0
 724 02fa 08BD     		pop	{r3, pc}
 725              	.L88:
 726              		.align	2
 727              	.L87:
 728 02fc C8000000 		.word	.LANCHOR0+200
 729              		.cfi_endproc
 730              	.LFE7:
 732              		.align	1
 733              		.global	vTaskResume
 734              		.thumb
 735              		.thumb_func
 737              	vTaskResume:
 738              	.LFB8:
1126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 739              		.loc 1 1126 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              	.LVL89:
 744 0300 70B5     		push	{r4, r5, r6, lr}
 745              	.LCFI6:
 746              		.cfi_def_cfa_offset 16
 747              		.cfi_offset 4, -16
 748              		.cfi_offset 5, -12
 749              		.cfi_offset 6, -8
 750              		.cfi_offset 14, -4
1130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 751              		.loc 1 1130 0
 752 0302 0446     		mov	r4, r0
 753 0304 10B9     		cbnz	r0, .L90
1130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 754              		.loc 1 1130 0 is_stmt 0 discriminator 1
 755 0306 FFF7FEFF 		bl	ulPortSetInterruptMask
 756              	.LVL90:
 757              	.L91:
 758 030a FEE7     		b	.L91
 759              	.LVL91:
 760              	.L90:
1134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 761              		.loc 1 1134 0 is_stmt 1 discriminator 1
 762 030c 144D     		ldr	r5, .L97
 763 030e 2B68     		ldr	r3, [r5]
 764 0310 9842     		cmp	r0, r3
 765 0312 23D0     		beq	.L89
1136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 766              		.loc 1 1136 0
 767 0314 FFF7FEFF 		bl	vPortEnterCritical
 768              	.LVL92:
1138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 769              		.loc 1 1138 0
 770 0318 2046     		mov	r0, r4
 771 031a FFF7FEFF 		bl	xTaskIsTaskSuspended
 772              	.LVL93:
 773 031e 0128     		cmp	r0, #1
 774 0320 18D1     		bne	.L94
1144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 775              		.loc 1 1144 0
 776 0322 261D     		adds	r6, r4, #4
 777 0324 3046     		mov	r0, r6
 778 0326 FFF7FEFF 		bl	uxListRemove
 779              	.LVL94:
1145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 780              		.loc 1 1145 0
 781 032a E36A     		ldr	r3, [r4, #44]
 782 032c D5F8E420 		ldr	r2, [r5, #228]
 783 0330 9342     		cmp	r3, r2
 784 0332 0C4A     		ldr	r2, .L97+4
 785 0334 88BF     		it	hi
 786 0336 C5F8E430 		strhi	r3, [r5, #228]
 787 033a 1420     		movs	r0, #20
 788 033c 00FB0320 		mla	r0, r0, r3, r2
 789 0340 3146     		mov	r1, r6
 790 0342 FFF7FEFF 		bl	vListInsertEnd
 791              	.LVL95:
1148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 792              		.loc 1 1148 0
 793 0346 2B68     		ldr	r3, [r5]
 794 0348 E26A     		ldr	r2, [r4, #44]
 795 034a DB6A     		ldr	r3, [r3, #44]
 796 034c 9A42     		cmp	r2, r3
 797 034e 01D3     		bcc	.L94
1152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						portYIELD_WITHIN_API();
 798              		.loc 1 1152 0
 799 0350 FFF7FEFF 		bl	vPortYield
 800              	.LVL96:
 801              	.L94:
1158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 802              		.loc 1 1158 0
 803 0354 BDE87040 		pop	{r4, r5, r6, lr}
 804              	.LVL97:
1156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 805              		.loc 1 1156 0
 806 0358 FFF7FEBF 		b	vPortExitCritical
 807              	.LVL98:
 808              	.L89:
 809 035c 70BD     		pop	{r4, r5, r6, pc}
 810              	.L98:
 811 035e 00BF     		.align	2
 812              	.L97:
 813 0360 00000000 		.word	.LANCHOR0
 814 0364 14000000 		.word	.LANCHOR0+20
 815              		.cfi_endproc
 816              	.LFE8:
 818              		.align	1
 819              		.global	xTaskResumeFromISR
 820              		.thumb
 821              		.thumb_func
 823              	xTaskResumeFromISR:
 824              	.LFB9:
1167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 825              		.loc 1 1167 0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829              	.LVL99:
 830 0368 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 831              	.LCFI7:
 832              		.cfi_def_cfa_offset 24
 833              		.cfi_offset 4, -24
 834              		.cfi_offset 5, -20
 835              		.cfi_offset 6, -16
 836              		.cfi_offset 7, -12
 837              		.cfi_offset 8, -8
 838              		.cfi_offset 14, -4
1172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 839              		.loc 1 1172 0
 840 036c 0446     		mov	r4, r0
 841 036e 10B9     		cbnz	r0, .L100
1172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 842              		.loc 1 1172 0 is_stmt 0 discriminator 1
 843 0370 FFF7FEFF 		bl	ulPortSetInterruptMask
 844              	.LVL100:
 845              	.L101:
 846 0374 FEE7     		b	.L101
 847              	.LVL101:
 848              	.L100:
1190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 849              		.loc 1 1190 0 is_stmt 1
 850 0376 FFF7FEFF 		bl	vPortValidateInterruptPriority
 851              	.LVL102:
1192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 852              		.loc 1 1192 0
 853 037a FFF7FEFF 		bl	ulPortSetInterruptMask
 854              	.LVL103:
 855 037e 8046     		mov	r8, r0
 856              	.LVL104:
1194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 857              		.loc 1 1194 0
 858 0380 2046     		mov	r0, r4
 859              	.LVL105:
 860 0382 FFF7FEFF 		bl	xTaskIsTaskSuspended
 861              	.LVL106:
 862 0386 0128     		cmp	r0, #1
 863 0388 23D1     		bne	.L105
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 864              		.loc 1 1198 0
 865 038a 154D     		ldr	r5, .L106
 866 038c D5F8EC30 		ldr	r3, [r5, #236]
 867 0390 CBB9     		cbnz	r3, .L103
1200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 868              		.loc 1 1200 0
 869 0392 2A68     		ldr	r2, [r5]
 870 0394 E36A     		ldr	r3, [r4, #44]
 871 0396 D66A     		ldr	r6, [r2, #44]
1205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 872              		.loc 1 1205 0
 873 0398 271D     		adds	r7, r4, #4
1200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 874              		.loc 1 1200 0
 875 039a B342     		cmp	r3, r6
1205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 876              		.loc 1 1205 0
 877 039c 3846     		mov	r0, r7
1200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 878              		.loc 1 1200 0
 879 039e 34BF     		ite	cc
 880 03a0 0026     		movcc	r6, #0
 881 03a2 0126     		movcs	r6, #1
 882              	.LVL107:
1205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 883              		.loc 1 1205 0
 884 03a4 FFF7FEFF 		bl	uxListRemove
 885              	.LVL108:
1206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 886              		.loc 1 1206 0
 887 03a8 E36A     		ldr	r3, [r4, #44]
 888 03aa D5F8E420 		ldr	r2, [r5, #228]
 889 03ae 9342     		cmp	r3, r2
 890 03b0 0C4A     		ldr	r2, .L106+4
 891 03b2 88BF     		it	hi
 892 03b4 C5F8E430 		strhi	r3, [r5, #228]
 893 03b8 1420     		movs	r0, #20
 894 03ba 00FB0320 		mla	r0, r0, r3, r2
 895 03be 3946     		mov	r1, r7
 896 03c0 FFF7FEFF 		bl	vListInsertEnd
 897              	.LVL109:
 898 03c4 06E0     		b	.L102
 899              	.LVL110:
 900              	.L103:
1213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 901              		.loc 1 1213 0
 902 03c6 05F1A000 		add	r0, r5, #160
 903 03ca 04F11801 		add	r1, r4, #24
 904 03ce FFF7FEFF 		bl	vListInsertEnd
 905              	.LVL111:
 906              	.L105:
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 907              		.loc 1 1168 0
 908 03d2 0026     		movs	r6, #0
 909              	.LVL112:
 910              	.L102:
1217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 911              		.loc 1 1217 0
 912 03d4 4046     		mov	r0, r8
 913 03d6 FFF7FEFF 		bl	vPortClearInterruptMask
 914              	.LVL113:
1220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 915              		.loc 1 1220 0
 916 03da 3046     		mov	r0, r6
 917 03dc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 918              	.LVL114:
 919              	.L107:
 920              		.align	2
 921              	.L106:
 922 03e0 00000000 		.word	.LANCHOR0
 923 03e4 14000000 		.word	.LANCHOR0+20
 924              		.cfi_endproc
 925              	.LFE9:
 927              		.align	1
 928              		.global	vTaskStartScheduler
 929              		.thumb
 930              		.thumb_func
 932              	vTaskStartScheduler:
 933              	.LFB10:
1226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 934              		.loc 1 1226 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938 03e8 30B5     		push	{r4, r5, lr}
 939              	.LCFI8:
 940              		.cfi_def_cfa_offset 12
 941              		.cfi_offset 4, -12
 942              		.cfi_offset 5, -8
 943              		.cfi_offset 14, -4
 944 03ea 85B0     		sub	sp, sp, #20
 945              	.LCFI9:
 946              		.cfi_def_cfa_offset 32
1239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 947              		.loc 1 1239 0
 948 03ec 0024     		movs	r4, #0
 949 03ee 0094     		str	r4, [sp]
 950 03f0 0194     		str	r4, [sp, #4]
 951 03f2 0294     		str	r4, [sp, #8]
 952 03f4 0394     		str	r4, [sp, #12]
 953 03f6 1048     		ldr	r0, .L112
 954 03f8 1049     		ldr	r1, .L112+4
 955 03fa 4FF4A072 		mov	r2, #320
 956 03fe 2346     		mov	r3, r4
 957 0400 FFF7FEFF 		bl	xTaskGenericCreate
 958              	.LVL115:
1245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 959              		.loc 1 1245 0
 960 0404 0128     		cmp	r0, #1
1239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 961              		.loc 1 1239 0
 962 0406 0546     		mov	r5, r0
 963              	.LVL116:
1245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 964              		.loc 1 1245 0
 965 0408 0FD1     		bne	.L109
1247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 966              		.loc 1 1247 0
 967 040a FFF7FEFF 		bl	xTimerCreateTimerTask
 968              	.LVL117:
1252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 969              		.loc 1 1252 0
 970 040e 0128     		cmp	r0, #1
1247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 971              		.loc 1 1247 0
 972 0410 0546     		mov	r5, r0
 973              	.LVL118:
1252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 974              		.loc 1 1252 0
 975 0412 0AD1     		bne	.L109
1259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
 976              		.loc 1 1259 0
 977 0414 FFF7FEFF 		bl	ulPortSetInterruptMask
 978              	.LVL119:
1269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 979              		.loc 1 1269 0
 980 0418 094B     		ldr	r3, .L112+8
 981 041a C3F8DC50 		str	r5, [r3, #220]
1270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
 982              		.loc 1 1270 0
 983 041e 5C60     		str	r4, [r3, #4]
1296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 984              		.loc 1 1296 0
 985 0420 05B0     		add	sp, sp, #20
 986              		@ sp needed
 987 0422 BDE83040 		pop	{r4, r5, lr}
 988              	.LVL120:
1279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 989              		.loc 1 1279 0
 990 0426 FFF7FEBF 		b	xPortStartScheduler
 991              	.LVL121:
 992              	.L109:
1294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn );
 993              		.loc 1 1294 0
 994 042a 15B9     		cbnz	r5, .L108
1294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn );
 995              		.loc 1 1294 0 is_stmt 0 discriminator 1
 996 042c FFF7FEFF 		bl	ulPortSetInterruptMask
 997              	.LVL122:
 998              	.L111:
 999 0430 FEE7     		b	.L111
 1000              	.LVL123:
 1001              	.L108:
1296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1002              		.loc 1 1296 0 is_stmt 1
 1003 0432 05B0     		add	sp, sp, #20
 1004              		@ sp needed
 1005 0434 30BD     		pop	{r4, r5, pc}
 1006              	.L113:
 1007 0436 00BF     		.align	2
 1008              	.L112:
 1009 0438 00000000 		.word	prvIdleTask
 1010 043c 00000000 		.word	.LC0
 1011 0440 00000000 		.word	.LANCHOR0
 1012              		.cfi_endproc
 1013              	.LFE10:
 1015              		.align	1
 1016              		.global	vTaskEndScheduler
 1017              		.thumb
 1018              		.thumb_func
 1020              	vTaskEndScheduler:
 1021              	.LFB11:
1300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1022              		.loc 1 1300 0
 1023              		.cfi_startproc
 1024              		@ args = 0, pretend = 0, frame = 0
 1025              		@ frame_needed = 0, uses_anonymous_args = 0
 1026 0444 08B5     		push	{r3, lr}
 1027              	.LCFI10:
 1028              		.cfi_def_cfa_offset 8
 1029              		.cfi_offset 3, -8
 1030              		.cfi_offset 14, -4
1304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
 1031              		.loc 1 1304 0
 1032 0446 FFF7FEFF 		bl	ulPortSetInterruptMask
 1033              	.LVL124:
1305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1034              		.loc 1 1305 0
 1035 044a 044B     		ldr	r3, .L115
 1036 044c 0022     		movs	r2, #0
 1037 044e C3F8DC20 		str	r2, [r3, #220]
1307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1038              		.loc 1 1307 0
 1039 0452 BDE80840 		pop	{r3, lr}
1306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1040              		.loc 1 1306 0
 1041 0456 FFF7FEBF 		b	vPortEndScheduler
 1042              	.LVL125:
 1043              	.L116:
 1044 045a 00BF     		.align	2
 1045              	.L115:
 1046 045c 00000000 		.word	.LANCHOR0
 1047              		.cfi_endproc
 1048              	.LFE11:
 1050              		.align	1
 1051              		.global	vTaskSuspendAll
 1052              		.thumb
 1053              		.thumb_func
 1055              	vTaskSuspendAll:
 1056              	.LFB12:
1311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1057              		.loc 1 1311 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 0
 1060              		@ frame_needed = 0, uses_anonymous_args = 0
 1061              		@ link register save eliminated.
1314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 1062              		.loc 1 1314 0
 1063 0460 034B     		ldr	r3, .L118
 1064 0462 D3F8EC20 		ldr	r2, [r3, #236]
 1065 0466 0132     		adds	r2, r2, #1
 1066 0468 C3F8EC20 		str	r2, [r3, #236]
 1067 046c 7047     		bx	lr
 1068              	.L119:
 1069 046e 00BF     		.align	2
 1070              	.L118:
 1071 0470 00000000 		.word	.LANCHOR0
 1072              		.cfi_endproc
 1073              	.LFE12:
 1075              		.align	1
 1076              		.global	xTaskGetTickCount
 1077              		.thumb
 1078              		.thumb_func
 1080              	xTaskGetTickCount:
 1081              	.LFB14:
1415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1082              		.loc 1 1415 0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 0
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 1086 0474 10B5     		push	{r4, lr}
 1087              	.LCFI11:
 1088              		.cfi_def_cfa_offset 8
 1089              		.cfi_offset 4, -8
 1090              		.cfi_offset 14, -4
1419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1091              		.loc 1 1419 0
 1092 0476 FFF7FEFF 		bl	vPortEnterCritical
 1093              	.LVL126:
1421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 1094              		.loc 1 1421 0
 1095 047a 034B     		ldr	r3, .L121
 1096 047c 5C68     		ldr	r4, [r3, #4]
 1097              	.LVL127:
1423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1098              		.loc 1 1423 0
 1099 047e FFF7FEFF 		bl	vPortExitCritical
 1100              	.LVL128:
1426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1101              		.loc 1 1426 0
 1102 0482 2046     		mov	r0, r4
 1103 0484 10BD     		pop	{r4, pc}
 1104              	.LVL129:
 1105              	.L122:
 1106 0486 00BF     		.align	2
 1107              	.L121:
 1108 0488 00000000 		.word	.LANCHOR0
 1109              		.cfi_endproc
 1110              	.LFE14:
 1112              		.align	1
 1113              		.global	xTaskGetTickCountFromISR
 1114              		.thumb
 1115              		.thumb_func
 1117              	xTaskGetTickCountFromISR:
 1118              	.LFB15:
1430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1119              		.loc 1 1430 0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 0
 1122              		@ frame_needed = 0, uses_anonymous_args = 0
 1123 048c 10B5     		push	{r4, lr}
 1124              	.LCFI12:
 1125              		.cfi_def_cfa_offset 8
 1126              		.cfi_offset 4, -8
 1127              		.cfi_offset 14, -4
1448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1128              		.loc 1 1448 0
 1129 048e FFF7FEFF 		bl	vPortValidateInterruptPriority
 1130              	.LVL130:
1450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1131              		.loc 1 1450 0
 1132 0492 FFF7FEFF 		bl	ulPortSetInterruptMask
 1133              	.LVL131:
1451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xReturn = xTickCount;
 1134              		.loc 1 1451 0
 1135 0496 034B     		ldr	r3, .L124
 1136 0498 5C68     		ldr	r4, [r3, #4]
 1137              	.LVL132:
1452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1138              		.loc 1 1452 0
 1139 049a FFF7FEFF 		bl	vPortClearInterruptMask
 1140              	.LVL133:
1455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1141              		.loc 1 1455 0
 1142 049e 2046     		mov	r0, r4
 1143 04a0 10BD     		pop	{r4, pc}
 1144              	.LVL134:
 1145              	.L125:
 1146 04a2 00BF     		.align	2
 1147              	.L124:
 1148 04a4 00000000 		.word	.LANCHOR0
 1149              		.cfi_endproc
 1150              	.LFE15:
 1152              		.align	1
 1153              		.global	uxTaskGetNumberOfTasks
 1154              		.thumb
 1155              		.thumb_func
 1157              	uxTaskGetNumberOfTasks:
 1158              	.LFB16:
1459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1159              		.loc 1 1459 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              		@ link register save eliminated.
1462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 1164              		.loc 1 1462 0
 1165 04a8 014B     		ldr	r3, .L127
 1166 04aa 1869     		ldr	r0, [r3, #16]
1463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1167              		.loc 1 1463 0
 1168 04ac 7047     		bx	lr
 1169              	.L128:
 1170 04ae 00BF     		.align	2
 1171              	.L127:
 1172 04b0 00000000 		.word	.LANCHOR0
 1173              		.cfi_endproc
 1174              	.LFE16:
 1176              		.align	1
 1177              		.global	xTaskIncrementTick
 1178              		.thumb
 1179              		.thumb_func
 1181              	xTaskIncrementTick:
 1182              	.LFB17:
1584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1183              		.loc 1 1584 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              	.LVL135:
 1188 04b4 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1189              	.LCFI13:
 1190              		.cfi_def_cfa_offset 32
 1191              		.cfi_offset 3, -32
 1192              		.cfi_offset 4, -28
 1193              		.cfi_offset 5, -24
 1194              		.cfi_offset 6, -20
 1195              		.cfi_offset 7, -16
 1196              		.cfi_offset 8, -12
 1197              		.cfi_offset 9, -8
 1198              		.cfi_offset 14, -4
1593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1199              		.loc 1 1593 0
 1200 04b8 3A4B     		ldr	r3, .L162
 1201 04ba D3F8EC20 		ldr	r2, [r3, #236]
 1202 04be 1C46     		mov	r4, r3
 1203 04c0 002A     		cmp	r2, #0
 1204 04c2 3FD1     		bne	.L130
1597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		++xTickCount;
 1205              		.loc 1 1597 0
 1206 04c4 5A68     		ldr	r2, [r3, #4]
 1207 04c6 0132     		adds	r2, r2, #1
 1208 04c8 5A60     		str	r2, [r3, #4]
 1209              	.LBB27:
1602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			const portTickType xConstTickCount = xTickCount;
 1210              		.loc 1 1602 0
 1211 04ca 5F68     		ldr	r7, [r3, #4]
 1212              	.LVL136:
1604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount == ( portTickType ) 0U )
 1213              		.loc 1 1604 0
 1214 04cc D7B9     		cbnz	r7, .L131
 1215              	.LBB28:
1606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 1216              		.loc 1 1606 0
 1217 04ce DB68     		ldr	r3, [r3, #12]
 1218 04d0 1B68     		ldr	r3, [r3]
 1219 04d2 13B1     		cbz	r3, .L132
1606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 1220              		.loc 1 1606 0 is_stmt 0 discriminator 1
 1221 04d4 FFF7FEFF 		bl	ulPortSetInterruptMask
 1222              	.LVL137:
 1223              	.L133:
 1224 04d8 FEE7     		b	.L133
 1225              	.L132:
1606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 1226              		.loc 1 1606 0 discriminator 2
 1227 04da E368     		ldr	r3, [r4, #12]
 1228              	.LVL138:
 1229 04dc A268     		ldr	r2, [r4, #8]
 1230 04de E260     		str	r2, [r4, #12]
 1231 04e0 A360     		str	r3, [r4, #8]
 1232 04e2 D4F8F030 		ldr	r3, [r4, #240]
 1233              	.LVL139:
 1234 04e6 0133     		adds	r3, r3, #1
 1235 04e8 C4F8F030 		str	r3, [r4, #240]
 1236              	.LVL140:
 1237 04ec E368     		ldr	r3, [r4, #12]
 1238 04ee 1A68     		ldr	r2, [r3]
 1239 04f0 2D4B     		ldr	r3, .L162+4
 1240 04f2 12B9     		cbnz	r2, .L161
1606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 1241              		.loc 1 1606 0
 1242 04f4 4FF0FF32 		mov	r2, #-1
 1243 04f8 03E0     		b	.L159
 1244              	.L161:
 1245 04fa E268     		ldr	r2, [r4, #12]
 1246              	.LVL141:
 1247 04fc D268     		ldr	r2, [r2, #12]
 1248              	.LVL142:
 1249 04fe D268     		ldr	r2, [r2, #12]
 1250              	.LVL143:
 1251 0500 5268     		ldr	r2, [r2, #4]
 1252              	.LVL144:
 1253              	.L159:
 1254 0502 1A60     		str	r2, [r3]
 1255              	.L131:
 1256              	.LBE28:
1613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
 1257              		.loc 1 1613 0 is_stmt 1
 1258 0504 284B     		ldr	r3, .L162+4
 1259 0506 1A68     		ldr	r2, [r3]
 1260 0508 9742     		cmp	r7, r2
 1261 050a 4FF00005 		mov	r5, #0
 1262 050e 9846     		mov	r8, r3
 1263 0510 0ED3     		bcc	.L136
 1264              	.LVL145:
 1265              	.L137:
1617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1266              		.loc 1 1617 0
 1267 0512 E368     		ldr	r3, [r4, #12]
 1268 0514 1B68     		ldr	r3, [r3]
 1269 0516 13B9     		cbnz	r3, .L156
1623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
 1270              		.loc 1 1623 0
 1271 0518 4FF0FF33 		mov	r3, #-1
 1272 051c 06E0     		b	.L160
 1273              	.L156:
1632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 1274              		.loc 1 1632 0
 1275 051e 214B     		ldr	r3, .L162
 1276 0520 DB68     		ldr	r3, [r3, #12]
 1277 0522 DB68     		ldr	r3, [r3, #12]
 1278 0524 DE68     		ldr	r6, [r3, #12]
 1279              	.LVL146:
1633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 1280              		.loc 1 1633 0
 1281 0526 7368     		ldr	r3, [r6, #4]
 1282              	.LVL147:
1635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						if( xConstTickCount < xItemValue )
 1283              		.loc 1 1635 0
 1284 0528 9F42     		cmp	r7, r3
 1285 052a 12D2     		bcs	.L158
 1286              	.LVL148:
 1287              	.L160:
1623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
 1288              		.loc 1 1623 0
 1289 052c C8F80030 		str	r3, [r8]
 1290              	.LVL149:
 1291              	.L136:
 1292              	.LBE27:
1683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned p
 1293              		.loc 1 1683 0
 1294 0530 2368     		ldr	r3, [r4]
 1295 0532 DB6A     		ldr	r3, [r3, #44]
 1296 0534 1422     		movs	r2, #20
 1297 0536 02FB0343 		mla	r3, r2, r3, r4
 1298 053a 5B69     		ldr	r3, [r3, #20]
1685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 1299              		.loc 1 1685 0
 1300 053c 022B     		cmp	r3, #2
 1301 053e 28BF     		it	cs
 1302 0540 0125     		movcs	r5, #1
 1303              	.LVL150:
 1304 0542 27E0     		b	.L144
 1305              	.LVL151:
 1306              	.L130:
1703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 1307              		.loc 1 1703 0
 1308 0544 D3F8F430 		ldr	r3, [r3, #244]
 1309 0548 0133     		adds	r3, r3, #1
 1310 054a C4F8F430 		str	r3, [r4, #244]
1587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xSwitchRequired = pdFALSE;
 1311              		.loc 1 1587 0
 1312 054e 0025     		movs	r5, #0
 1313 0550 20E0     		b	.L144
 1314              	.LVL152:
 1315              	.L158:
 1316              	.LBB29:
1646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1317              		.loc 1 1646 0
 1318 0552 06F10409 		add	r9, r6, #4
 1319 0556 4846     		mov	r0, r9
 1320 0558 FFF7FEFF 		bl	uxListRemove
 1321              	.LVL153:
1650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1322              		.loc 1 1650 0
 1323 055c B36A     		ldr	r3, [r6, #40]
 1324 055e 1BB1     		cbz	r3, .L140
1652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1325              		.loc 1 1652 0
 1326 0560 06F11800 		add	r0, r6, #24
 1327 0564 FFF7FEFF 		bl	uxListRemove
 1328              	.LVL154:
 1329              	.L140:
1657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 1330              		.loc 1 1657 0
 1331 0568 F36A     		ldr	r3, [r6, #44]
 1332 056a D4F8E420 		ldr	r2, [r4, #228]
 1333 056e 9342     		cmp	r3, r2
 1334 0570 84BF     		itt	hi
 1335 0572 0C4A     		ldrhi	r2, .L162
 1336 0574 C2F8E430 		strhi	r3, [r2, #228]
 1337 0578 0C4A     		ldr	r2, .L162+8
 1338 057a 1420     		movs	r0, #20
 1339 057c 00FB0320 		mla	r0, r0, r3, r2
 1340 0580 4946     		mov	r1, r9
 1341 0582 FFF7FEFF 		bl	vListInsertEnd
 1342              	.LVL155:
1667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1343              		.loc 1 1667 0
 1344 0586 2368     		ldr	r3, [r4]
 1345 0588 F26A     		ldr	r2, [r6, #44]
 1346 058a DB6A     		ldr	r3, [r3, #44]
1669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 								xSwitchRequired = pdTRUE;
 1347              		.loc 1 1669 0
 1348 058c 9A42     		cmp	r2, r3
 1349 058e 28BF     		it	cs
 1350 0590 0125     		movcs	r5, #1
 1351              	.LVL156:
 1352 0592 BEE7     		b	.L137
 1353              	.LVL157:
 1354              	.L144:
 1355              	.LBE29:
1716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 1356              		.loc 1 1716 0
 1357 0594 D4F8F830 		ldr	r3, [r4, #248]
1718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 1358              		.loc 1 1718 0
 1359 0598 002B     		cmp	r3, #0
 1360 059a 18BF     		it	ne
 1361 059c 0125     		movne	r5, #1
 1362              	.LVL158:
1724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1363              		.loc 1 1724 0
 1364 059e 2846     		mov	r0, r5
 1365 05a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1366              	.L163:
 1367              		.align	2
 1368              	.L162:
 1369 05a4 00000000 		.word	.LANCHOR0
 1370 05a8 00000000 		.word	.LANCHOR1
 1371 05ac 14000000 		.word	.LANCHOR0+20
 1372              		.cfi_endproc
 1373              	.LFE17:
 1375              		.align	1
 1376              		.global	xTaskResumeAll
 1377              		.thumb
 1378              		.thumb_func
 1380              	xTaskResumeAll:
 1381              	.LFB13:
1347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1382              		.loc 1 1347 0
 1383              		.cfi_startproc
 1384              		@ args = 0, pretend = 0, frame = 0
 1385              		@ frame_needed = 0, uses_anonymous_args = 0
 1386              	.LVL159:
 1387 05b0 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1388              	.LCFI14:
 1389              		.cfi_def_cfa_offset 24
 1390              		.cfi_offset 3, -24
 1391              		.cfi_offset 4, -20
 1392              		.cfi_offset 5, -16
 1393              		.cfi_offset 6, -12
 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
1353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 1396              		.loc 1 1353 0
 1397 05b2 2E4C     		ldr	r4, .L188
 1398 05b4 D4F8EC30 		ldr	r3, [r4, #236]
 1399 05b8 13B9     		cbnz	r3, .L165
1353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 1400              		.loc 1 1353 0 is_stmt 0 discriminator 1
 1401 05ba FFF7FEFF 		bl	ulPortSetInterruptMask
 1402              	.LVL160:
 1403              	.L166:
 1404 05be FEE7     		b	.L166
 1405              	.L165:
1360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1406              		.loc 1 1360 0 is_stmt 1
 1407 05c0 FFF7FEFF 		bl	vPortEnterCritical
 1408              	.LVL161:
1362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 1409              		.loc 1 1362 0
 1410 05c4 D4F8EC30 		ldr	r3, [r4, #236]
 1411 05c8 013B     		subs	r3, r3, #1
 1412 05ca C4F8EC30 		str	r3, [r4, #236]
1364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1413              		.loc 1 1364 0
 1414 05ce D4F8EC30 		ldr	r3, [r4, #236]
 1415 05d2 0BB1     		cbz	r3, .L167
 1416              	.L169:
1349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xAlreadyYielded = pdFALSE;
 1417              		.loc 1 1349 0
 1418 05d4 0024     		movs	r4, #0
 1419 05d6 45E0     		b	.L168
 1420              	.L167:
1366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 1421              		.loc 1 1366 0
 1422 05d8 2369     		ldr	r3, [r4, #16]
 1423 05da 002B     		cmp	r3, #0
 1424 05dc FAD0     		beq	.L169
 1425              	.L173:
1370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 1426              		.loc 1 1370 0 discriminator 1
 1427 05de D4F8A030 		ldr	r3, [r4, #160]
 1428 05e2 224E     		ldr	r6, .L188
 1429 05e4 1BB3     		cbz	r3, .L187
1372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 1430              		.loc 1 1372 0
 1431 05e6 D6F8AC30 		ldr	r3, [r6, #172]
 1432 05ea DD68     		ldr	r5, [r3, #12]
 1433              	.LVL162:
1374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1434              		.loc 1 1374 0
 1435 05ec 2F1D     		adds	r7, r5, #4
1373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1436              		.loc 1 1373 0
 1437 05ee 05F11800 		add	r0, r5, #24
 1438 05f2 FFF7FEFF 		bl	uxListRemove
 1439              	.LVL163:
1374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1440              		.loc 1 1374 0
 1441 05f6 3846     		mov	r0, r7
 1442 05f8 FFF7FEFF 		bl	uxListRemove
 1443              	.LVL164:
1375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1444              		.loc 1 1375 0
 1445 05fc EB6A     		ldr	r3, [r5, #44]
 1446 05fe D6F8E420 		ldr	r2, [r6, #228]
 1447 0602 9342     		cmp	r3, r2
 1448 0604 88BF     		it	hi
 1449 0606 C6F8E430 		strhi	r3, [r6, #228]
 1450 060a 184E     		ldr	r6, .L188
 1451 060c 1420     		movs	r0, #20
 1452 060e 06F11402 		add	r2, r6, #20
 1453 0612 00FB0320 		mla	r0, r0, r3, r2
 1454 0616 3946     		mov	r1, r7
 1455 0618 FFF7FEFF 		bl	vListInsertEnd
 1456              	.LVL165:
1379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1457              		.loc 1 1379 0
 1458 061c 2368     		ldr	r3, [r4]
 1459 061e EA6A     		ldr	r2, [r5, #44]
 1460 0620 DB6A     		ldr	r3, [r3, #44]
 1461 0622 9A42     		cmp	r2, r3
1381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 1462              		.loc 1 1381 0
 1463 0624 24BF     		itt	cs
 1464 0626 0123     		movcs	r3, #1
 1465 0628 C6F8F830 		strcs	r3, [r6, #248]
 1466 062c D7E7     		b	.L173
 1467              	.LVL166:
 1468              	.L187:
1388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 1469              		.loc 1 1388 0
 1470 062e D6F8F430 		ldr	r3, [r6, #244]
 1471 0632 93B9     		cbnz	r3, .L177
 1472              	.L180:
1400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xYieldPending == pdTRUE )
 1473              		.loc 1 1400 0
 1474 0634 D4F8F840 		ldr	r4, [r4, #248]
 1475 0638 012C     		cmp	r4, #1
 1476 063a CBD1     		bne	.L169
 1477              	.LVL167:
1403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 1478              		.loc 1 1403 0
 1479 063c FFF7FEFF 		bl	vPortYield
 1480              	.LVL168:
 1481 0640 10E0     		b	.L168
 1482              	.LVL169:
 1483              	.L179:
1392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
 1484              		.loc 1 1392 0
 1485 0642 FFF7FEFF 		bl	xTaskIncrementTick
 1486              	.LVL170:
 1487 0646 18B1     		cbz	r0, .L178
1394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							xYieldPending = pdTRUE;
 1488              		.loc 1 1394 0
 1489 0648 084B     		ldr	r3, .L188
 1490 064a 0122     		movs	r2, #1
 1491 064c C3F8F820 		str	r2, [r3, #248]
 1492              	.L178:
1396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						--uxPendedTicks;
 1493              		.loc 1 1396 0
 1494 0650 D4F8F430 		ldr	r3, [r4, #244]
 1495 0654 013B     		subs	r3, r3, #1
 1496 0656 C4F8F430 		str	r3, [r4, #244]
 1497              	.L177:
1390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 1498              		.loc 1 1390 0 discriminator 1
 1499 065a D4F8F430 		ldr	r3, [r4, #244]
 1500 065e 002B     		cmp	r3, #0
 1501 0660 EFD1     		bne	.L179
 1502 0662 E7E7     		b	.L180
 1503              	.LVL171:
 1504              	.L168:
1408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1505              		.loc 1 1408 0
 1506 0664 FFF7FEFF 		bl	vPortExitCritical
 1507              	.LVL172:
1411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1508              		.loc 1 1411 0
 1509 0668 2046     		mov	r0, r4
 1510 066a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1511              	.LVL173:
 1512              	.L189:
 1513              		.align	2
 1514              	.L188:
 1515 066c 00000000 		.word	.LANCHOR0
 1516              		.cfi_endproc
 1517              	.LFE13:
 1519              		.align	1
 1520              		.global	vTaskDelayUntil
 1521              		.thumb
 1522              		.thumb_func
 1524              	vTaskDelayUntil:
 1525              	.LFB2:
 690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 1526              		.loc 1 690 0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 0
 1529              		@ frame_needed = 0, uses_anonymous_args = 0
 1530              	.LVL174:
 1531 0670 38B5     		push	{r3, r4, r5, lr}
 1532              	.LCFI15:
 1533              		.cfi_def_cfa_offset 16
 1534              		.cfi_offset 3, -16
 1535              		.cfi_offset 4, -12
 1536              		.cfi_offset 5, -8
 1537              		.cfi_offset 14, -4
 690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 1538              		.loc 1 690 0
 1539 0672 0C46     		mov	r4, r1
 694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1540              		.loc 1 694 0
 1541 0674 0546     		mov	r5, r0
 1542 0676 10B9     		cbnz	r0, .L191
 694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1543              		.loc 1 694 0 is_stmt 0 discriminator 1
 1544 0678 FFF7FEFF 		bl	ulPortSetInterruptMask
 1545              	.LVL175:
 1546              	.L192:
 1547 067c FEE7     		b	.L192
 1548              	.LVL176:
 1549              	.L191:
 695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1550              		.loc 1 695 0 is_stmt 1
 1551 067e 11B9     		cbnz	r1, .L193
 695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1552              		.loc 1 695 0 is_stmt 0 discriminator 1
 1553 0680 FFF7FEFF 		bl	ulPortSetInterruptMask
 1554              	.LVL177:
 1555              	.L194:
 1556 0684 FEE7     		b	.L194
 1557              	.LVL178:
 1558              	.L193:
 697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1559              		.loc 1 697 0 is_stmt 1
 1560 0686 FFF7FEFF 		bl	vTaskSuspendAll
 1561              	.LVL179:
 1562              	.LBB30:
 701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			const portTickType xConstTickCount = xTickCount;
 1563              		.loc 1 701 0
 1564 068a 1249     		ldr	r1, .L205
 704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1565              		.loc 1 704 0
 1566 068c 2A68     		ldr	r2, [r5]
 701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			const portTickType xConstTickCount = xTickCount;
 1567              		.loc 1 701 0
 1568 068e 4B68     		ldr	r3, [r1, #4]
 1569              	.LVL180:
 706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1570              		.loc 1 706 0
 1571 0690 9342     		cmp	r3, r2
 704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1572              		.loc 1 704 0
 1573 0692 1444     		add	r4, r4, r2
 1574              	.LVL181:
 706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1575              		.loc 1 706 0
 1576 0694 02D2     		bcs	.L195
 713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1577              		.loc 1 713 0
 1578 0696 9442     		cmp	r4, r2
 1579 0698 07D2     		bcs	.L199
 1580 069a 01E0     		b	.L204
 1581              	.L195:
 723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1582              		.loc 1 723 0
 1583 069c 9442     		cmp	r4, r2
 1584 069e 06D3     		bcc	.L200
 1585              	.L204:
 723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1586              		.loc 1 723 0 is_stmt 0 discriminator 1
 1587 06a0 9C42     		cmp	r4, r3
 1588 06a2 94BF     		ite	ls
 1589 06a4 0023     		movls	r3, #0
 1590              	.LVL182:
 1591 06a6 0123     		movhi	r3, #1
 1592 06a8 02E0     		b	.L196
 1593              	.LVL183:
 1594              	.L199:
 1595              	.LBE30:
 692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 1596              		.loc 1 692 0 is_stmt 1
 1597 06aa 0023     		movs	r3, #0
 1598              	.LVL184:
 1599 06ac 00E0     		b	.L196
 1600              	.LVL185:
 1601              	.L200:
 1602              	.LBB31:
 725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1603              		.loc 1 725 0
 1604 06ae 0123     		movs	r3, #1
 1605              	.LVL186:
 1606              	.L196:
 730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1607              		.loc 1 730 0
 1608 06b0 2C60     		str	r4, [r5]
 732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1609              		.loc 1 732 0
 1610 06b2 33B1     		cbz	r3, .L197
 739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 1611              		.loc 1 739 0
 1612 06b4 0868     		ldr	r0, [r1]
 1613 06b6 0430     		adds	r0, r0, #4
 1614 06b8 FFF7FEFF 		bl	uxListRemove
 1615              	.LVL187:
 747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 1616              		.loc 1 747 0
 1617 06bc 2046     		mov	r0, r4
 1618 06be FFF79FFC 		bl	prvAddCurrentTaskToDelayedList
 1619              	.LVL188:
 1620              	.L197:
 1621              	.LBE31:
 750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1622              		.loc 1 750 0
 1623 06c2 FFF7FEFF 		bl	xTaskResumeAll
 1624              	.LVL189:
 754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1625              		.loc 1 754 0
 1626 06c6 18B9     		cbnz	r0, .L190
 758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1627              		.loc 1 758 0
 1628 06c8 BDE83840 		pop	{r3, r4, r5, lr}
 1629              	.LVL190:
 756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1630              		.loc 1 756 0
 1631 06cc FFF7FEBF 		b	vPortYield
 1632              	.LVL191:
 1633              	.L190:
 1634 06d0 38BD     		pop	{r3, r4, r5, pc}
 1635              	.LVL192:
 1636              	.L206:
 1637 06d2 00BF     		.align	2
 1638              	.L205:
 1639 06d4 00000000 		.word	.LANCHOR0
 1640              		.cfi_endproc
 1641              	.LFE2:
 1643              		.align	1
 1644              		.global	vTaskDelay
 1645              		.thumb
 1646              		.thumb_func
 1648              	vTaskDelay:
 1649              	.LFB3:
 766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 1650              		.loc 1 766 0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 0
 1653              		@ frame_needed = 0, uses_anonymous_args = 0
 1654              	.LVL193:
 1655 06d8 10B5     		push	{r4, lr}
 1656              	.LCFI16:
 1657              		.cfi_def_cfa_offset 8
 1658              		.cfi_offset 4, -8
 1659              		.cfi_offset 14, -4
 771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 1660              		.loc 1 771 0
 1661 06da 0446     		mov	r4, r0
 1662 06dc 18B9     		cbnz	r0, .L208
 1663              	.LVL194:
 1664              	.L209:
 810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1665              		.loc 1 810 0
 1666 06de BDE81040 		pop	{r4, lr}
 808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1667              		.loc 1 808 0
 1668 06e2 FFF7FEBF 		b	vPortYield
 1669              	.LVL195:
 1670              	.L208:
 773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1671              		.loc 1 773 0
 1672 06e6 FFF7FEFF 		bl	vTaskSuspendAll
 1673              	.LVL196:
 787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 1674              		.loc 1 787 0
 1675 06ea 074B     		ldr	r3, .L213
 1676 06ec 5A68     		ldr	r2, [r3, #4]
 792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 1677              		.loc 1 792 0
 1678 06ee 1868     		ldr	r0, [r3]
 787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 1679              		.loc 1 787 0
 1680 06f0 1444     		add	r4, r4, r2
 1681              	.LVL197:
 792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 1682              		.loc 1 792 0
 1683 06f2 0430     		adds	r0, r0, #4
 1684 06f4 FFF7FEFF 		bl	uxListRemove
 1685              	.LVL198:
 799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 1686              		.loc 1 799 0
 1687 06f8 2046     		mov	r0, r4
 1688 06fa FFF781FC 		bl	prvAddCurrentTaskToDelayedList
 1689              	.LVL199:
 801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1690              		.loc 1 801 0
 1691 06fe FFF7FEFF 		bl	xTaskResumeAll
 1692              	.LVL200:
 806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1693              		.loc 1 806 0
 1694 0702 0028     		cmp	r0, #0
 1695 0704 EBD0     		beq	.L209
 810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1696              		.loc 1 810 0
 1697 0706 10BD     		pop	{r4, pc}
 1698              	.LVL201:
 1699              	.L214:
 1700              		.align	2
 1701              	.L213:
 1702 0708 00000000 		.word	.LANCHOR0
 1703              		.cfi_endproc
 1704              	.LFE3:
 1706              		.align	1
 1707              		.thumb
 1708              		.thumb_func
 1710              	prvIdleTask:
 1711              	.LFB25:
2129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1712              		.loc 1 2129 0
 1713              		.cfi_startproc
 1714              		@ Volatile: function does not return.
 1715              		@ args = 0, pretend = 0, frame = 0
 1716              		@ frame_needed = 0, uses_anonymous_args = 0
 1717              	.LVL202:
 1718 070c 08B5     		push	{r3, lr}
 1719              	.LCFI17:
 1720              		.cfi_def_cfa_offset 8
 1721              		.cfi_offset 3, -8
 1722              		.cfi_offset 14, -4
 1723              	.LVL203:
 1724              	.L216:
 1725              	.LBB39:
 1726              	.LBB40:
2399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 1727              		.loc 1 2399 0
 1728 070e 164C     		ldr	r4, .L223
 1729 0710 D4F8E830 		ldr	r3, [r4, #232]
 1730 0714 03B3     		cbz	r3, .L217
2401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1731              		.loc 1 2401 0
 1732 0716 FFF7FEFF 		bl	vTaskSuspendAll
 1733              	.LVL204:
2402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 1734              		.loc 1 2402 0
 1735 071a D4F8B450 		ldr	r5, [r4, #180]
 1736              	.LVL205:
2403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
 1737              		.loc 1 2403 0
 1738 071e FFF7FEFF 		bl	xTaskResumeAll
 1739              	.LVL206:
2405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 1740              		.loc 1 2405 0
 1741 0722 002D     		cmp	r5, #0
 1742 0724 F3D0     		beq	.L216
 1743              	.LBB41:
2409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 1744              		.loc 1 2409 0
 1745 0726 FFF7FEFF 		bl	vPortEnterCritical
 1746              	.LVL207:
2411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 1747              		.loc 1 2411 0
 1748 072a D4F8C030 		ldr	r3, [r4, #192]
 1749 072e DD68     		ldr	r5, [r3, #12]
 1750              	.LVL208:
2412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1751              		.loc 1 2412 0
 1752 0730 281D     		adds	r0, r5, #4
 1753 0732 FFF7FEFF 		bl	uxListRemove
 1754              	.LVL209:
2413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 1755              		.loc 1 2413 0
 1756 0736 2369     		ldr	r3, [r4, #16]
 1757 0738 013B     		subs	r3, r3, #1
 1758 073a 2361     		str	r3, [r4, #16]
2414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
 1759              		.loc 1 2414 0
 1760 073c D4F8E830 		ldr	r3, [r4, #232]
 1761 0740 013B     		subs	r3, r3, #1
 1762 0742 C4F8E830 		str	r3, [r4, #232]
2416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 1763              		.loc 1 2416 0
 1764 0746 FFF7FEFF 		bl	vPortExitCritical
 1765              	.LVL210:
 1766              	.LBB42:
 1767              	.LBB43:
2477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return pxNewTCB;
2481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static unsigned portBASE_TYPE prvListTaskWithinSingleList( xTaskStatusType *pxTaskStatusArray, xLi
2487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTask = 0;
2490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( unsigned portBASE_TYPE ) 0 )
2492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Populate an xTaskStatusType structure within the
2496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
2497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of xTaskStatusType in task.h for the
2498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			meaning of each xTaskStatusType structure member. */
2499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			do
2500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( xTaskHandle ) pxNextTCB;
2504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const signed char * ) &( pxNextTCB->pcTaskName [ 0 ]
2505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
2506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
2507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
2508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
2510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
2512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#else
2514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
2516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#endif
2518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
2520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
2522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#else
2524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
2526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#endif
2528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
2530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					ppxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( unsigned cha
2532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#else
2534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( unsigned char
2536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#endif
2538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxTask++;
2540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return uxTask;
2545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static unsigned short prvTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned short usCount = 0U;
2555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
2557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
2559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			usCount++;
2560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
2563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return usCount;
2565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
2568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned char *pcEndOfStack;
2576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
2581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
2583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#else
2585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif
2589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) prvTaskCheckFreeStackSpace( pcEndOfStack );
2591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return uxReturn;
2593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
2596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
2603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
2604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
2605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
2606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the task to free any memory allocated at the application level. */
2609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 1768              		.loc 1 2609 0
 1769 074a 286B     		ldr	r0, [r5, #48]
 1770 074c FFF7FEFF 		bl	vPortFree
 1771              	.LVL211:
2610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vPortFree( pxTCB );
 1772              		.loc 1 2610 0
 1773 0750 2846     		mov	r0, r5
 1774 0752 FFF7FEFF 		bl	vPortFree
 1775              	.LVL212:
 1776 0756 DAE7     		b	.L216
 1777              	.LVL213:
 1778              	.L217:
 1779              	.LBE43:
 1780              	.LBE42:
 1781              	.LBE41:
 1782              	.LBE40:
 1783              	.LBE39:
2159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
 1784              		.loc 1 2159 0
 1785 0758 6369     		ldr	r3, [r4, #20]
 1786 075a 012B     		cmp	r3, #1
 1787 075c 01D9     		bls	.L219
2161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 1788              		.loc 1 2161 0
 1789 075e FFF7FEFF 		bl	vPortYield
 1790              	.LVL214:
 1791              	.L219:
 1792              	.LBB44:
2175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
 1793              		.loc 1 2175 0
 1794 0762 FFF7FEFF 		bl	vApplicationIdleHook
 1795              	.LVL215:
 1796              	.LBE44:
2215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1797              		.loc 1 2215 0
 1798 0766 D2E7     		b	.L216
 1799              	.L224:
 1800              		.align	2
 1801              	.L223:
 1802 0768 00000000 		.word	.LANCHOR0
 1803              		.cfi_endproc
 1804              	.LFE25:
 1806              		.align	1
 1807              		.global	vTaskSwitchContext
 1808              		.thumb
 1809              		.thumb_func
 1811              	vTaskSwitchContext:
 1812              	.LFB18:
1815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1813              		.loc 1 1815 0
 1814              		.cfi_startproc
 1815              		@ args = 0, pretend = 0, frame = 0
 1816              		@ frame_needed = 0, uses_anonymous_args = 0
 1817 076c 38B5     		push	{r3, r4, r5, lr}
 1818              	.LCFI18:
 1819              		.cfi_def_cfa_offset 16
 1820              		.cfi_offset 3, -16
 1821              		.cfi_offset 4, -12
 1822              		.cfi_offset 5, -8
 1823              		.cfi_offset 14, -4
1816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 1824              		.loc 1 1816 0
 1825 076e 254B     		ldr	r3, .L239
 1826 0770 D3F8EC20 		ldr	r2, [r3, #236]
 1827 0774 1C46     		mov	r4, r3
 1828 0776 1AB1     		cbz	r2, .L226
1820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 1829              		.loc 1 1820 0
 1830 0778 0122     		movs	r2, #1
 1831 077a C3F8F820 		str	r2, [r3, #248]
 1832 077e 38BD     		pop	{r3, r4, r5, pc}
 1833              	.L226:
1824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
 1834              		.loc 1 1824 0
 1835 0780 C3F8F820 		str	r2, [r3, #248]
1850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 1836              		.loc 1 1850 0
 1837 0784 1A68     		ldr	r2, [r3]
 1838 0786 1B68     		ldr	r3, [r3]
 1839 0788 1268     		ldr	r2, [r2]
 1840 078a 1B6B     		ldr	r3, [r3, #48]
 1841 078c 9A42     		cmp	r2, r3
 1842 078e 04D8     		bhi	.L228
1850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 1843              		.loc 1 1850 0 is_stmt 0 discriminator 1
 1844 0790 2068     		ldr	r0, [r4]
 1845 0792 2168     		ldr	r1, [r4]
 1846 0794 3431     		adds	r1, r1, #52
 1847 0796 FFF7FEFF 		bl	vApplicationStackOverflowHook
 1848              	.LVL216:
 1849              	.L228:
 1850              	.LBB45:
1851:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 1851              		.loc 1 1851 0 is_stmt 1
 1852 079a 2368     		ldr	r3, [r4]
 1853 079c 1A49     		ldr	r1, .L239+4
 1854 079e 186B     		ldr	r0, [r3, #48]
 1855 07a0 184D     		ldr	r5, .L239
 1856 07a2 1422     		movs	r2, #20
 1857 07a4 FFF7FEFF 		bl	memcmp
 1858              	.LVL217:
 1859 07a8 50B1     		cbz	r0, .L230
1851:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 1860              		.loc 1 1851 0 is_stmt 0 discriminator 1
 1861 07aa 2868     		ldr	r0, [r5]
 1862 07ac 2968     		ldr	r1, [r5]
 1863 07ae 3431     		adds	r1, r1, #52
 1864 07b0 FFF7FEFF 		bl	vApplicationStackOverflowHook
 1865              	.LVL218:
 1866 07b4 04E0     		b	.L230
 1867              	.L231:
 1868              	.LBE45:
1853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1869              		.loc 1 1853 0 is_stmt 1 discriminator 2
 1870 07b6 D2F8E430 		ldr	r3, [r2, #228]
 1871 07ba 013B     		subs	r3, r3, #1
 1872 07bc C2F8E430 		str	r3, [r2, #228]
 1873              	.L230:
1853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1874              		.loc 1 1853 0 is_stmt 0 discriminator 1
 1875 07c0 D4F8E430 		ldr	r3, [r4, #228]
 1876 07c4 0F4A     		ldr	r2, .L239
 1877 07c6 1421     		movs	r1, #20
 1878 07c8 01FB0343 		mla	r3, r1, r3, r4
 1879 07cc 5B69     		ldr	r3, [r3, #20]
 1880 07ce 33B9     		cbnz	r3, .L238
1853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1881              		.loc 1 1853 0 discriminator 2
 1882 07d0 D2F8E430 		ldr	r3, [r2, #228]
 1883 07d4 002B     		cmp	r3, #0
 1884 07d6 EED1     		bne	.L231
1853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1885              		.loc 1 1853 0 discriminator 1
 1886 07d8 FFF7FEFF 		bl	ulPortSetInterruptMask
 1887              	.LVL219:
 1888              	.L232:
 1889 07dc FEE7     		b	.L232
 1890              	.L238:
 1891              	.LBB46:
1853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1892              		.loc 1 1853 0 discriminator 3
 1893 07de D2F8E430 		ldr	r3, [r2, #228]
 1894 07e2 0A44     		add	r2, r2, r1
 1895 07e4 01FB0323 		mla	r3, r1, r3, r2
 1896              	.LVL220:
 1897 07e8 03F10801 		add	r1, r3, #8
 1898 07ec 5A68     		ldr	r2, [r3, #4]
 1899 07ee 5268     		ldr	r2, [r2, #4]
 1900 07f0 5A60     		str	r2, [r3, #4]
 1901 07f2 8A42     		cmp	r2, r1
 1902 07f4 04BF     		itt	eq
 1903 07f6 5268     		ldreq	r2, [r2, #4]
 1904 07f8 5A60     		streq	r2, [r3, #4]
 1905 07fa 5B68     		ldr	r3, [r3, #4]
 1906              	.LVL221:
 1907 07fc DB68     		ldr	r3, [r3, #12]
 1908 07fe 2360     		str	r3, [r4]
 1909 0800 38BD     		pop	{r3, r4, r5, pc}
 1910              	.L240:
 1911 0802 00BF     		.align	2
 1912              	.L239:
 1913 0804 00000000 		.word	.LANCHOR0
 1914 0808 00000000 		.word	.LANCHOR2
 1915              	.LBE46:
 1916              		.cfi_endproc
 1917              	.LFE18:
 1919              		.align	1
 1920              		.global	vTaskSuspend
 1921              		.thumb
 1922              		.thumb_func
 1924              	vTaskSuspend:
 1925              	.LFB6:
1031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 1926              		.loc 1 1031 0 is_stmt 1
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 0
 1929              		@ frame_needed = 0, uses_anonymous_args = 0
 1930              	.LVL222:
 1931 080c F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1932              	.LCFI19:
 1933              		.cfi_def_cfa_offset 24
 1934              		.cfi_offset 3, -24
 1935              		.cfi_offset 4, -20
 1936              		.cfi_offset 5, -16
 1937              		.cfi_offset 6, -12
 1938              		.cfi_offset 7, -8
 1939              		.cfi_offset 14, -4
1031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 1940              		.loc 1 1031 0
 1941 080e 0446     		mov	r4, r0
 1942 0810 164E     		ldr	r6, .L250
1034:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1943              		.loc 1 1034 0
 1944 0812 FFF7FEFF 		bl	vPortEnterCritical
 1945              	.LVL223:
1038:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1946              		.loc 1 1038 0
 1947 0816 04B9     		cbnz	r4, .L242
1038:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1948              		.loc 1 1038 0 is_stmt 0 discriminator 1
 1949 0818 3468     		ldr	r4, [r6]
 1950              	.LVL224:
 1951              	.L242:
1043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 1952              		.loc 1 1043 0 is_stmt 1 discriminator 3
 1953 081a 271D     		adds	r7, r4, #4
 1954 081c 3846     		mov	r0, r7
 1955 081e FFF7FEFF 		bl	uxListRemove
 1956              	.LVL225:
1049:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1957              		.loc 1 1049 0 discriminator 3
 1958 0822 A36A     		ldr	r3, [r4, #40]
 1959 0824 1BB1     		cbz	r3, .L243
1051:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1960              		.loc 1 1051 0
 1961 0826 04F11800 		add	r0, r4, #24
 1962 082a FFF7FEFF 		bl	uxListRemove
 1963              	.LVL226:
 1964              	.L243:
1054:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1965              		.loc 1 1054 0
 1966 082e 0F4D     		ldr	r5, .L250
 1967 0830 3946     		mov	r1, r7
 1968 0832 05F1C800 		add	r0, r5, #200
 1969 0836 FFF7FEFF 		bl	vListInsertEnd
 1970              	.LVL227:
1056:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1971              		.loc 1 1056 0
 1972 083a FFF7FEFF 		bl	vPortExitCritical
 1973              	.LVL228:
1058:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1974              		.loc 1 1058 0
 1975 083e 3368     		ldr	r3, [r6]
 1976 0840 9C42     		cmp	r4, r3
 1977 0842 11D1     		bne	.L241
1060:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1978              		.loc 1 1060 0
 1979 0844 D5F8DC30 		ldr	r3, [r5, #220]
 1980 0848 1BB1     		cbz	r3, .L245
1084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1981              		.loc 1 1084 0
 1982 084a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 1983              	.LVL229:
1063:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1984              		.loc 1 1063 0
 1985 084e FFF7FEBF 		b	vPortYield
 1986              	.LVL230:
 1987              	.L245:
1070:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1988              		.loc 1 1070 0
 1989 0852 2969     		ldr	r1, [r5, #16]
 1990 0854 D5F8C820 		ldr	r2, [r5, #200]
 1991 0858 8A42     		cmp	r2, r1
 1992 085a 01D1     		bne	.L246
1076:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1993              		.loc 1 1076 0
 1994 085c 2B60     		str	r3, [r5]
 1995 085e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1996              	.LVL231:
 1997              	.L246:
1084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1998              		.loc 1 1084 0
 1999 0860 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 2000              	.LVL232:
1080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
 2001              		.loc 1 1080 0
 2002 0864 FFF7FEBF 		b	vTaskSwitchContext
 2003              	.LVL233:
 2004              	.L241:
 2005 0868 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2006              	.LVL234:
 2007              	.L251:
 2008 086a 00BF     		.align	2
 2009              	.L250:
 2010 086c 00000000 		.word	.LANCHOR0
 2011              		.cfi_endproc
 2012              	.LFE6:
 2014              		.align	1
 2015              		.global	vTaskPlaceOnEventList
 2016              		.thumb
 2017              		.thumb_func
 2019              	vTaskPlaceOnEventList:
 2020              	.LFB19:
1869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2021              		.loc 1 1869 0
 2022              		.cfi_startproc
 2023              		@ args = 0, pretend = 0, frame = 0
 2024              		@ frame_needed = 0, uses_anonymous_args = 0
 2025              	.LVL235:
 2026 0870 38B5     		push	{r3, r4, r5, lr}
 2027              	.LCFI20:
 2028              		.cfi_def_cfa_offset 16
 2029              		.cfi_offset 3, -16
 2030              		.cfi_offset 4, -12
 2031              		.cfi_offset 5, -8
 2032              		.cfi_offset 14, -4
1869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2033              		.loc 1 1869 0
 2034 0872 0D46     		mov	r5, r1
1872:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2035              		.loc 1 1872 0
 2036 0874 10B9     		cbnz	r0, .L253
1872:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2037              		.loc 1 1872 0 is_stmt 0 discriminator 1
 2038 0876 FFF7FEFF 		bl	ulPortSetInterruptMask
 2039              	.LVL236:
 2040              	.L254:
 2041 087a FEE7     		b	.L254
 2042              	.LVL237:
 2043              	.L253:
1880:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2044              		.loc 1 1880 0 is_stmt 1
 2045 087c 0C4C     		ldr	r4, .L256
 2046 087e 2168     		ldr	r1, [r4]
 2047              	.LVL238:
 2048 0880 1831     		adds	r1, r1, #24
 2049 0882 FFF7FEFF 		bl	vListInsert
 2050              	.LVL239:
1885:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 2051              		.loc 1 1885 0
 2052 0886 2068     		ldr	r0, [r4]
 2053 0888 0430     		adds	r0, r0, #4
 2054 088a FFF7FEFF 		bl	uxListRemove
 2055              	.LVL240:
1894:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2056              		.loc 1 1894 0
 2057 088e 6B1C     		adds	r3, r5, #1
 2058 0890 07D1     		bne	.L255
1899:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2059              		.loc 1 1899 0
 2060 0892 2046     		mov	r0, r4
1917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 2061              		.loc 1 1917 0
 2062 0894 BDE83840 		pop	{r3, r4, r5, lr}
 2063              	.LVL241:
1899:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2064              		.loc 1 1899 0
 2065 0898 50F8C81B 		ldr	r1, [r0], #200
 2066 089c 0431     		adds	r1, r1, #4
 2067 089e FFF7FEBF 		b	vListInsertEnd
 2068              	.LVL242:
 2069              	.L255:
1905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2070              		.loc 1 1905 0
 2071 08a2 6068     		ldr	r0, [r4, #4]
 2072              	.LVL243:
1906:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2073              		.loc 1 1906 0
 2074 08a4 2844     		add	r0, r0, r5
 2075              	.LVL244:
1917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 2076              		.loc 1 1917 0
 2077 08a6 BDE83840 		pop	{r3, r4, r5, lr}
 2078              	.LVL245:
1906:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2079              		.loc 1 1906 0
 2080 08aa FFF7A9BB 		b	prvAddCurrentTaskToDelayedList
 2081              	.LVL246:
 2082              	.L257:
 2083 08ae 00BF     		.align	2
 2084              	.L256:
 2085 08b0 00000000 		.word	.LANCHOR0
 2086              		.cfi_endproc
 2087              	.LFE19:
 2089              		.align	1
 2090              		.global	vTaskPlaceOnEventListRestricted
 2091              		.thumb
 2092              		.thumb_func
 2094              	vTaskPlaceOnEventListRestricted:
 2095              	.LFB20:
1923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2096              		.loc 1 1923 0
 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 0
 2099              		@ frame_needed = 0, uses_anonymous_args = 0
 2100              	.LVL247:
 2101 08b4 38B5     		push	{r3, r4, r5, lr}
 2102              	.LCFI21:
 2103              		.cfi_def_cfa_offset 16
 2104              		.cfi_offset 3, -16
 2105              		.cfi_offset 4, -12
 2106              		.cfi_offset 5, -8
 2107              		.cfi_offset 14, -4
1923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2108              		.loc 1 1923 0
 2109 08b6 0D46     		mov	r5, r1
1926:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 2110              		.loc 1 1926 0
 2111 08b8 10B9     		cbnz	r0, .L259
1926:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 2112              		.loc 1 1926 0 is_stmt 0 discriminator 1
 2113 08ba FFF7FEFF 		bl	ulPortSetInterruptMask
 2114              	.LVL248:
 2115              	.L260:
 2116 08be FEE7     		b	.L260
 2117              	.LVL249:
 2118              	.L259:
1938:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2119              		.loc 1 1938 0 is_stmt 1
 2120 08c0 074C     		ldr	r4, .L261
 2121 08c2 2168     		ldr	r1, [r4]
 2122              	.LVL250:
 2123 08c4 1831     		adds	r1, r1, #24
 2124 08c6 FFF7FEFF 		bl	vListInsertEnd
 2125              	.LVL251:
1943:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 2126              		.loc 1 1943 0
 2127 08ca 2068     		ldr	r0, [r4]
 2128 08cc 0430     		adds	r0, r0, #4
 2129 08ce FFF7FEFF 		bl	uxListRemove
 2130              	.LVL252:
1952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
 2131              		.loc 1 1952 0
 2132 08d2 6068     		ldr	r0, [r4, #4]
 2133              	.LVL253:
1955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
 2134              		.loc 1 1955 0
 2135 08d4 2844     		add	r0, r0, r5
 2136              	.LVL254:
1956:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 2137              		.loc 1 1956 0
 2138 08d6 BDE83840 		pop	{r3, r4, r5, lr}
 2139              	.LVL255:
1955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
 2140              		.loc 1 1955 0
 2141 08da FFF791BB 		b	prvAddCurrentTaskToDelayedList
 2142              	.LVL256:
 2143              	.L262:
 2144 08de 00BF     		.align	2
 2145              	.L261:
 2146 08e0 00000000 		.word	.LANCHOR0
 2147              		.cfi_endproc
 2148              	.LFE20:
 2150              		.align	1
 2151              		.global	xTaskRemoveFromEventList
 2152              		.thumb
 2153              		.thumb_func
 2155              	xTaskRemoveFromEventList:
 2156              	.LFB21:
1962:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2157              		.loc 1 1962 0
 2158              		.cfi_startproc
 2159              		@ args = 0, pretend = 0, frame = 0
 2160              		@ frame_needed = 0, uses_anonymous_args = 0
 2161              	.LVL257:
1979:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2162              		.loc 1 1979 0
 2163 08e4 C368     		ldr	r3, [r0, #12]
1962:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2164              		.loc 1 1962 0
 2165 08e6 70B5     		push	{r4, r5, r6, lr}
 2166              	.LCFI22:
 2167              		.cfi_def_cfa_offset 16
 2168              		.cfi_offset 4, -16
 2169              		.cfi_offset 5, -12
 2170              		.cfi_offset 6, -8
 2171              		.cfi_offset 14, -4
1979:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2172              		.loc 1 1979 0
 2173 08e8 DC68     		ldr	r4, [r3, #12]
 2174              	.LVL258:
1980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2175              		.loc 1 1980 0
 2176 08ea 14B9     		cbnz	r4, .L264
1980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2177              		.loc 1 1980 0 is_stmt 0 discriminator 1
 2178 08ec FFF7FEFF 		bl	ulPortSetInterruptMask
 2179              	.LVL259:
 2180              	.L265:
 2181 08f0 FEE7     		b	.L265
 2182              	.LVL260:
 2183              	.L264:
1981:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2184              		.loc 1 1981 0 is_stmt 1
 2185 08f2 04F11806 		add	r6, r4, #24
1983:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2186              		.loc 1 1983 0
 2187 08f6 144D     		ldr	r5, .L272
1981:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2188              		.loc 1 1981 0
 2189 08f8 3046     		mov	r0, r6
 2190              	.LVL261:
 2191 08fa FFF7FEFF 		bl	uxListRemove
 2192              	.LVL262:
1983:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2193              		.loc 1 1983 0
 2194 08fe D5F8EC30 		ldr	r3, [r5, #236]
 2195 0902 7BB9     		cbnz	r3, .L266
1985:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2196              		.loc 1 1985 0
 2197 0904 261D     		adds	r6, r4, #4
 2198 0906 3046     		mov	r0, r6
 2199 0908 FFF7FEFF 		bl	uxListRemove
 2200              	.LVL263:
1986:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2201              		.loc 1 1986 0
 2202 090c E36A     		ldr	r3, [r4, #44]
 2203 090e D5F8E420 		ldr	r2, [r5, #228]
 2204 0912 9342     		cmp	r3, r2
 2205 0914 0D4A     		ldr	r2, .L272+4
 2206 0916 88BF     		it	hi
 2207 0918 C5F8E430 		strhi	r3, [r5, #228]
 2208 091c 1420     		movs	r0, #20
 2209 091e 00FB0320 		mla	r0, r0, r3, r2
 2210 0922 01E0     		b	.L271
 2211              	.L266:
1992:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2212              		.loc 1 1992 0
 2213 0924 05F1A000 		add	r0, r5, #160
 2214              	.L271:
 2215 0928 3146     		mov	r1, r6
 2216 092a FFF7FEFF 		bl	vListInsertEnd
 2217              	.LVL264:
1995:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2218              		.loc 1 1995 0
 2219 092e 2B68     		ldr	r3, [r5]
 2220 0930 E26A     		ldr	r2, [r4, #44]
 2221 0932 DB6A     		ldr	r3, [r3, #44]
 2222 0934 9A42     		cmp	r2, r3
 2223 0936 04D3     		bcc	.L270
 2224              	.LVL265:
2005:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 2225              		.loc 1 2005 0
 2226 0938 034B     		ldr	r3, .L272
 2227 093a 0120     		movs	r0, #1
 2228 093c C3F8F800 		str	r0, [r3, #248]
 2229 0940 70BD     		pop	{r4, r5, r6, pc}
 2230              	.LVL266:
 2231              	.L270:
2009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 2232              		.loc 1 2009 0
 2233 0942 0020     		movs	r0, #0
 2234              	.LVL267:
2013:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 2235              		.loc 1 2013 0
 2236 0944 70BD     		pop	{r4, r5, r6, pc}
 2237              	.LVL268:
 2238              	.L273:
 2239 0946 00BF     		.align	2
 2240              	.L272:
 2241 0948 00000000 		.word	.LANCHOR0
 2242 094c 14000000 		.word	.LANCHOR0+20
 2243              		.cfi_endproc
 2244              	.LFE21:
 2246              		.align	1
 2247              		.global	vTaskSetTimeOutState
 2248              		.thumb
 2249              		.thumb_func
 2251              	vTaskSetTimeOutState:
 2252              	.LFB22:
2017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2253              		.loc 1 2017 0
 2254              		.cfi_startproc
 2255              		@ args = 0, pretend = 0, frame = 0
 2256              		@ frame_needed = 0, uses_anonymous_args = 0
 2257              	.LVL269:
 2258 0950 08B5     		push	{r3, lr}
 2259              	.LCFI23:
 2260              		.cfi_def_cfa_offset 8
 2261              		.cfi_offset 3, -8
 2262              		.cfi_offset 14, -4
2018:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 2263              		.loc 1 2018 0
 2264 0952 10B9     		cbnz	r0, .L275
2018:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 2265              		.loc 1 2018 0 is_stmt 0 discriminator 1
 2266 0954 FFF7FEFF 		bl	ulPortSetInterruptMask
 2267              	.LVL270:
 2268              	.L276:
 2269 0958 FEE7     		b	.L276
 2270              	.LVL271:
 2271              	.L275:
2019:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2272              		.loc 1 2019 0 is_stmt 1
 2273 095a 034B     		ldr	r3, .L277
 2274 095c D3F8F020 		ldr	r2, [r3, #240]
2020:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2275              		.loc 1 2020 0
 2276 0960 5B68     		ldr	r3, [r3, #4]
2019:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2277              		.loc 1 2019 0
 2278 0962 0260     		str	r2, [r0]
2020:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2279              		.loc 1 2020 0
 2280 0964 4360     		str	r3, [r0, #4]
 2281 0966 08BD     		pop	{r3, pc}
 2282              	.L278:
 2283              		.align	2
 2284              	.L277:
 2285 0968 00000000 		.word	.LANCHOR0
 2286              		.cfi_endproc
 2287              	.LFE22:
 2289              		.align	1
 2290              		.global	xTaskCheckForTimeOut
 2291              		.thumb
 2292              		.thumb_func
 2294              	xTaskCheckForTimeOut:
 2295              	.LFB23:
2025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2296              		.loc 1 2025 0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              	.LVL272:
 2301 096c 38B5     		push	{r3, r4, r5, lr}
 2302              	.LCFI24:
 2303              		.cfi_def_cfa_offset 16
 2304              		.cfi_offset 3, -16
 2305              		.cfi_offset 4, -12
 2306              		.cfi_offset 5, -8
 2307              		.cfi_offset 14, -4
2025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2308              		.loc 1 2025 0
 2309 096e 0D46     		mov	r5, r1
2028:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 2310              		.loc 1 2028 0
 2311 0970 0446     		mov	r4, r0
 2312 0972 10B9     		cbnz	r0, .L280
2028:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 2313              		.loc 1 2028 0 is_stmt 0 discriminator 1
 2314 0974 FFF7FEFF 		bl	ulPortSetInterruptMask
 2315              	.LVL273:
 2316              	.L281:
 2317 0978 FEE7     		b	.L281
 2318              	.LVL274:
 2319              	.L280:
2029:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 2320              		.loc 1 2029 0 is_stmt 1
 2321 097a 11B9     		cbnz	r1, .L282
2029:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 2322              		.loc 1 2029 0 is_stmt 0 discriminator 1
 2323 097c FFF7FEFF 		bl	ulPortSetInterruptMask
 2324              	.LVL275:
 2325              	.L283:
 2326 0980 FEE7     		b	.L283
 2327              	.LVL276:
 2328              	.L282:
2031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2329              		.loc 1 2031 0 is_stmt 1
 2330 0982 FFF7FEFF 		bl	vPortEnterCritical
 2331              	.LVL277:
 2332              	.LBB47:
2040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2333              		.loc 1 2040 0
 2334 0986 2B68     		ldr	r3, [r5]
2034:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		const portTickType xConstTickCount = xTickCount;
 2335              		.loc 1 2034 0
 2336 0988 0D49     		ldr	r1, .L289
2040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2337              		.loc 1 2040 0
 2338 098a 581C     		adds	r0, r3, #1
2034:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		const portTickType xConstTickCount = xTickCount;
 2339              		.loc 1 2034 0
 2340 098c 4A68     		ldr	r2, [r1, #4]
 2341              	.LVL278:
2040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2342              		.loc 1 2040 0
 2343 098e 10D0     		beq	.L286
2047:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 2344              		.loc 1 2047 0
 2345 0990 D1F8F000 		ldr	r0, [r1, #240]
 2346 0994 2168     		ldr	r1, [r4]
 2347 0996 8842     		cmp	r0, r1
 2348 0998 6168     		ldr	r1, [r4, #4]
 2349 099a 01D0     		beq	.L285
2047:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 2350              		.loc 1 2047 0 is_stmt 0 discriminator 1
 2351 099c 8A42     		cmp	r2, r1
 2352 099e 0AD2     		bcs	.L288
 2353              	.L285:
2055:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 2354              		.loc 1 2055 0 is_stmt 1
 2355 09a0 501A     		subs	r0, r2, r1
 2356 09a2 9842     		cmp	r0, r3
 2357 09a4 07D2     		bcs	.L288
2058:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 2358              		.loc 1 2058 0
 2359 09a6 8A1A     		subs	r2, r1, r2
 2360              	.LVL279:
 2361 09a8 1344     		add	r3, r3, r2
 2362 09aa 2B60     		str	r3, [r5]
2059:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2363              		.loc 1 2059 0
 2364 09ac 2046     		mov	r0, r4
 2365 09ae FFF7FEFF 		bl	vTaskSetTimeOutState
 2366              	.LVL280:
 2367              	.L286:
2042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 2368              		.loc 1 2042 0
 2369 09b2 0024     		movs	r4, #0
 2370              	.LVL281:
 2371 09b4 00E0     		b	.L284
 2372              	.LVL282:
 2373              	.L288:
2053:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2374              		.loc 1 2053 0
 2375 09b6 0124     		movs	r4, #1
 2376              	.LVL283:
 2377              	.L284:
 2378              	.LBE47:
2067:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2379              		.loc 1 2067 0
 2380 09b8 FFF7FEFF 		bl	vPortExitCritical
 2381              	.LVL284:
2070:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 2382              		.loc 1 2070 0
 2383 09bc 2046     		mov	r0, r4
 2384 09be 38BD     		pop	{r3, r4, r5, pc}
 2385              	.LVL285:
 2386              	.L290:
 2387              		.align	2
 2388              	.L289:
 2389 09c0 00000000 		.word	.LANCHOR0
 2390              		.cfi_endproc
 2391              	.LFE23:
 2393              		.align	1
 2394              		.global	vTaskMissedYield
 2395              		.thumb
 2396              		.thumb_func
 2398              	vTaskMissedYield:
 2399              	.LFB24:
2074:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2400              		.loc 1 2074 0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 0
 2403              		@ frame_needed = 0, uses_anonymous_args = 0
 2404              		@ link register save eliminated.
2075:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 2405              		.loc 1 2075 0
 2406 09c4 024B     		ldr	r3, .L292
 2407 09c6 0122     		movs	r2, #1
 2408 09c8 C3F8F820 		str	r2, [r3, #248]
 2409 09cc 7047     		bx	lr
 2410              	.L293:
 2411 09ce 00BF     		.align	2
 2412              	.L292:
 2413 09d0 00000000 		.word	.LANCHOR0
 2414              		.cfi_endproc
 2415              	.LFE24:
 2417              		.align	1
 2418              		.global	xTaskGetCurrentTaskHandle
 2419              		.thumb
 2420              		.thumb_func
 2422              	xTaskGetCurrentTaskHandle:
 2423              	.LFB32:
2611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
2614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
2617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2424              		.loc 1 2619 0
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 0
 2427              		@ frame_needed = 0, uses_anonymous_args = 0
 2428              		@ link register save eliminated.
2620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xTaskHandle xReturn;
2621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
2623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
2624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
2625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 2429              		.loc 1 2625 0
 2430 09d4 014B     		ldr	r3, .L295
 2431 09d6 1868     		ldr	r0, [r3]
 2432              	.LVL286:
2626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
2628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 2433              		.loc 1 2628 0
 2434 09d8 7047     		bx	lr
 2435              	.L296:
 2436 09da 00BF     		.align	2
 2437              	.L295:
 2438 09dc 00000000 		.word	.LANCHOR0
 2439              		.cfi_endproc
 2440              	.LFE32:
 2442              		.align	1
 2443              		.global	xTaskGetSchedulerState
 2444              		.thumb
 2445              		.thumb_func
 2447              	xTaskGetSchedulerState:
 2448              	.LFB33:
2629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
2631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
2634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2449              		.loc 1 2636 0
 2450              		.cfi_startproc
 2451              		@ args = 0, pretend = 0, frame = 0
 2452              		@ frame_needed = 0, uses_anonymous_args = 0
 2453              		@ link register save eliminated.
2637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
2638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 2454              		.loc 1 2639 0
 2455 09e0 054B     		ldr	r3, .L301
 2456 09e2 D3F8DC00 		ldr	r0, [r3, #220]
 2457 09e6 28B1     		cbz	r0, .L298
2640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
2642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
2644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2458              		.loc 1 2645 0
 2459 09e8 D3F8EC30 		ldr	r3, [r3, #236]
 2460 09ec 002B     		cmp	r3, #0
2646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 2461              		.loc 1 2647 0
 2462 09ee 14BF     		ite	ne
 2463 09f0 0220     		movne	r0, #2
 2464 09f2 0120     		moveq	r0, #1
 2465              	.L298:
 2466              	.LVL287:
2648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
2650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
2652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
2656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 2467              		.loc 1 2656 0
 2468 09f4 7047     		bx	lr
 2469              	.L302:
 2470 09f6 00BF     		.align	2
 2471              	.L301:
 2472 09f8 00000000 		.word	.LANCHOR0
 2473              		.cfi_endproc
 2474              	.LFE33:
 2476              		.align	1
 2477              		.global	vTaskPriorityInherit
 2478              		.thumb
 2479              		.thumb_func
 2481              	vTaskPriorityInherit:
 2482              	.LFB34:
2657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
2659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
2664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2483              		.loc 1 2664 0
 2484              		.cfi_startproc
 2485              		@ args = 0, pretend = 0, frame = 0
 2486              		@ frame_needed = 0, uses_anonymous_args = 0
 2487              	.LVL288:
 2488 09fc F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2489              	.LCFI25:
 2490              		.cfi_def_cfa_offset 24
 2491              		.cfi_offset 3, -24
 2492              		.cfi_offset 4, -20
 2493              		.cfi_offset 5, -16
 2494              		.cfi_offset 6, -12
 2495              		.cfi_offset 7, -8
 2496              		.cfi_offset 14, -4
2665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
2666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
2668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
2669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 2497              		.loc 1 2669 0
 2498 09fe 0446     		mov	r4, r0
 2499 0a00 58B3     		cbz	r0, .L303
2670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 2500              		.loc 1 2671 0
 2501 0a02 164D     		ldr	r5, .L313
 2502 0a04 C36A     		ldr	r3, [r0, #44]
 2503 0a06 2A68     		ldr	r2, [r5]
 2504 0a08 D26A     		ldr	r2, [r2, #44]
 2505 0a0a 9342     		cmp	r3, r2
 2506 0a0c 25D2     		bcs	.L303
2672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new priority. */
2674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( 
 2507              		.loc 1 2674 0
 2508 0a0e 2846     		mov	r0, r5
 2509              	.LVL289:
 2510 0a10 50F8142B 		ldr	r2, [r0], #20
 2511 0a14 D26A     		ldr	r2, [r2, #44]
 2512 0a16 C2F10502 		rsb	r2, r2, #5
 2513 0a1a A261     		str	r2, [r4, #24]
2675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need to
2677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				be moved into a new list. */
2678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 2514              		.loc 1 2678 0
 2515 0a1c 1422     		movs	r2, #20
 2516 0a1e 02FB0303 		mla	r3, r2, r3, r0
 2517 0a22 6269     		ldr	r2, [r4, #20]
 2518 0a24 9A42     		cmp	r2, r3
 2519 0a26 0746     		mov	r7, r0
 2520 0a28 14D1     		bne	.L312
2679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 2521              		.loc 1 2680 0
 2522 0a2a 261D     		adds	r6, r4, #4
 2523 0a2c 3046     		mov	r0, r6
 2524 0a2e FFF7FEFF 		bl	uxListRemove
 2525              	.LVL290:
2681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
2682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
2684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
2686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2526              		.loc 1 2686 0
 2527 0a32 2B68     		ldr	r3, [r5]
2687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2528              		.loc 1 2687 0
 2529 0a34 D5F8E420 		ldr	r2, [r5, #228]
2686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2530              		.loc 1 2686 0
 2531 0a38 DB6A     		ldr	r3, [r3, #44]
 2532 0a3a E362     		str	r3, [r4, #44]
 2533              		.loc 1 2687 0
 2534 0a3c 9342     		cmp	r3, r2
 2535 0a3e 01D9     		bls	.L308
 2536              		.loc 1 2687 0 is_stmt 0 discriminator 1
 2537 0a40 C5F8E430 		str	r3, [r5, #228]
 2538              	.L308:
 2539              		.loc 1 2687 0 discriminator 2
 2540 0a44 1420     		movs	r0, #20
 2541 0a46 00FB0370 		mla	r0, r0, r3, r7
 2542 0a4a 3146     		mov	r1, r6
2688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else
2690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
2692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
2693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
2696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 2543              		.loc 1 2698 0 is_stmt 1 discriminator 2
 2544 0a4c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 2545              	.LVL291:
2687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2546              		.loc 1 2687 0 discriminator 2
 2547 0a50 FFF7FEBF 		b	vListInsertEnd
 2548              	.LVL292:
 2549              	.L312:
2692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2550              		.loc 1 2692 0
 2551 0a54 2B68     		ldr	r3, [r5]
 2552 0a56 DB6A     		ldr	r3, [r3, #44]
 2553 0a58 E362     		str	r3, [r4, #44]
 2554              	.L303:
 2555 0a5a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2556              	.LVL293:
 2557              	.L314:
 2558              		.align	2
 2559              	.L313:
 2560 0a5c 00000000 		.word	.LANCHOR0
 2561              		.cfi_endproc
 2562              	.LFE34:
 2564              		.align	1
 2565              		.global	vTaskPriorityDisinherit
 2566              		.thumb
 2567              		.thumb_func
 2569              	vTaskPriorityDisinherit:
 2570              	.LFB35:
2699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
2701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
2706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2571              		.loc 1 2706 0
 2572              		.cfi_startproc
 2573              		@ args = 0, pretend = 0, frame = 0
 2574              		@ frame_needed = 0, uses_anonymous_args = 0
 2575              	.LVL294:
 2576 0a60 38B5     		push	{r3, r4, r5, lr}
 2577              	.LCFI26:
 2578              		.cfi_def_cfa_offset 16
 2579              		.cfi_offset 3, -16
 2580              		.cfi_offset 4, -12
 2581              		.cfi_offset 5, -8
 2582              		.cfi_offset 14, -4
2707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
2708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 2583              		.loc 1 2709 0
 2584 0a62 0446     		mov	r4, r0
 2585 0a64 E0B1     		cbz	r0, .L315
2710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 2586              		.loc 1 2711 0
 2587 0a66 C26A     		ldr	r2, [r0, #44]
 2588 0a68 036C     		ldr	r3, [r0, #64]
 2589 0a6a 9A42     		cmp	r2, r3
 2590 0a6c 18D0     		beq	.L315
2712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 2591              		.loc 1 2715 0
 2592 0a6e 051D     		adds	r5, r0, #4
 2593 0a70 2846     		mov	r0, r5
 2594              	.LVL295:
 2595 0a72 FFF7FEFF 		bl	uxListRemove
 2596              	.LVL296:
2716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Disinherit the priority before adding the task into the new
2721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				ready list. */
2722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
2723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 2597              		.loc 1 2723 0
 2598 0a76 236C     		ldr	r3, [r4, #64]
 2599 0a78 E362     		str	r3, [r4, #44]
2724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( 
 2600              		.loc 1 2724 0
 2601 0a7a C3F10502 		rsb	r2, r3, #5
 2602 0a7e A261     		str	r2, [r4, #24]
2725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 2603              		.loc 1 2725 0
 2604 0a80 084A     		ldr	r2, .L321
 2605 0a82 D2F8E410 		ldr	r1, [r2, #228]
 2606 0a86 8B42     		cmp	r3, r1
 2607 0a88 88BF     		it	hi
 2608 0a8a C2F8E430 		strhi	r3, [r2, #228]
 2609 0a8e 064A     		ldr	r2, .L321+4
 2610 0a90 1420     		movs	r0, #20
 2611 0a92 00FB0320 		mla	r0, r0, r3, r2
 2612 0a96 2946     		mov	r1, r5
2726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 2613              		.loc 1 2728 0
 2614 0a98 BDE83840 		pop	{r3, r4, r5, lr}
 2615              	.LVL297:
2725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 2616              		.loc 1 2725 0
 2617 0a9c FFF7FEBF 		b	vListInsertEnd
 2618              	.LVL298:
 2619              	.L315:
 2620 0aa0 38BD     		pop	{r3, r4, r5, pc}
 2621              	.L322:
 2622 0aa2 00BF     		.align	2
 2623              	.L321:
 2624 0aa4 00000000 		.word	.LANCHOR0
 2625 0aa8 14000000 		.word	.LANCHOR0+20
 2626              		.cfi_endproc
 2627              	.LFE35:
 2629              		.global	pxCurrentTCB
 2630              		.section	.rodata
 2631              		.set	.LANCHOR2,. + 0
 2634              	ucExpectedStackBytes.5238:
 2635 0000 A5       		.byte	-91
 2636 0001 A5       		.byte	-91
 2637 0002 A5       		.byte	-91
 2638 0003 A5       		.byte	-91
 2639 0004 A5       		.byte	-91
 2640 0005 A5       		.byte	-91
 2641 0006 A5       		.byte	-91
 2642 0007 A5       		.byte	-91
 2643 0008 A5       		.byte	-91
 2644 0009 A5       		.byte	-91
 2645 000a A5       		.byte	-91
 2646 000b A5       		.byte	-91
 2647 000c A5       		.byte	-91
 2648 000d A5       		.byte	-91
 2649 000e A5       		.byte	-91
 2650 000f A5       		.byte	-91
 2651 0010 A5       		.byte	-91
 2652 0011 A5       		.byte	-91
 2653 0012 A5       		.byte	-91
 2654 0013 A5       		.byte	-91
 2655              		.section	.rodata.str1.1,"aMS",%progbits,1
 2656              	.LC0:
 2657 0000 49444C45 		.ascii	"IDLE\000"
 2657      00
 2658              		.data
 2659              		.align	2
 2660              		.set	.LANCHOR1,. + 0
 2663              	xNextTaskUnblockTime:
 2664 0000 FFFFFFFF 		.word	-1
 2665              		.bss
 2666              		.align	2
 2667              		.set	.LANCHOR0,. + 0
 2670              	pxCurrentTCB:
 2671 0000 00000000 		.space	4
 2674              	xTickCount:
 2675 0004 00000000 		.space	4
 2678              	pxOverflowDelayedTaskList:
 2679 0008 00000000 		.space	4
 2682              	pxDelayedTaskList:
 2683 000c 00000000 		.space	4
 2686              	uxCurrentNumberOfTasks:
 2687 0010 00000000 		.space	4
 2690              	pxReadyTasksLists:
 2691 0014 00000000 		.space	100
 2691      00000000 
 2691      00000000 
 2691      00000000 
 2691      00000000 
 2694              	xDelayedTaskList1:
 2695 0078 00000000 		.space	20
 2695      00000000 
 2695      00000000 
 2695      00000000 
 2695      00000000 
 2698              	xDelayedTaskList2:
 2699 008c 00000000 		.space	20
 2699      00000000 
 2699      00000000 
 2699      00000000 
 2699      00000000 
 2702              	xPendingReadyList:
 2703 00a0 00000000 		.space	20
 2703      00000000 
 2703      00000000 
 2703      00000000 
 2703      00000000 
 2706              	xTasksWaitingTermination:
 2707 00b4 00000000 		.space	20
 2707      00000000 
 2707      00000000 
 2707      00000000 
 2707      00000000 
 2710              	xSuspendedTaskList:
 2711 00c8 00000000 		.space	20
 2711      00000000 
 2711      00000000 
 2711      00000000 
 2711      00000000 
 2714              	xSchedulerRunning:
 2715 00dc 00000000 		.space	4
 2718              	uxTaskNumber:
 2719 00e0 00000000 		.space	4
 2722              	uxTopReadyPriority:
 2723 00e4 00000000 		.space	4
 2726              	uxTasksDeleted:
 2727 00e8 00000000 		.space	4
 2730              	uxSchedulerSuspended:
 2731 00ec 00000000 		.space	4
 2734              	xNumOfOverflows:
 2735 00f0 00000000 		.space	4
 2738              	uxPendedTicks:
 2739 00f4 00000000 		.space	4
 2742              	xYieldPending:
 2743 00f8 00000000 		.space	4
 2744              		.text
 2745              	.Letext0:
 2746              		.file 2 "/home/user/gcc-arm-none-eabi-4_8-2013q4/lib/gcc/arm-none-eabi/4.8.3/include/stddef.h"
 2747              		.file 3 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/projdefs.h"
 2748              		.file 4 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/portable/GCC/ARM_CM4F/p
 2749              		.file 5 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/list.h"
 2750              		.file 6 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/task.h"
 2751              		.file 7 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/portable.h"
 2752              		.file 8 "/home/user/gcc-arm-none-eabi-4_8-2013q4/arm-none-eabi/include/string.h"
 2753              		.file 9 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/timers.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/ccnYDZGx.s:20     .text:00000000 $t
     /tmp/ccnYDZGx.s:24     .text:00000000 prvAddCurrentTaskToDelayedList
     /tmp/ccnYDZGx.s:90     .text:00000034 $d
     /tmp/ccnYDZGx.s:95     .text:0000003c $t
     /tmp/ccnYDZGx.s:100    .text:0000003c xTaskGenericCreate
     /tmp/ccnYDZGx.s:390    .text:000001b4 $d
     /tmp/ccnYDZGx.s:394    .text:000001b8 $t
     /tmp/ccnYDZGx.s:399    .text:000001b8 vTaskDelete
     /tmp/ccnYDZGx.s:476    .text:00000214 $d
     /tmp/ccnYDZGx.s:480    .text:00000218 $t
     /tmp/ccnYDZGx.s:485    .text:00000218 uxTaskPriorityGet
     /tmp/ccnYDZGx.s:522    .text:00000230 $d
     /tmp/ccnYDZGx.s:526    .text:00000234 $t
     /tmp/ccnYDZGx.s:531    .text:00000234 vTaskPrioritySet
     /tmp/ccnYDZGx.s:666    .text:000002d0 $d
     /tmp/ccnYDZGx.s:670    .text:000002d4 $t
     /tmp/ccnYDZGx.s:675    .text:000002d4 xTaskIsTaskSuspended
     /tmp/ccnYDZGx.s:728    .text:000002fc $d
     /tmp/ccnYDZGx.s:732    .text:00000300 $t
     /tmp/ccnYDZGx.s:737    .text:00000300 vTaskResume
     /tmp/ccnYDZGx.s:813    .text:00000360 $d
     /tmp/ccnYDZGx.s:818    .text:00000368 $t
     /tmp/ccnYDZGx.s:823    .text:00000368 xTaskResumeFromISR
     /tmp/ccnYDZGx.s:922    .text:000003e0 $d
     /tmp/ccnYDZGx.s:927    .text:000003e8 $t
     /tmp/ccnYDZGx.s:932    .text:000003e8 vTaskStartScheduler
     /tmp/ccnYDZGx.s:1009   .text:00000438 $d
     /tmp/ccnYDZGx.s:1710   .text:0000070c prvIdleTask
     /tmp/ccnYDZGx.s:1015   .text:00000444 $t
     /tmp/ccnYDZGx.s:1020   .text:00000444 vTaskEndScheduler
     /tmp/ccnYDZGx.s:1046   .text:0000045c $d
     /tmp/ccnYDZGx.s:1050   .text:00000460 $t
     /tmp/ccnYDZGx.s:1055   .text:00000460 vTaskSuspendAll
     /tmp/ccnYDZGx.s:1071   .text:00000470 $d
     /tmp/ccnYDZGx.s:1075   .text:00000474 $t
     /tmp/ccnYDZGx.s:1080   .text:00000474 xTaskGetTickCount
     /tmp/ccnYDZGx.s:1108   .text:00000488 $d
     /tmp/ccnYDZGx.s:1112   .text:0000048c $t
     /tmp/ccnYDZGx.s:1117   .text:0000048c xTaskGetTickCountFromISR
     /tmp/ccnYDZGx.s:1148   .text:000004a4 $d
     /tmp/ccnYDZGx.s:1152   .text:000004a8 $t
     /tmp/ccnYDZGx.s:1157   .text:000004a8 uxTaskGetNumberOfTasks
     /tmp/ccnYDZGx.s:1172   .text:000004b0 $d
     /tmp/ccnYDZGx.s:1176   .text:000004b4 $t
     /tmp/ccnYDZGx.s:1181   .text:000004b4 xTaskIncrementTick
     /tmp/ccnYDZGx.s:1369   .text:000005a4 $d
     /tmp/ccnYDZGx.s:1375   .text:000005b0 $t
     /tmp/ccnYDZGx.s:1380   .text:000005b0 xTaskResumeAll
     /tmp/ccnYDZGx.s:1515   .text:0000066c $d
     /tmp/ccnYDZGx.s:1519   .text:00000670 $t
     /tmp/ccnYDZGx.s:1524   .text:00000670 vTaskDelayUntil
     /tmp/ccnYDZGx.s:1639   .text:000006d4 $d
     /tmp/ccnYDZGx.s:1643   .text:000006d8 $t
     /tmp/ccnYDZGx.s:1648   .text:000006d8 vTaskDelay
     /tmp/ccnYDZGx.s:1702   .text:00000708 $d
     /tmp/ccnYDZGx.s:1706   .text:0000070c $t
     /tmp/ccnYDZGx.s:1802   .text:00000768 $d
     /tmp/ccnYDZGx.s:1806   .text:0000076c $t
     /tmp/ccnYDZGx.s:1811   .text:0000076c vTaskSwitchContext
     /tmp/ccnYDZGx.s:1913   .text:00000804 $d
     /tmp/ccnYDZGx.s:1919   .text:0000080c $t
     /tmp/ccnYDZGx.s:1924   .text:0000080c vTaskSuspend
     /tmp/ccnYDZGx.s:2010   .text:0000086c $d
     /tmp/ccnYDZGx.s:2014   .text:00000870 $t
     /tmp/ccnYDZGx.s:2019   .text:00000870 vTaskPlaceOnEventList
     /tmp/ccnYDZGx.s:2085   .text:000008b0 $d
     /tmp/ccnYDZGx.s:2089   .text:000008b4 $t
     /tmp/ccnYDZGx.s:2094   .text:000008b4 vTaskPlaceOnEventListRestricted
     /tmp/ccnYDZGx.s:2146   .text:000008e0 $d
     /tmp/ccnYDZGx.s:2150   .text:000008e4 $t
     /tmp/ccnYDZGx.s:2155   .text:000008e4 xTaskRemoveFromEventList
     /tmp/ccnYDZGx.s:2241   .text:00000948 $d
     /tmp/ccnYDZGx.s:2246   .text:00000950 $t
     /tmp/ccnYDZGx.s:2251   .text:00000950 vTaskSetTimeOutState
     /tmp/ccnYDZGx.s:2285   .text:00000968 $d
     /tmp/ccnYDZGx.s:2289   .text:0000096c $t
     /tmp/ccnYDZGx.s:2294   .text:0000096c xTaskCheckForTimeOut
     /tmp/ccnYDZGx.s:2389   .text:000009c0 $d
     /tmp/ccnYDZGx.s:2393   .text:000009c4 $t
     /tmp/ccnYDZGx.s:2398   .text:000009c4 vTaskMissedYield
     /tmp/ccnYDZGx.s:2413   .text:000009d0 $d
     /tmp/ccnYDZGx.s:2417   .text:000009d4 $t
     /tmp/ccnYDZGx.s:2422   .text:000009d4 xTaskGetCurrentTaskHandle
     /tmp/ccnYDZGx.s:2438   .text:000009dc $d
     /tmp/ccnYDZGx.s:2442   .text:000009e0 $t
     /tmp/ccnYDZGx.s:2447   .text:000009e0 xTaskGetSchedulerState
     /tmp/ccnYDZGx.s:2472   .text:000009f8 $d
     /tmp/ccnYDZGx.s:2476   .text:000009fc $t
     /tmp/ccnYDZGx.s:2481   .text:000009fc vTaskPriorityInherit
     /tmp/ccnYDZGx.s:2560   .text:00000a5c $d
     /tmp/ccnYDZGx.s:2564   .text:00000a60 $t
     /tmp/ccnYDZGx.s:2569   .text:00000a60 vTaskPriorityDisinherit
     /tmp/ccnYDZGx.s:2624   .text:00000aa4 $d
     /tmp/ccnYDZGx.s:2670   .bss:00000000 pxCurrentTCB
     /tmp/ccnYDZGx.s:2634   .rodata:00000000 ucExpectedStackBytes.5238
     /tmp/ccnYDZGx.s:2659   .data:00000000 $d
     /tmp/ccnYDZGx.s:2663   .data:00000000 xNextTaskUnblockTime
     /tmp/ccnYDZGx.s:2666   .bss:00000000 $d
     /tmp/ccnYDZGx.s:2674   .bss:00000004 xTickCount
     /tmp/ccnYDZGx.s:2678   .bss:00000008 pxOverflowDelayedTaskList
     /tmp/ccnYDZGx.s:2682   .bss:0000000c pxDelayedTaskList
     /tmp/ccnYDZGx.s:2686   .bss:00000010 uxCurrentNumberOfTasks
     /tmp/ccnYDZGx.s:2690   .bss:00000014 pxReadyTasksLists
     /tmp/ccnYDZGx.s:2694   .bss:00000078 xDelayedTaskList1
     /tmp/ccnYDZGx.s:2698   .bss:0000008c xDelayedTaskList2
     /tmp/ccnYDZGx.s:2702   .bss:000000a0 xPendingReadyList
     /tmp/ccnYDZGx.s:2706   .bss:000000b4 xTasksWaitingTermination
     /tmp/ccnYDZGx.s:2710   .bss:000000c8 xSuspendedTaskList
     /tmp/ccnYDZGx.s:2714   .bss:000000dc xSchedulerRunning
     /tmp/ccnYDZGx.s:2718   .bss:000000e0 uxTaskNumber
     /tmp/ccnYDZGx.s:2722   .bss:000000e4 uxTopReadyPriority
     /tmp/ccnYDZGx.s:2726   .bss:000000e8 uxTasksDeleted
     /tmp/ccnYDZGx.s:2730   .bss:000000ec uxSchedulerSuspended
     /tmp/ccnYDZGx.s:2734   .bss:000000f0 xNumOfOverflows
     /tmp/ccnYDZGx.s:2738   .bss:000000f4 uxPendedTicks
     /tmp/ccnYDZGx.s:2742   .bss:000000f8 xYieldPending
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e41257821655b1beb88e1ee583b76eae
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.5644b60c990a4800b02a6e654e88f93a
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.51.fdf1045aaa750fe709619c2027b96513
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.cdefs.h.56.f411b57d64a46a132cc788f4ff08e67a
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:00000000 wm4.projdefs.h.67.e147d0bb14773a90ce9490c5c93d4b17
                           .group:00000000 wm4.FreeRTOSConfig.h.79.5ce50f1f04ae36d94916fa991aa4b8d7
                           .group:00000000 wm4.portmacro.h.68.6a65242bb09b79c298caf96e860eebfc
                           .group:00000000 wm4.portable.h.323.74480596d2f6d1d8387fc23ab95d1e43
                           .group:00000000 wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168
                           .group:00000000 wm4.FreeRTOS.h.150.cc84f37778a1fad138e88914409bc9ad
                           .group:00000000 wm4.list.h.96.3fa6b36eff50c0aca81a4cee845ec2dc
                           .group:00000000 wm4.task.h.84.f228f660597151d3901b6cf328174595
                           .group:00000000 wm4.timers.h.86.d5e43463ce2885102019230eae2c0769
                           .group:00000000 wm4.StackMacros.h.67.4fd1bee33782db66fc73914975a3f09b

UNDEFINED SYMBOLS
vListInsert
ulPortSetInterruptMask
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInitialise
vListInsertEnd
vPortExitCritical
vPortYield
uxListRemove
vPortValidateInterruptPriority
vPortClearInterruptMask
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vApplicationIdleHook
vApplicationStackOverflowHook
memcmp
