   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"tasks.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	1
  19              		.thumb
  20              		.thumb_func
  22              	prvAddCurrentTaskToDelayedList:
  23              	.LFB29:
  24              		.file 1 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c"
   1:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
   2:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     FreeRTOS V7.4.0 - Copyright (C) 2013 Real Time Engineers Ltd.
   3:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
   4:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
   5:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
   7:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     ***************************************************************************
   8:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
   9:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
  10:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
  11:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    available.                                                         *
  12:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  13:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  14:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    ensuring you get running as quickly as possible and with an        *
  15:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  16:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  17:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    professional grade, cross platform, de facto standard solutions    *
  18:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    for microcontrollers - completely free of charge!                  *
  19:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  20:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  21:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  22:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  23:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  24:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  25:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  26:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  27:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
  28:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  29:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  30:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  31:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  32:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  33:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
  34:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  35:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     provide the source code for proprietary components outside of the FreeRTOS
  36:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     kernel.
  37:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  38:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  39:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  40:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  41:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     details. You should have received a copy of the GNU General Public License
  42:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     and the FreeRTOS license exception along with FreeRTOS; if not itcan be
  43:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     viewed here: http://www.freertos.org/a00114.html and also obtained by
  44:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     writing to Real Time Engineers Ltd., contact details for whom are available
  45:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     on the FreeRTOS WEB site.
  46:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  47:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  48:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  49:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  50:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  51:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  52:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    not run, what could be wrong?"                                     *
  53:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  54:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  55:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****      *                                                                       *
  56:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  57:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  58:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  59:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
  60:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     license and Real Time Engineers Ltd. contact details.
  61:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  62:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  63:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, and our new
  64:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     fully thread aware and reentrant UDP/IP stack.
  65:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  66:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
  67:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     Integrity Systems, who sell the code with commercial support, 
  68:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     indemnification and middleware, under the OpenRTOS brand.
  69:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     
  70:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
  71:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and 
  72:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  73:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** */
  74:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  75:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  76:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include <stdio.h>
  77:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  78:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include <string.h>
  79:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  80:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  81:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  82:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  83:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  84:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  85:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  86:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  87:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include "task.h"
  88:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include "timers.h"
  89:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  90:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  91:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  92:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
  93:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Sanity check the configuration. */
  94:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
  95:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if INCLUDE_vTaskSuspend != 1
  96:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
  97:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
  98:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
  99:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
 113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
 116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xListItem				xGenericListItem;		/*< The list that the state list item of a task is reference from 
 119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xListItem				xEventListItem;		/*< Used to reference a task from an event list. */
 120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
 122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
 123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Points to the end of the stack on architectures where the sta
 126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting; /*< Holds the critical section nesting depth for ports 
 130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< Stores a number that increments each time a TCB is create
 134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE  uxTaskNumber;	/*< Stores a number specifically for use by third party tra
 135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		unsigned long ulRunTimeCounter;			/*< Stores the amount of time the task has spent in the Running
 147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif
 148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** } tskTCB;
 150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * be global, rather than file scope.
 155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define static
 158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*lint -e956 */
 161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list 
 168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but t
 174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;			/*< Holds the handle of the idle task
 187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* File private variables. --------------------------------*/
 191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
 193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
 194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE 
 198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
 199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
 201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xNextTaskUnblockTime				= ( portTickType ) portMAX_DEL
 202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
 206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTotalRunTime;				/*< Holds the total amount of execution ti
 208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
 209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	state task. */
 238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )																		\
 239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																													\
 240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )																		\
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{																												\
 242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );																		\
 243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}																												\
 244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()																			\
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																													\
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */												\
 251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )										\
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{																												\
 253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopReadyPriority );																			\
 254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			--uxTopReadyPriority;																						\
 255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}																												\
 256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																														\
 257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of										\
 258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */													\
 259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );						\
 260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	being used. */
 267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																								\
 283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTopPriority;															\
 284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																									\
 285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )													\
 297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																								\
 298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == 0 )				\
 299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{																							\
 300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );						\
 301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}																							\
 302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * executing task, then it will only be rescheduled after the currently
 311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * executing task has been rescheduled.
 312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																				\
 314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB )																			\
 315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );																\
 316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGeneri
 317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * any require waking.
 322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * any further down the list.
 326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define prvCheckDelayedTasks()															\
 328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {																						\
 329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xItemValue;																\
 330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																						\
 331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Is the tick count greater than or equal to the wake time of the first			\
 332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	task referenced from the delayed tasks list? */										\
 333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xTickCount >= xNextTaskUnblockTime )											\
 334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{																					\
 335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		for( ;; )																		\
 336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{																				\
 337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )						\
 338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{																			\
 339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The delayed list is empty.  Set xNextTaskUnblockTime to the			\
 340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				maximum possible value so it is extremely unlikely that the				\
 341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass next			\
 342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				time through. */														\
 343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;									\
 344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				break;																	\
 345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}																			\
 346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else																		\
 347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{																			\
 348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The delayed list is not empty, get the value of the item at			\
 349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				the head of the delayed list.  This is the time at which the			\
 350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				task at the head of the delayed list should be removed from				\
 351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				the Blocked state. */													\
 352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );	\
 353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );	\
 354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																						\
 355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xTickCount < xItemValue )											\
 356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{																		\
 357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* It is not time to unblock this item yet, but the item			\
 358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					value is the time at which the task at the head of the				\
 359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					blocked list should be removed from the Blocked state -				\
 360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					so record the item value in xNextTaskUnblockTime. */				\
 361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xItemValue;									\
 362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					break;																\
 363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}																		\
 364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																						\
 365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* It is time to remove the item from the Blocked state. */				\
 366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxListRemove( &( pxTCB->xGenericListItem ) );							\
 367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 																						\
 368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also? */								\
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( pxTCB->xEventListItem.pvContainer != NULL )							\
 370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{																		\
 371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove( &( pxTCB->xEventListItem ) );							\
 372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}																		\
 373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );										\
 374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}																			\
 375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}																				\
 376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}																					\
 377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( 
 387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** extern void vApplicationStackOverflowHook( xTaskHandle xTask, signed char *pcTaskName );
 390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** extern void vApplicationTickHook( void );
 391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * into the TCB structure.
 397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
 444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * allocation was successful.
 448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * within just that list.
 456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
 463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_F
 474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
 478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
 481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
 486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif
 491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xReturn;
 497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** tskTCB * pxNewTCB;
 498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	checking that the allocation was successful. */
 504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
 518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		required by the port. */
 528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) =
 535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MAS
 542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			other extreme of the stack space. */
 546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the	top of stack variable is updated. */
 557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the initialised stack. */
 568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long
 569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			task can use this as a handle to delete the task later if
 574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			required.*/
 575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		ready list, so must make sure no interrupts occur. */
 580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				the suspended state - make this the current task. */
 587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					initialisation required.  We will not recover if this call
 593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					fails, but we will report the failure. */
 594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvInitialiseTaskLists();
 595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
 598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				current task if it is the highest priority task to be created
 601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				so far. */
 602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
 606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
 608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
 636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			then it should run now. */
 647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xReturn;
 655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( xTaskHandle xTaskToDelete )
 661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			deleted. */
 668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTaskToDelete == pxCurrentTCB )
 669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xTaskToDelete = NULL;
 671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			the termination list and free up any memory allocated by the
 679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			scheduler for the TCB and stack. */
 680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxListRemove( &( pxTCB->xEventListItem ) );
 689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			can detect that the task lists need re-generating. */
 700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( ( void * ) xTaskToDelete == NULL )
 710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 731:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 733:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 735:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
 737:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 740:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 742:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 743:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 744:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 745:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 746:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
 747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 748:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 749:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
 751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 752:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 755:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 757:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 759:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 762:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 763:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 765:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				both lists. */
 767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 768:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 769:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 770:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					no need to check, and the port reset macro can be called
 771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					directly. */
 772:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 774:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 776:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 777:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 779:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 780:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 781:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 783:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 785:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 788:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 789:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 790:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 791:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 793:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 796:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 797:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 798:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 800:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 802:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 803:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
 804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
 806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 807:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				is resumed.
 809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 811:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				executing task. */
 812:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 813:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 814:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				not a problem. */
 815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 817:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 818:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 819:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				both lists. */
 820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 821:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 822:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 823:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					no need to check, and the port reset macro can be called
 824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					directly. */
 825:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 826:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 828:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 831:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 832:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 833:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 835:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 837:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 838:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 839:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 840:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 841:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 842:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 843:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 844:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 845:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( xTaskHandle xTask )
 846:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 847:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 848:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xList *pxStateList;
 849:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 851:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) xTask;
 852:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 854:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 855:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
 856:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 857:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 858:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
 859:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 860:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 861:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 862:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxStateList = ( xList * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
 863:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 864:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 865:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 866:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 867:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 868:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
 869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				lists. */
 870:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 871:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 872:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 873:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
 874:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 875:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 876:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
 877:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					list. */
 878:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					eReturn = eSuspended;
 879:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 880:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
 881:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 882:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
 883:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 884:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 885:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
 886:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					tasks list. */
 887:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 888:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 889:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
 890:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 891:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
 892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 893:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
 894:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
 895:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 896:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 897:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 898:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 899:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return eReturn;
 900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 901:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 902:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
 903:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 904:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 906:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 907:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle xTask )
 908:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 909:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 910:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 911:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 912:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 913:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 914:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 915:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 916:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 918:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 919:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 920:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 922:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 924:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
 925:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 926:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 929:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( xTaskHandle xTask, unsigned portBASE_TYPE uxNewPriority )
 930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority, uxPriorityUsedOnEntry;
 933:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 934:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 936:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
 938:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 939:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 940:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 941:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
 942:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 943:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 944:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
 945:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTask == ( xTaskHandle ) pxCurrentTCB )
 946:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 947:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xTask = NULL;
 948:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 949:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 950:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 951:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 953:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 954:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 956:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 957:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 958:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 959:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 960:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#else
 961:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 962:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 963:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
 964:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
 965:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 966:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 967:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
 968:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
 969:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
 970:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 971:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 972:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( xTask != NULL )
 973:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
 974:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* The priority of another task is being raised.  If we
 975:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						were raising the priority of the currently running task
 976:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						there would be no need to switch as it must have already
 977:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						been the highest priority task. */
 978:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 979:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
 980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 981:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else if( xTask == NULL )
 982:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 983:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Setting our own priority down means there may now be another
 984:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					task of higher priority that is ready to execute. */
 985:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 986:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
 987:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 988:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
 989:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
 990:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
 991:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 992:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
 993:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 994:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
 995:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
 996:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
 997:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 998:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
 999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1000:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1001:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1003:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1004:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1005:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#else
1006:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1007:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1008:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#endif
1010:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1011:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
1012:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1013:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1014:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1015:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1016:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				in the queue appropriate to its new priority. */
1017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
1018:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1019:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1020:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1021:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1022:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
1023:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( uxPriorityUsedOnEntry );
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1026:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
1027:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1028:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1029:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
1030:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
1032:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1033:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1034:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1035:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1036:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Remove compiler warning about unused parameter when the port
1038:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		optimised task selection is not being used. */
1039:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		( void ) uxPriorityUsedOnEntry;
1040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1041:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1045:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1046:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1047:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( xTaskHandle xTaskToSuspend )
1048:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1049:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1050:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1051:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1052:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1053:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
1054:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			suspended. */
1055:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTaskToSuspend == ( xTaskHandle ) pxCurrentTCB )
1056:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1057:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xTaskToSuspend = NULL;
1058:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1059:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1060:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
1061:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1063:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1064:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1065:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
1066:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
1067:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1068:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1069:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1070:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1071:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1072:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
1073:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1074:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxListRemove( &( pxTCB->xEventListItem ) );
1075:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1076:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1077:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
1078:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1079:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1081:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( void * ) xTaskToSuspend == NULL )
1082:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1083:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1085:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* We have just suspended the current task. */
1086:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1087:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1088:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
1089:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1090:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1091:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1092:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1094:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1095:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1096:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1098:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					is. */
1099:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else
1102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
1115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
1117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
1118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
1121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Is the task we are attempting to resume actually in the
1123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		suspended list? */
1124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
1125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
1128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the
1130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				Suspended state?  It is possible to be in the suspended
1131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				list because it is blocked on a task with no timeout
1132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				specified. */
1133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
1134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
1136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
1141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskResume( xTaskHandle xTaskToResume )
1149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
1156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		it in the ready list. */
1157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) xTaskToResume;
1158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove(  &( pxTCB->xGenericListItem ) );
1172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
1173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
1178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						will leave the lists in the correct state for the next yield. */
1179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						portYIELD_WITHIN_API();
1180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle xTaskToResume )
1194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
1196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxSavedInterruptStatus;
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) xTaskToResume;
1202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
1212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove(  &( pxTCB->xGenericListItem ) );
1213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
1214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else
1216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* We cannot access the delayed or ready lists, so will hold this
1218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					task pending until the scheduler is resumed, at which point a
1219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					yield will be performed if necessary. */
1220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#else
1244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		starts to run.
1266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
1268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
1269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
1273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portable interface. */
1281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			function will not return. */
1285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
1292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn );
1297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static portTickType prvGetExpectedIdleTime( void )
1323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portTickType xReturn;
1325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			processed. */
1335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
1343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** register tskTCB *pxTCB;
1351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
1352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
1365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
1369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
1371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
1374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
1375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
1377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove( &( pxTCB->xEventListItem ) );
1378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
1379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
1380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* If we have moved a task that has a priority higher than
1382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					the current task then we should yield. */
1383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
1393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
1395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						vTaskIncrementTick();
1397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						--uxMissedTicks;
1398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					to ensure the highest priority task that is ready to run is
1402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					the task actually running. */
1403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					#if configUSE_PREEMPTION == 1
1404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
1405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
1407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					#endif
1408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
1411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xAlreadyYielded = pdTRUE;
1413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xMissedYield = pdFALSE;
1414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
1415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
1422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCount( void )
1426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xTicks;
1428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
1433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xTicks;
1437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCountFromISR( void )
1441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xReturn;
1443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xReturn = xTickCount;
1447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xReturn;
1450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
1458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
1464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskList( signed char *pcWriteBuffer )
1479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			report the task name, state and stack high water mark. */
1489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			do
1496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxQueue--;
1498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
1500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
1502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
1508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
1513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
1518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
1520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
1523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
1529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
1532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
1534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
1542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned long ulTotalRunTimeDiv100;
1545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#else
1554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
1556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
1558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
1559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			ulTotalRunTimeDiv100 = ulTotalRunTime / 100UL;
1560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			generating a table of run timer percentages in the provided
1563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			buffer. */
1564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			do
1571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxQueue--;
1573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
1575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
1577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
1583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
1588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
1593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTim
1595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
1598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
1603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTimeDiv10
1604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
1605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
1607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
1609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configGENERATE_RUN_TIME_STATS */
1612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetIdleTaskHandle( void )
1617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
1622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 1. */
1631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( portTickType xTicksToJump )
1634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
1637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskIncrementTick( void )
1643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** tskTCB * pxTCB;
1645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
1649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		++xTickCount;
1653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTickCount == ( portTickType ) 0U )
1654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xList *pxTemp;
1656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			an error! */
1660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
1661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTemp = pxDelayedTaskList;
1663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
1664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
1665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xNumOfOverflows++;
1666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is empty.  Set
1670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime to the maximum possible value so it is
1671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				extremely unlikely that the
1672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
1673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				there is an item in the delayed list. */
1674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;
1675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
1677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
1678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is not empty, get the value of
1679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				the item at the head of the delayed list.  This is the time at
1680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				which the task at the head of the delayed list should be removed
1681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				from the Blocked state. */
1682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
1684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
1685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire. */
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
1689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
1691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		++uxMissedTicks;
1693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
1696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif
1701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
1708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TICK_HOOK */
1713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
1719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
1724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1731:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1733:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1735:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
1736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1737:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
1740:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1742:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1743:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1744:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1745:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1746:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1748:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1749:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
1751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1752:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1755:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1757:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1759:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1762:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
1763:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1765:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
1766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1768:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
1769:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1770:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1772:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1774:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1776:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
1777:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1779:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
1780:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1781:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
1782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1783:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1785:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
1786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1788:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
1789:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1790:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
1791:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1793:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1796:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1797:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
1798:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1800:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
1801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1803:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
1804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
1806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1807:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		switch. */
1809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xMissedYield = pdTRUE;
1810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1811:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
1812:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1813:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
1814:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
1816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1817:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1818:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1819:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#else
1820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1821:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				#endif
1822:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1823:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the accumulated
1824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				time so far.  The time the task started running was stored in
1825:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime.  Note that there is no overflow protection here
1826:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				so count values are only valid until the timer overflows.  Generally
1827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				this will be about 1 hour assuming a 1uS timer increment. */
1828:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
1829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
1830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1831:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
1832:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1833:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
1834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1835:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
1837:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1838:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
1839:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1840:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1841:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1842:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1843:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1844:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1845:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portTickType xTimeToWake;
1846:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1847:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
1848:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1849:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED. */
1851:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1852:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1854:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event. */
1855:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
1856:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1857:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1858:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1859:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1860:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
1861:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1862:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
1863:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
1864:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1865:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1866:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1867:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1868:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
1870:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1871:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1872:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1873:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			indefinitely. */
1874:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
1875:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1876:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
1877:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1878:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1879:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1880:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1881:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1882:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1883:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1884:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
1885:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1886:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1887:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1888:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1889:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1890:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1891:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
1892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1893:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1895:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if configUSE_TIMERS == 1
1896:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1897:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
1898:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1899:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
1900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1901:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
1902:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1903:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
1904:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
1906:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		it should be called from a critical section. */
1907:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1908:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1909:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
1910:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
1911:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
1912:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
1913:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
1914:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1915:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
1916:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
1917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		function is called form a critical section. */
1918:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
1919:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
1920:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
1921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			check, and the port reset macro can be called directly. */
1922:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
1924:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1925:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
1926:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
1927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
1928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1929:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL();
1930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
1931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1933:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
1934:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1936:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1938:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** tskTCB *pxUnblockedTCB;
1939:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1940:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1941:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1942:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1943:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1944:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1945:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1946:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	it to the ready list.
1947:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1948:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
1949:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1950:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	means we can always expect exclusive access to the event list here.
1951:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
1953:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
1954:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
1956:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1957:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1958:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
1959:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1960:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
1961:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
1962:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1963:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
1964:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1965:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1966:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		task pending until the scheduler is resumed. */
1967:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1968:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1969:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1970:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
1971:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1972:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
1973:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
1974:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
1975:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		switch now. */
1976:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
1977:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1978:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
1979:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
1980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
1981:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
1982:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1983:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xReturn;
1984:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1985:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1986:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1987:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
1988:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1989:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1990:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
1991:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
1992:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
1993:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1994:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1995:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
1996:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
1997:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1998:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
1999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
2000:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
2001:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2003:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2004:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2005:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2006:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2007:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			therefore never time out. */
2008:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
2009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2010:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
2011:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2012:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2013:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif
2014:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2015:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
2016:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2018:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2019:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2020:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2021:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
2022:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2023:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
2024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2026:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
2027:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
2028:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
2029:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2030:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
2031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2032:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
2033:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2034:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2035:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2036:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return xReturn;
2038:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2039:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2041:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
2042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xMissedYield = pdTRUE;
2044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2045:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2046:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2047:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2048:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2049:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
2050:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2051:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2052:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2053:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2054:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
2055:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2056:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = ( tskTCB * ) xTask;
2057:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
2058:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2059:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
2060:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2061:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
2062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2063:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2064:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return uxReturn;
2065:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2066:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2067:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2068:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2069:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2070:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2071:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2072:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
2073:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2074:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2075:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2076:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
2077:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2078:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = ( tskTCB * ) xTask;
2079:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
2080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2081:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2082:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2083:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2085:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*
2086:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
2087:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The Idle task.
2088:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
2089:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
2090:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2091:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2092:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
2093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
2094:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  *
2095:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****  */
2096:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2098:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
2099:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
2100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( ;; )
2102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have been deleted. */
2104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
2105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
2110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
2111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
2112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskYIELD();
2113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
2119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
2121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			timeslice.
2122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
2124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
2126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
2127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
2128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskYIELD();
2130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
2137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
2140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
2141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
2144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
2150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portTickType xExpectedIdleTime;
2154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
2157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			valid. */
2159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
2164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
2167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					be used. */
2168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
2173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
2175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
2177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
2182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
2185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
2194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else if( xMissedYield != pdFALSE )
2196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
2199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
2201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if configUSE_TIMERS == 0
2203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* The idle task exists in addition to the application tasks. */
2205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				const unsigned portBASE_TYPE uxNonApplicationTasks = 1;
2206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If timers are not being used and all the tasks are in the
2208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				suspended list (which might mean they have an infinite block
2209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				time rather than actually being suspended) then it is safe to
2210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				turn all clocks off and just wait for external interrupts. */
2211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicati
2212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					eReturn = eNoTasksWaitingTimeout;
2214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif /* configUSE_TIMERS */
2217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return eReturn;
2220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
2225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Store the function name in the TCB. */
2227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
2228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
2230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
2231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configMAX_TASK_NAME_LEN */
2233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed 
2234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
2237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
2238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
2240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
2243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
2246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
2248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
2250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
2251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
2253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
2255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
2257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
2258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
2259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
2263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
2285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		( void ) usStackDepth;
2286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
2294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTaskToModify == pxCurrentTCB )
2298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTaskToModify = NULL;
2300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
2312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxPriority;
2314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
2316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
2318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
2321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
2322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
2323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
2327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
2329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
2333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	using list2. */
2338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
2339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
2340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portBASE_TYPE xListIsEmpty;
2348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
2351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
2352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
2354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
2355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTaskResumeAll();
2356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
2358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				tskTCB *pxTCB;
2360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
2364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
2365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
2366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
2367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
2371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	#endif /* vTaskDelete */
2375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
2379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
  25              		.loc 1 2379 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
2380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
2381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  30              		.loc 1 2381 0
  31 0000 0C4B     		ldr	r3, .L4
2379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
  32              		.loc 1 2379 0
  33 0002 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38              		.loc 1 2381 0
  39 0004 1A68     		ldr	r2, [r3, #0]
2379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
  40              		.loc 1 2379 0
  41 0006 0446     		mov	r4, r0
  42              		.loc 1 2381 0
  43 0008 5060     		str	r0, [r2, #4]
2382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xTimeToWake < xTickCount )
  44              		.loc 1 2383 0
  45 000a 5A68     		ldr	r2, [r3, #4]
  46 000c 9042     		cmp	r0, r2
  47 000e 06D2     		bcs	.L2
  48              	.LBB4:
  49              	.LBB5:
2384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericList
  50              		.loc 1 2386 0
  51 0010 9868     		ldr	r0, [r3, #8]
  52              	.LVL1:
  53 0012 1968     		ldr	r1, [r3, #0]
  54 0014 0431     		adds	r1, r1, #4
  55              	.LBE5:
  56              	.LBE4:
2387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	else
2389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* The wake time has not overflowed, so we can use the current block list. */
2391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) )
2392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		too. */
2396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
2397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
2399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
  57              		.loc 1 2401 0
  58 0016 BDE81040 		pop	{r4, lr}
  59              	.LBB7:
  60              	.LBB6:
2386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericList
  61              		.loc 1 2386 0
  62 001a FFF7FEBF 		b	vListInsert
  63              	.LVL2:
  64              	.L2:
  65              	.LBE6:
  66              	.LBE7:
2391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) )
  67              		.loc 1 2391 0
  68 001e D868     		ldr	r0, [r3, #12]
  69              	.LVL3:
  70 0020 1968     		ldr	r1, [r3, #0]
  71 0022 0431     		adds	r1, r1, #4
  72 0024 FFF7FEFF 		bl	vListInsert
  73              	.LVL4:
2396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
  74              		.loc 1 2396 0
  75 0028 034B     		ldr	r3, .L4+4
  76 002a 1A68     		ldr	r2, [r3, #0]
  77 002c 9442     		cmp	r4, r2
2398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
  78              		.loc 1 2398 0
  79 002e 38BF     		it	cc
  80 0030 1C60     		strcc	r4, [r3, #0]
  81 0032 10BD     		pop	{r4, pc}
  82              	.L5:
  83              		.align	2
  84              	.L4:
  85 0034 00000000 		.word	.LANCHOR0
  86 0038 00000000 		.word	.LANCHOR1
  87              		.cfi_endproc
  88              	.LFE29:
  90              		.align	1
  91              		.global	xTaskGenericCreate
  92              		.thumb
  93              		.thumb_func
  95              	xTaskGenericCreate:
  96              	.LFB0:
 495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
  97              		.loc 1 495 0
  98              		.cfi_startproc
  99              		@ args = 16, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              	.LVL5:
 102 003c 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 103              	.LCFI1:
 104              		.cfi_def_cfa_offset 40
 105              		.cfi_offset 3, -40
 106              		.cfi_offset 4, -36
 107              		.cfi_offset 5, -32
 108              		.cfi_offset 6, -28
 109              		.cfi_offset 7, -24
 110              		.cfi_offset 8, -20
 111              		.cfi_offset 9, -16
 112              		.cfi_offset 10, -12
 113              		.cfi_offset 11, -8
 114              		.cfi_offset 14, -4
 495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 115              		.loc 1 495 0
 116 0040 0A9E     		ldr	r6, [sp, #40]
 117 0042 8846     		mov	r8, r1
 118 0044 1746     		mov	r7, r2
 119 0046 9B46     		mov	fp, r3
 120 0048 DDF82C90 		ldr	r9, [sp, #44]
 121 004c 0C9D     		ldr	r5, [sp, #48]
 499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 122              		.loc 1 499 0
 123 004e 8246     		mov	sl, r0
 124 0050 10B9     		cbnz	r0, .L7
 499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 125              		.loc 1 499 0 is_stmt 0 discriminator 1
 126 0052 FFF7FEFF 		bl	ulPortSetInterruptMask
 127              	.LVL6:
 128              	.L8:
 129 0056 FEE7     		b	.L8
 130              	.LVL7:
 131              	.L7:
 500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 132              		.loc 1 500 0 is_stmt 1
 133 0058 042E     		cmp	r6, #4
 134 005a 02D9     		bls	.L9
 500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 135              		.loc 1 500 0 is_stmt 0 discriminator 1
 136 005c FFF7FEFF 		bl	ulPortSetInterruptMask
 137              	.LVL8:
 138              	.L10:
 139 0060 FEE7     		b	.L10
 140              	.LVL9:
 141              	.L9:
 142              	.LBB15:
 143              	.LBB16:
2402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
2406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** tskTCB *pxNewTCB;
2407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	the implementation of the port malloc function. */
2410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 144              		.loc 1 2410 0 is_stmt 1
 145 0062 4420     		movs	r0, #68
 146              	.LVL10:
 147 0064 FFF7FEFF 		bl	pvPortMalloc
 148              	.LVL11:
2411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 149              		.loc 1 2412 0
 150 0068 0446     		mov	r4, r0
 151 006a 0028     		cmp	r0, #0
 152 006c 00F0A480 		beq	.L11
2413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		be deleted later if required. */
2417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * size
 153              		.loc 1 2417 0
 154 0070 1DB9     		cbnz	r5, .L12
 155 0072 B800     		lsls	r0, r7, #2
 156              	.LVL12:
 157 0074 FFF7FEFF 		bl	pvPortMalloc
 158              	.LVL13:
 159 0078 0546     		mov	r5, r0
 160              	.LVL14:
 161              	.L12:
 162 007a 2563     		str	r5, [r4, #48]
2418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 163              		.loc 1 2419 0
 164 007c 1DB9     		cbnz	r5, .L13
2420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vPortFree( pxNewTCB );
 165              		.loc 1 2422 0
 166 007e 2046     		mov	r0, r4
 167 0080 FFF7FEFF 		bl	vPortFree
 168              	.LVL15:
 169 0084 98E0     		b	.L11
 170              	.LVL16:
 171              	.L13:
2423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB = NULL;
2424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
2426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Just to help debugging. */
2428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTA
 172              		.loc 1 2428 0
 173 0086 BA00     		lsls	r2, r7, #2
 174 0088 A521     		movs	r1, #165
 175 008a 2846     		mov	r0, r5
 176 008c FFF7FEFF 		bl	memset
 177              	.LVL17:
 178              	.LBE16:
 179              	.LBE15:
 180              	.LBB17:
 530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 181              		.loc 1 530 0
 182 0090 236B     		ldr	r3, [r4, #48]
 183              	.LBB18:
 184              	.LBB19:
2230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 185              		.loc 1 2230 0
 186 0092 4146     		mov	r1, r8
 187 0094 0A22     		movs	r2, #10
 188              	.LBE19:
 189              	.LBE18:
 530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 190              		.loc 1 530 0
 191 0096 013F     		subs	r7, r7, #1
 192              	.LVL18:
 193              	.LBB23:
 194              	.LBB20:
2230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 195              		.loc 1 2230 0
 196 0098 04F13400 		add	r0, r4, #52
 197              	.LBE20:
 198              	.LBE23:
 530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 199              		.loc 1 530 0
 200 009c 03EB8707 		add	r7, r3, r7, lsl #2
 201              	.LVL19:
 202              	.LBB24:
 203              	.LBB21:
2249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 204              		.loc 1 2249 0
 205 00a0 04F10408 		add	r8, r4, #4
 206              	.LVL20:
2230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 207              		.loc 1 2230 0
 208 00a4 FFF7FEFF 		bl	strncpy
 209              	.LVL21:
2233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed 
 210              		.loc 1 2233 0
 211 00a8 0023     		movs	r3, #0
 212 00aa 84F83D30 		strb	r3, [r4, #61]
2249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 213              		.loc 1 2249 0
 214 00ae 4046     		mov	r0, r8
2242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 215              		.loc 1 2242 0
 216 00b0 E662     		str	r6, [r4, #44]
2245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 217              		.loc 1 2245 0
 218 00b2 2664     		str	r6, [r4, #64]
2249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 219              		.loc 1 2249 0
 220 00b4 FFF7FEFF 		bl	vListInitialiseItem
 221              	.LVL22:
2250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 222              		.loc 1 2250 0
 223 00b8 04F11800 		add	r0, r4, #24
 224 00bc FFF7FEFF 		bl	vListInitialiseItem
 225              	.LVL23:
 226              	.LBE21:
 227              	.LBE24:
 531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 228              		.loc 1 531 0
 229 00c0 27F00707 		bic	r7, r7, #7
 230              	.LVL24:
 231              	.LBB25:
 232              	.LBB22:
2257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 233              		.loc 1 2257 0
 234 00c4 C6F10503 		rsb	r3, r6, #5
 235 00c8 A361     		str	r3, [r4, #24]
2254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 236              		.loc 1 2254 0
 237 00ca 2461     		str	r4, [r4, #16]
2258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 238              		.loc 1 2258 0
 239 00cc 6462     		str	r4, [r4, #36]
 240              	.LBE22:
 241              	.LBE25:
 563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 242              		.loc 1 563 0
 243 00ce 3846     		mov	r0, r7
 244 00d0 5146     		mov	r1, sl
 245 00d2 5A46     		mov	r2, fp
 246 00d4 FFF7FEFF 		bl	pxPortInitialiseStack
 247              	.LVL25:
 568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long
 248              		.loc 1 568 0
 249 00d8 4307     		lsls	r3, r0, #29
 563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 250              		.loc 1 563 0
 251 00da 2060     		str	r0, [r4, #0]
 568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long
 252              		.loc 1 568 0
 253 00dc 02D0     		beq	.L14
 568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long
 254              		.loc 1 568 0 is_stmt 0 discriminator 1
 255 00de FFF7FEFF 		bl	ulPortSetInterruptMask
 256              	.LVL26:
 257              	.L15:
 258 00e2 FEE7     		b	.L15
 259              	.L14:
 570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 260              		.loc 1 570 0 is_stmt 1
 261 00e4 B9F1000F 		cmp	r9, #0
 262 00e8 01D0     		beq	.L16
 575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 263              		.loc 1 575 0
 264 00ea C9F80040 		str	r4, [r9, #0]
 265              	.L16:
 580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 266              		.loc 1 580 0
 267 00ee FFF7FEFF 		bl	vPortEnterCritical
 268              	.LVL27:
 582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 269              		.loc 1 582 0
 270 00f2 334B     		ldr	r3, .L35
 271 00f4 1A69     		ldr	r2, [r3, #16]
 272 00f6 0132     		adds	r2, r2, #1
 273 00f8 1A61     		str	r2, [r3, #16]
 583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 274              		.loc 1 583 0
 275 00fa 1F68     		ldr	r7, [r3, #0]
 276              	.LVL28:
 277 00fc 4FBB     		cbnz	r7, .L17
 587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 278              		.loc 1 587 0
 279 00fe 1C60     		str	r4, [r3, #0]
 589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 280              		.loc 1 589 0
 281 0100 1A69     		ldr	r2, [r3, #16]
 282 0102 012A     		cmp	r2, #1
 283 0104 2DD1     		bne	.L19
 284              	.LBB26:
 285              	.LBB27:
2317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 286              		.loc 1 2317 0
 287 0106 03F11409 		add	r9, r3, #20
 288 010a 4FF0140A 		mov	sl, #20
 289              	.LVL29:
 290              	.L18:
 291 010e 0AFB0790 		mla	r0, sl, r7, r9
2315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 292              		.loc 1 2315 0
 293 0112 0137     		adds	r7, r7, #1
2317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 294              		.loc 1 2317 0
 295 0114 FFF7FEFF 		bl	vListInitialise
 296              	.LVL30:
2315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 297              		.loc 1 2315 0
 298 0118 052F     		cmp	r7, #5
2317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 299              		.loc 1 2317 0
 300 011a 294D     		ldr	r5, .L35
2315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 301              		.loc 1 2315 0
 302 011c F7D1     		bne	.L18
2320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 303              		.loc 1 2320 0
 304 011e 05F17809 		add	r9, r5, #120
 305 0122 4846     		mov	r0, r9
2321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 306              		.loc 1 2321 0
 307 0124 05F18C07 		add	r7, r5, #140
 308              	.LVL31:
2320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 309              		.loc 1 2320 0
 310 0128 FFF7FEFF 		bl	vListInitialise
 311              	.LVL32:
2321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 312              		.loc 1 2321 0
 313 012c 3846     		mov	r0, r7
 314 012e FFF7FEFF 		bl	vListInitialise
 315              	.LVL33:
2322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 316              		.loc 1 2322 0
 317 0132 05F1A000 		add	r0, r5, #160
 318 0136 FFF7FEFF 		bl	vListInitialise
 319              	.LVL34:
2326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 320              		.loc 1 2326 0
 321 013a 05F1B400 		add	r0, r5, #180
 322 013e FFF7FEFF 		bl	vListInitialise
 323              	.LVL35:
2332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
 324              		.loc 1 2332 0
 325 0142 05F1C800 		add	r0, r5, #200
 326 0146 FFF7FEFF 		bl	vListInitialise
 327              	.LVL36:
2338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 328              		.loc 1 2338 0
 329 014a C5F80C90 		str	r9, [r5, #12]
2339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 330              		.loc 1 2339 0
 331 014e AF60     		str	r7, [r5, #8]
 332 0150 07E0     		b	.L19
 333              	.LVL37:
 334              	.L17:
 335              	.LBE27:
 336              	.LBE26:
 602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 337              		.loc 1 602 0
 338 0152 D3F8DC20 		ldr	r2, [r3, #220]
 339 0156 22B9     		cbnz	r2, .L19
 604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 340              		.loc 1 604 0
 341 0158 1A68     		ldr	r2, [r3, #0]
 342 015a D26A     		ldr	r2, [r2, #44]
 343 015c B242     		cmp	r2, r6
 606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 344              		.loc 1 606 0
 345 015e 98BF     		it	ls
 346 0160 1C60     		strls	r4, [r3, #0]
 347              	.LVL38:
 348              	.L19:
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 349              		.loc 1 613 0
 350 0162 174A     		ldr	r2, .L35
 351 0164 E36A     		ldr	r3, [r4, #44]
 352 0166 D2F8E010 		ldr	r1, [r2, #224]
 628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 353              		.loc 1 628 0
 354 016a 154C     		ldr	r4, .L35
 355              	.LVL39:
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 356              		.loc 1 613 0
 357 016c 8B42     		cmp	r3, r1
 618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 358              		.loc 1 618 0
 359 016e D2F8E410 		ldr	r1, [r2, #228]
 615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 360              		.loc 1 615 0
 361 0172 88BF     		it	hi
 362 0174 C2F8E030 		strhi	r3, [r2, #224]
 618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 363              		.loc 1 618 0
 364 0178 0131     		adds	r1, r1, #1
 365 017a C2F8E410 		str	r1, [r2, #228]
 628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 366              		.loc 1 628 0
 367 017e D2F8E820 		ldr	r2, [r2, #232]
 368 0182 4146     		mov	r1, r8
 369 0184 9342     		cmp	r3, r2
 370 0186 84BF     		itt	hi
 371 0188 0D4A     		ldrhi	r2, .L35
 372 018a C2F8E830 		strhi	r3, [r2, #232]
 373 018e 04F11402 		add	r2, r4, #20
 374 0192 1420     		movs	r0, #20
 375 0194 00FB0320 		mla	r0, r0, r3, r2
 376 0198 FFF7FEFF 		bl	vListInsertEnd
 377              	.LVL40:
 633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 378              		.loc 1 633 0
 379 019c FFF7FEFF 		bl	vPortExitCritical
 380              	.LVL41:
 381              	.LBE17:
 643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 382              		.loc 1 643 0
 383 01a0 D4F8DC30 		ldr	r3, [r4, #220]
 384 01a4 2BB1     		cbz	r3, .L26
 647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 385              		.loc 1 647 0
 386 01a6 2368     		ldr	r3, [r4, #0]
 387 01a8 DB6A     		ldr	r3, [r3, #44]
 388 01aa B342     		cmp	r3, r6
 389 01ac 01D2     		bcs	.L26
 649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 390              		.loc 1 649 0
 391 01ae FFF7FEFF 		bl	vPortYield
 392              	.LVL42:
 393              	.L26:
 630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 394              		.loc 1 630 0
 395 01b2 0120     		movs	r0, #1
 396 01b4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 397              	.LVL43:
 398              	.L11:
 399              	.LBB28:
 637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 400              		.loc 1 637 0
 401 01b8 4FF0FF30 		mov	r0, #-1
 402              	.LBE28:
 655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 403              		.loc 1 655 0
 404 01bc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 405              	.L36:
 406              		.align	2
 407              	.L35:
 408 01c0 00000000 		.word	.LANCHOR0
 409              		.cfi_endproc
 410              	.LFE0:
 412              		.align	1
 413              		.global	vTaskDelete
 414              		.thumb
 415              		.thumb_func
 417              	vTaskDelete:
 418              	.LFB1:
 661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 419              		.loc 1 661 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423              	.LVL44:
 424 01c4 70B5     		push	{r4, r5, r6, lr}
 425              	.LCFI2:
 426              		.cfi_def_cfa_offset 16
 427              		.cfi_offset 4, -16
 428              		.cfi_offset 5, -12
 429              		.cfi_offset 6, -8
 430              		.cfi_offset 14, -4
 661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 431              		.loc 1 661 0
 432 01c6 0546     		mov	r5, r0
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 433              		.loc 1 664 0
 434 01c8 FFF7FEFF 		bl	vPortEnterCritical
 435              	.LVL45:
 668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTaskToDelete == pxCurrentTCB )
 436              		.loc 1 668 0
 437 01cc 164B     		ldr	r3, .L49
 438 01ce 1A68     		ldr	r2, [r3, #0]
 439 01d0 9542     		cmp	r5, r2
 440 01d2 01D0     		beq	.L38
 674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 441              		.loc 1 674 0
 442 01d4 2C46     		mov	r4, r5
 443 01d6 15B9     		cbnz	r5, .L39
 444              	.L38:
 674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 445              		.loc 1 674 0 is_stmt 0 discriminator 1
 446 01d8 1C68     		ldr	r4, [r3, #0]
 447 01da 0025     		movs	r5, #0
 448              	.LVL46:
 449 01dc FFE7     		b	.L39
 450              	.L39:
 451              	.LVL47:
 680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 452              		.loc 1 680 0 is_stmt 1 discriminator 3
 453 01de 261D     		adds	r6, r4, #4
 454 01e0 3046     		mov	r0, r6
 455 01e2 FFF7FEFF 		bl	uxListRemove
 456              	.LVL48:
 686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 457              		.loc 1 686 0 discriminator 3
 458 01e6 A36A     		ldr	r3, [r4, #40]
 459 01e8 1BB1     		cbz	r3, .L40
 688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxListRemove( &( pxTCB->xEventListItem ) );
 460              		.loc 1 688 0
 461 01ea 04F11800 		add	r0, r4, #24
 462 01ee FFF7FEFF 		bl	uxListRemove
 463              	.LVL49:
 464              	.L40:
 691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 465              		.loc 1 691 0
 466 01f2 0D4C     		ldr	r4, .L49
 467              	.LVL50:
 468 01f4 3146     		mov	r1, r6
 469 01f6 04F1B400 		add	r0, r4, #180
 470 01fa FFF7FEFF 		bl	vListInsertEnd
 471              	.LVL51:
 696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 472              		.loc 1 696 0
 473 01fe D4F8EC30 		ldr	r3, [r4, #236]
 474 0202 0133     		adds	r3, r3, #1
 475 0204 C4F8EC30 		str	r3, [r4, #236]
 700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 476              		.loc 1 700 0
 477 0208 D4F8E430 		ldr	r3, [r4, #228]
 478 020c 0133     		adds	r3, r3, #1
 479 020e C4F8E430 		str	r3, [r4, #228]
 704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 480              		.loc 1 704 0
 481 0212 FFF7FEFF 		bl	vPortExitCritical
 482              	.LVL52:
 707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 483              		.loc 1 707 0
 484 0216 D4F8DC30 		ldr	r3, [r4, #220]
 485 021a 23B1     		cbz	r3, .L37
 709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( ( void * ) xTaskToDelete == NULL )
 486              		.loc 1 709 0
 487 021c 1DB9     		cbnz	r5, .L37
 714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 488              		.loc 1 714 0
 489 021e BDE87040 		pop	{r4, r5, r6, lr}
 711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 490              		.loc 1 711 0
 491 0222 FFF7FEBF 		b	vPortYield
 492              	.LVL53:
 493              	.L37:
 494 0226 70BD     		pop	{r4, r5, r6, pc}
 495              	.L50:
 496              		.align	2
 497              	.L49:
 498 0228 00000000 		.word	.LANCHOR0
 499              		.cfi_endproc
 500              	.LFE1:
 502              		.align	1
 503              		.global	uxTaskPriorityGet
 504              		.thumb
 505              		.thumb_func
 507              	uxTaskPriorityGet:
 508              	.LFB4:
 908:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 509              		.loc 1 908 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              	.LVL54:
 514 022c 10B5     		push	{r4, lr}
 515              	.LCFI3:
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 4, -8
 518              		.cfi_offset 14, -4
 908:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 519              		.loc 1 908 0
 520 022e 0446     		mov	r4, r0
 912:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 521              		.loc 1 912 0
 522 0230 FFF7FEFF 		bl	vPortEnterCritical
 523              	.LVL55:
 916:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 524              		.loc 1 916 0
 525 0234 0CB9     		cbnz	r4, .L52
 916:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 526              		.loc 1 916 0 is_stmt 0 discriminator 1
 527 0236 034B     		ldr	r3, .L54
 528 0238 1C68     		ldr	r4, [r3, #0]
 529              	.LVL56:
 530              	.L52:
 917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 531              		.loc 1 917 0 is_stmt 1 discriminator 3
 532 023a E46A     		ldr	r4, [r4, #44]
 533              	.LVL57:
 919:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 534              		.loc 1 919 0 discriminator 3
 535 023c FFF7FEFF 		bl	vPortExitCritical
 536              	.LVL58:
 922:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 537              		.loc 1 922 0 discriminator 3
 538 0240 2046     		mov	r0, r4
 539 0242 10BD     		pop	{r4, pc}
 540              	.L55:
 541              		.align	2
 542              	.L54:
 543 0244 00000000 		.word	.LANCHOR0
 544              		.cfi_endproc
 545              	.LFE4:
 547              		.align	1
 548              		.global	vTaskPrioritySet
 549              		.thumb
 550              		.thumb_func
 552              	vTaskPrioritySet:
 553              	.LFB5:
 930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 554              		.loc 1 930 0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 0
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558              	.LVL59:
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 559              		.loc 1 935 0
 560 0248 0429     		cmp	r1, #4
 930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 561              		.loc 1 930 0
 562 024a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 563              	.LCFI4:
 564              		.cfi_def_cfa_offset 24
 565              		.cfi_offset 4, -24
 566              		.cfi_offset 5, -20
 567              		.cfi_offset 6, -16
 568              		.cfi_offset 7, -12
 569              		.cfi_offset 8, -8
 570              		.cfi_offset 14, -4
 930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 571              		.loc 1 930 0
 572 024e 0546     		mov	r5, r0
 573 0250 0E46     		mov	r6, r1
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 574              		.loc 1 935 0
 575 0252 02D9     		bls	.L57
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 576              		.loc 1 935 0 is_stmt 0 discriminator 1
 577 0254 FFF7FEFF 		bl	ulPortSetInterruptMask
 578              	.LVL60:
 579              	.L58:
 580 0258 FEE7     		b	.L58
 581              	.LVL61:
 582              	.L57:
 943:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 583              		.loc 1 943 0 is_stmt 1
 584 025a FFF7FEFF 		bl	vPortEnterCritical
 585              	.LVL62:
 945:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTask == ( xTaskHandle ) pxCurrentTCB )
 586              		.loc 1 945 0
 587 025e 204B     		ldr	r3, .L70
 588 0260 1A68     		ldr	r2, [r3, #0]
 589 0262 9542     		cmp	r5, r2
 590 0264 00D0     		beq	.L59
 952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 591              		.loc 1 952 0
 592 0266 15B9     		cbnz	r5, .L69
 593              	.L59:
 952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 594              		.loc 1 952 0 is_stmt 0 discriminator 1
 595 0268 1C68     		ldr	r4, [r3, #0]
 596 026a 0025     		movs	r5, #0
 597              	.LVL63:
 598 026c 00E0     		b	.L60
 599              	.LVL64:
 600              	.L69:
 952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 601              		.loc 1 952 0
 602 026e 2C46     		mov	r4, r5
 603              	.LVL65:
 604              	.L60:
 958:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 605              		.loc 1 958 0 is_stmt 1 discriminator 3
 606 0270 236C     		ldr	r3, [r4, #64]
 607              	.LVL66:
 966:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 608              		.loc 1 966 0 discriminator 3
 609 0272 B342     		cmp	r3, r6
 610 0274 2FD0     		beq	.L62
 970:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 611              		.loc 1 970 0
 612 0276 9E42     		cmp	r6, r3
 613 0278 03D9     		bls	.L63
 972:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( xTask != NULL )
 614              		.loc 1 972 0
 615 027a 0035     		adds	r5, r5, #0
 616 027c 18BF     		it	ne
 617 027e 0125     		movne	r5, #1
 618 0280 03E0     		b	.L64
 619              	.L63:
 981:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else if( xTask == NULL )
 620              		.loc 1 981 0
 621 0282 D5F10105 		rsbs	r5, r5, #1
 622 0286 38BF     		it	cc
 623 0288 0025     		movcc	r5, #0
 624              	.L64:
 625              	.LVL67:
 997:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 626              		.loc 1 997 0
 627 028a E26A     		ldr	r2, [r4, #44]
1003:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 628              		.loc 1 1003 0
 629 028c 2664     		str	r6, [r4, #64]
 997:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 630              		.loc 1 997 0
 631 028e 9342     		cmp	r3, r2
 999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 632              		.loc 1 999 0
 633 0290 08BF     		it	eq
 634 0292 E662     		streq	r6, [r4, #44]
1011:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 635              		.loc 1 1011 0
 636 0294 C6F10506 		rsb	r6, r6, #5
 637              	.LVL68:
 638 0298 A661     		str	r6, [r4, #24]
1017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 639              		.loc 1 1017 0
 640 029a 114E     		ldr	r6, .L70
 641 029c 1422     		movs	r2, #20
 642 029e 06F11400 		add	r0, r6, #20
 643 02a2 02FB0303 		mla	r3, r2, r3, r0
 644              	.LVL69:
 645 02a6 6269     		ldr	r2, [r4, #20]
 646 02a8 8046     		mov	r8, r0
 647 02aa 9A42     		cmp	r2, r3
 648 02ac 10D1     		bne	.L66
1022:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 649              		.loc 1 1022 0
 650 02ae 271D     		adds	r7, r4, #4
 651 02b0 3846     		mov	r0, r7
 652 02b2 FFF7FEFF 		bl	uxListRemove
 653              	.LVL70:
1026:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 654              		.loc 1 1026 0
 655 02b6 E36A     		ldr	r3, [r4, #44]
 656 02b8 D6F8E820 		ldr	r2, [r6, #232]
 657 02bc 3946     		mov	r1, r7
 658 02be 9342     		cmp	r3, r2
 659 02c0 88BF     		it	hi
 660 02c2 C6F8E830 		strhi	r3, [r6, #232]
 661 02c6 1420     		movs	r0, #20
 662 02c8 00FB0380 		mla	r0, r0, r3, r8
 663 02cc FFF7FEFF 		bl	vListInsertEnd
 664              	.LVL71:
 665              	.L66:
1029:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
 666              		.loc 1 1029 0
 667 02d0 0DB1     		cbz	r5, .L62
1031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 668              		.loc 1 1031 0
 669 02d2 FFF7FEFF 		bl	vPortYield
 670              	.LVL72:
 671              	.L62:
1040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 672              		.loc 1 1040 0
 673 02d6 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
1035:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 674              		.loc 1 1035 0
 675 02da FFF7FEBF 		b	vPortExitCritical
 676              	.LVL73:
 677              	.L71:
 678 02de 00BF     		.align	2
 679              	.L70:
 680 02e0 00000000 		.word	.LANCHOR0
 681              		.cfi_endproc
 682              	.LFE5:
 684              		.align	1
 685              		.global	xTaskIsTaskSuspended
 686              		.thumb
 687              		.thumb_func
 689              	xTaskIsTaskSuspended:
 690              	.LFB7:
1115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 691              		.loc 1 1115 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              	.LVL74:
 696 02e4 08B5     		push	{r3, lr}
 697              	.LCFI5:
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 3, -8
 700              		.cfi_offset 14, -4
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 701              		.loc 1 1120 0
 702 02e6 10B9     		cbnz	r0, .L73
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 703              		.loc 1 1120 0 is_stmt 0 discriminator 1
 704 02e8 FFF7FEFF 		bl	ulPortSetInterruptMask
 705              	.LVL75:
 706              	.L74:
 707 02ec FEE7     		b	.L74
 708              	.LVL76:
 709              	.L73:
1124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 710              		.loc 1 1124 0 is_stmt 1
 711 02ee 4369     		ldr	r3, [r0, #20]
 712 02f0 074A     		ldr	r2, .L79
 713 02f2 9342     		cmp	r3, r2
 714 02f4 09D1     		bne	.L77
 715              	.LVL77:
 716              	.LBB31:
 717              	.LBB32:
1127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 718              		.loc 1 1127 0
 719 02f6 806A     		ldr	r0, [r0, #40]
 720              	.LVL78:
 721 02f8 A2F12803 		sub	r3, r2, #40
 722 02fc 9842     		cmp	r0, r3
 723 02fe 04D0     		beq	.L77
1133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 724              		.loc 1 1133 0
 725 0300 D0F10100 		rsbs	r0, r0, #1
 726 0304 38BF     		it	cc
 727 0306 0020     		movcc	r0, #0
 728 0308 08BD     		pop	{r3, pc}
 729              	.LVL79:
 730              	.L77:
 731              	.LBE32:
 732              	.LBE31:
1116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 733              		.loc 1 1116 0
 734 030a 0020     		movs	r0, #0
 735              	.LVL80:
1141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 736              		.loc 1 1141 0
 737 030c 08BD     		pop	{r3, pc}
 738              	.L80:
 739 030e 00BF     		.align	2
 740              	.L79:
 741 0310 C8000000 		.word	.LANCHOR0+200
 742              		.cfi_endproc
 743              	.LFE7:
 745              		.align	1
 746              		.global	vTaskResume
 747              		.thumb
 748              		.thumb_func
 750              	vTaskResume:
 751              	.LFB8:
1149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 752              		.loc 1 1149 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756              	.LVL81:
 757 0314 70B5     		push	{r4, r5, r6, lr}
 758              	.LCFI6:
 759              		.cfi_def_cfa_offset 16
 760              		.cfi_offset 4, -16
 761              		.cfi_offset 5, -12
 762              		.cfi_offset 6, -8
 763              		.cfi_offset 14, -4
1153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 764              		.loc 1 1153 0
 765 0316 0446     		mov	r4, r0
 766 0318 10B9     		cbnz	r0, .L82
1153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 767              		.loc 1 1153 0 is_stmt 0 discriminator 1
 768 031a FFF7FEFF 		bl	ulPortSetInterruptMask
 769              	.LVL82:
 770              	.L83:
 771 031e FEE7     		b	.L83
 772              	.LVL83:
 773              	.L82:
1161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 774              		.loc 1 1161 0 is_stmt 1 discriminator 1
 775 0320 154D     		ldr	r5, .L89
 776 0322 2B68     		ldr	r3, [r5, #0]
 777 0324 9842     		cmp	r0, r3
 778 0326 25D0     		beq	.L81
1163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 779              		.loc 1 1163 0
 780 0328 FFF7FEFF 		bl	vPortEnterCritical
 781              	.LVL84:
1165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 782              		.loc 1 1165 0
 783 032c 2046     		mov	r0, r4
 784 032e FFF7FEFF 		bl	xTaskIsTaskSuspended
 785              	.LVL85:
 786 0332 0128     		cmp	r0, #1
 787 0334 1AD1     		bne	.L86
1171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove(  &( pxTCB->xGenericListItem ) );
 788              		.loc 1 1171 0
 789 0336 261D     		adds	r6, r4, #4
 790 0338 3046     		mov	r0, r6
 791 033a FFF7FEFF 		bl	uxListRemove
 792              	.LVL86:
1172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 793              		.loc 1 1172 0
 794 033e E36A     		ldr	r3, [r4, #44]
 795 0340 D5F8E820 		ldr	r2, [r5, #232]
 796 0344 3146     		mov	r1, r6
 797 0346 9342     		cmp	r3, r2
 798 0348 88BF     		it	hi
 799 034a C5F8E830 		strhi	r3, [r5, #232]
 800 034e 0A4D     		ldr	r5, .L89
 801 0350 1420     		movs	r0, #20
 802 0352 05F11402 		add	r2, r5, #20
 803 0356 00FB0320 		mla	r0, r0, r3, r2
 804 035a FFF7FEFF 		bl	vListInsertEnd
 805              	.LVL87:
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 806              		.loc 1 1175 0
 807 035e 2B68     		ldr	r3, [r5, #0]
 808 0360 E26A     		ldr	r2, [r4, #44]
 809 0362 DB6A     		ldr	r3, [r3, #44]
 810 0364 9A42     		cmp	r2, r3
 811 0366 01D3     		bcc	.L86
1179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						portYIELD_WITHIN_API();
 812              		.loc 1 1179 0
 813 0368 FFF7FEFF 		bl	vPortYield
 814              	.LVL88:
 815              	.L86:
1185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 816              		.loc 1 1185 0
 817 036c BDE87040 		pop	{r4, r5, r6, lr}
1183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 818              		.loc 1 1183 0
 819 0370 FFF7FEBF 		b	vPortExitCritical
 820              	.LVL89:
 821              	.L81:
 822 0374 70BD     		pop	{r4, r5, r6, pc}
 823              	.L90:
 824 0376 00BF     		.align	2
 825              	.L89:
 826 0378 00000000 		.word	.LANCHOR0
 827              		.cfi_endproc
 828              	.LFE8:
 830              		.align	1
 831              		.global	xTaskResumeFromISR
 832              		.thumb
 833              		.thumb_func
 835              	xTaskResumeFromISR:
 836              	.LFB9:
1194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 837              		.loc 1 1194 0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 0
 840              		@ frame_needed = 0, uses_anonymous_args = 0
 841              	.LVL90:
 842 037c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 843              	.LCFI7:
 844              		.cfi_def_cfa_offset 24
 845              		.cfi_offset 4, -24
 846              		.cfi_offset 5, -20
 847              		.cfi_offset 6, -16
 848              		.cfi_offset 7, -12
 849              		.cfi_offset 8, -8
 850              		.cfi_offset 14, -4
1199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 851              		.loc 1 1199 0
 852 0380 0446     		mov	r4, r0
 853 0382 10B9     		cbnz	r0, .L92
1199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 854              		.loc 1 1199 0 is_stmt 0 discriminator 1
 855 0384 FFF7FEFF 		bl	ulPortSetInterruptMask
 856              	.LVL91:
 857              	.L93:
 858 0388 FEE7     		b	.L93
 859              	.LVL92:
 860              	.L92:
1203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 861              		.loc 1 1203 0 is_stmt 1
 862 038a FFF7FEFF 		bl	ulPortSetInterruptMask
 863              	.LVL93:
 864 038e 8046     		mov	r8, r0
 865              	.LVL94:
1205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 866              		.loc 1 1205 0
 867 0390 2046     		mov	r0, r4
 868              	.LVL95:
 869 0392 FFF7FEFF 		bl	xTaskIsTaskSuspended
 870              	.LVL96:
 871 0396 0128     		cmp	r0, #1
 872 0398 23D1     		bne	.L97
1209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 873              		.loc 1 1209 0
 874 039a 154D     		ldr	r5, .L98
 875 039c D5F8F030 		ldr	r3, [r5, #240]
 876 03a0 CBB9     		cbnz	r3, .L95
1211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 877              		.loc 1 1211 0
 878 03a2 2A68     		ldr	r2, [r5, #0]
 879 03a4 E36A     		ldr	r3, [r4, #44]
 880 03a6 D66A     		ldr	r6, [r2, #44]
 881 03a8 B342     		cmp	r3, r6
 882 03aa 34BF     		ite	cc
 883 03ac 0026     		movcc	r6, #0
 884 03ae 0126     		movcs	r6, #1
 885              	.LVL97:
1212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove(  &( pxTCB->xGenericListItem ) );
 886              		.loc 1 1212 0
 887 03b0 271D     		adds	r7, r4, #4
 888 03b2 3846     		mov	r0, r7
 889 03b4 FFF7FEFF 		bl	uxListRemove
 890              	.LVL98:
1213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 891              		.loc 1 1213 0
 892 03b8 E36A     		ldr	r3, [r4, #44]
 893 03ba D5F8E820 		ldr	r2, [r5, #232]
 894 03be 3946     		mov	r1, r7
 895 03c0 9342     		cmp	r3, r2
 896 03c2 0C4A     		ldr	r2, .L98+4
 897 03c4 88BF     		it	hi
 898 03c6 C5F8E830 		strhi	r3, [r5, #232]
 899 03ca 1420     		movs	r0, #20
 900 03cc 00FB0320 		mla	r0, r0, r3, r2
 901 03d0 FFF7FEFF 		bl	vListInsertEnd
 902              	.LVL99:
 903 03d4 06E0     		b	.L94
 904              	.LVL100:
 905              	.L95:
1220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 906              		.loc 1 1220 0
 907 03d6 05F1A000 		add	r0, r5, #160
 908 03da 04F11801 		add	r1, r4, #24
 909 03de FFF7FEFF 		bl	vListInsertEnd
 910              	.LVL101:
 911              	.L97:
1195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 912              		.loc 1 1195 0
 913 03e2 0026     		movs	r6, #0
 914              	.LVL102:
 915              	.L94:
1224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 916              		.loc 1 1224 0
 917 03e4 4046     		mov	r0, r8
 918 03e6 FFF7FEFF 		bl	vPortClearInterruptMask
 919              	.LVL103:
1227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 920              		.loc 1 1227 0
 921 03ea 3046     		mov	r0, r6
 922 03ec BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 923              	.L99:
 924              		.align	2
 925              	.L98:
 926 03f0 00000000 		.word	.LANCHOR0
 927 03f4 14000000 		.word	.LANCHOR0+20
 928              		.cfi_endproc
 929              	.LFE9:
 931              		.align	1
 932              		.global	vTaskStartScheduler
 933              		.thumb
 934              		.thumb_func
 936              	vTaskStartScheduler:
 937              	.LFB10:
1233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 938              		.loc 1 1233 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 942 03f8 30B5     		push	{r4, r5, lr}
 943              	.LCFI8:
 944              		.cfi_def_cfa_offset 12
 945              		.cfi_offset 4, -12
 946              		.cfi_offset 5, -8
 947              		.cfi_offset 14, -4
1246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 948              		.loc 1 1246 0
 949 03fa 0024     		movs	r4, #0
1233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 950              		.loc 1 1233 0
 951 03fc 85B0     		sub	sp, sp, #20
 952              	.LCFI9:
 953              		.cfi_def_cfa_offset 32
1246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 954              		.loc 1 1246 0
 955 03fe 0094     		str	r4, [sp, #0]
 956 0400 0194     		str	r4, [sp, #4]
 957 0402 0294     		str	r4, [sp, #8]
 958 0404 0394     		str	r4, [sp, #12]
 959 0406 1048     		ldr	r0, .L104
 960 0408 1049     		ldr	r1, .L104+4
 961 040a 4FF4A072 		mov	r2, #320
 962 040e 2346     		mov	r3, r4
 963 0410 FFF7FEFF 		bl	xTaskGenericCreate
 964              	.LVL104:
1252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 965              		.loc 1 1252 0
 966 0414 0128     		cmp	r0, #1
1246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 967              		.loc 1 1246 0
 968 0416 0546     		mov	r5, r0
 969              	.LVL105:
1252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 970              		.loc 1 1252 0
 971 0418 0FD1     		bne	.L101
1254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 972              		.loc 1 1254 0
 973 041a FFF7FEFF 		bl	xTimerCreateTimerTask
 974              	.LVL106:
1259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 975              		.loc 1 1259 0
 976 041e 0128     		cmp	r0, #1
1254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 977              		.loc 1 1254 0
 978 0420 0546     		mov	r5, r0
 979              	.LVL107:
1259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 980              		.loc 1 1259 0
 981 0422 0AD1     		bne	.L101
1269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
 982              		.loc 1 1269 0
 983 0424 FFF7FEFF 		bl	ulPortSetInterruptMask
 984              	.LVL108:
1271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 985              		.loc 1 1271 0
 986 0428 094B     		ldr	r3, .L104+8
 987 042a C3F8DC50 		str	r5, [r3, #220]
1272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
 988              		.loc 1 1272 0
 989 042e 5C60     		str	r4, [r3, #4]
1298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 990              		.loc 1 1298 0
 991 0430 05B0     		add	sp, sp, #20
 992 0432 BDE83040 		pop	{r4, r5, lr}
1281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 993              		.loc 1 1281 0
 994 0436 FFF7FEBF 		b	xPortStartScheduler
 995              	.LVL109:
 996              	.L101:
1296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn );
 997              		.loc 1 1296 0
 998 043a 15B9     		cbnz	r5, .L100
1296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn );
 999              		.loc 1 1296 0 is_stmt 0 discriminator 1
 1000 043c FFF7FEFF 		bl	ulPortSetInterruptMask
 1001              	.LVL110:
 1002              	.L103:
 1003 0440 FEE7     		b	.L103
 1004              	.L100:
1298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1005              		.loc 1 1298 0 is_stmt 1
 1006 0442 05B0     		add	sp, sp, #20
 1007 0444 30BD     		pop	{r4, r5, pc}
 1008              	.L105:
 1009 0446 00BF     		.align	2
 1010              	.L104:
 1011 0448 00000000 		.word	prvIdleTask
 1012 044c 00000000 		.word	.LC0
 1013 0450 00000000 		.word	.LANCHOR0
 1014              		.cfi_endproc
 1015              	.LFE10:
 1017              		.align	1
 1018              		.global	vTaskEndScheduler
 1019              		.thumb
 1020              		.thumb_func
 1022              	vTaskEndScheduler:
 1023              	.LFB11:
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1024              		.loc 1 1302 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 1028 0454 08B5     		push	{r3, lr}
 1029              	.LCFI10:
 1030              		.cfi_def_cfa_offset 8
 1031              		.cfi_offset 3, -8
 1032              		.cfi_offset 14, -4
1306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
 1033              		.loc 1 1306 0
 1034 0456 FFF7FEFF 		bl	ulPortSetInterruptMask
 1035              	.LVL111:
1307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1036              		.loc 1 1307 0
 1037 045a 044B     		ldr	r3, .L107
 1038 045c 0022     		movs	r2, #0
 1039 045e C3F8DC20 		str	r2, [r3, #220]
1309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1040              		.loc 1 1309 0
 1041 0462 BDE80840 		pop	{r3, lr}
1308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1042              		.loc 1 1308 0
 1043 0466 FFF7FEBF 		b	vPortEndScheduler
 1044              	.LVL112:
 1045              	.L108:
 1046 046a 00BF     		.align	2
 1047              	.L107:
 1048 046c 00000000 		.word	.LANCHOR0
 1049              		.cfi_endproc
 1050              	.LFE11:
 1052              		.align	1
 1053              		.global	vTaskSuspendAll
 1054              		.thumb
 1055              		.thumb_func
 1057              	vTaskSuspendAll:
 1058              	.LFB12:
1313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1059              		.loc 1 1313 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 0
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063              		@ link register save eliminated.
1316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 1064              		.loc 1 1316 0
 1065 0470 034B     		ldr	r3, .L110
 1066 0472 D3F8F020 		ldr	r2, [r3, #240]
 1067 0476 0132     		adds	r2, r2, #1
 1068 0478 C3F8F020 		str	r2, [r3, #240]
 1069 047c 7047     		bx	lr
 1070              	.L111:
 1071 047e 00BF     		.align	2
 1072              	.L110:
 1073 0480 00000000 		.word	.LANCHOR0
 1074              		.cfi_endproc
 1075              	.LFE12:
 1077              		.align	1
 1078              		.global	xTaskGetTickCount
 1079              		.thumb
 1080              		.thumb_func
 1082              	xTaskGetTickCount:
 1083              	.LFB14:
1426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1084              		.loc 1 1426 0
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 0
 1087              		@ frame_needed = 0, uses_anonymous_args = 0
 1088 0484 10B5     		push	{r4, lr}
 1089              	.LCFI11:
 1090              		.cfi_def_cfa_offset 8
 1091              		.cfi_offset 4, -8
 1092              		.cfi_offset 14, -4
1430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1093              		.loc 1 1430 0
 1094 0486 FFF7FEFF 		bl	vPortEnterCritical
 1095              	.LVL113:
1432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 1096              		.loc 1 1432 0
 1097 048a 034B     		ldr	r3, .L113
 1098 048c 5C68     		ldr	r4, [r3, #4]
 1099              	.LVL114:
1434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1100              		.loc 1 1434 0
 1101 048e FFF7FEFF 		bl	vPortExitCritical
 1102              	.LVL115:
1437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1103              		.loc 1 1437 0
 1104 0492 2046     		mov	r0, r4
 1105 0494 10BD     		pop	{r4, pc}
 1106              	.L114:
 1107 0496 00BF     		.align	2
 1108              	.L113:
 1109 0498 00000000 		.word	.LANCHOR0
 1110              		.cfi_endproc
 1111              	.LFE14:
 1113              		.align	1
 1114              		.global	xTaskGetTickCountFromISR
 1115              		.thumb
 1116              		.thumb_func
 1118              	xTaskGetTickCountFromISR:
 1119              	.LFB15:
1441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1120              		.loc 1 1441 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124 049c 10B5     		push	{r4, lr}
 1125              	.LCFI12:
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 4, -8
 1128              		.cfi_offset 14, -4
1445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1129              		.loc 1 1445 0
 1130 049e FFF7FEFF 		bl	ulPortSetInterruptMask
 1131              	.LVL116:
1446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xReturn = xTickCount;
 1132              		.loc 1 1446 0
 1133 04a2 034B     		ldr	r3, .L116
 1134 04a4 5C68     		ldr	r4, [r3, #4]
 1135              	.LVL117:
1447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1136              		.loc 1 1447 0
 1137 04a6 FFF7FEFF 		bl	vPortClearInterruptMask
 1138              	.LVL118:
1450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1139              		.loc 1 1450 0
 1140 04aa 2046     		mov	r0, r4
 1141 04ac 10BD     		pop	{r4, pc}
 1142              	.L117:
 1143 04ae 00BF     		.align	2
 1144              	.L116:
 1145 04b0 00000000 		.word	.LANCHOR0
 1146              		.cfi_endproc
 1147              	.LFE15:
 1149              		.align	1
 1150              		.global	uxTaskGetNumberOfTasks
 1151              		.thumb
 1152              		.thumb_func
 1154              	uxTaskGetNumberOfTasks:
 1155              	.LFB16:
1454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1156              		.loc 1 1454 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 1160              		@ link register save eliminated.
1457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 1161              		.loc 1 1457 0
 1162 04b4 014B     		ldr	r3, .L119
 1163 04b6 1869     		ldr	r0, [r3, #16]
1458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1164              		.loc 1 1458 0
 1165 04b8 7047     		bx	lr
 1166              	.L120:
 1167 04ba 00BF     		.align	2
 1168              	.L119:
 1169 04bc 00000000 		.word	.LANCHOR0
 1170              		.cfi_endproc
 1171              	.LFE16:
 1173              		.align	1
 1174              		.global	vTaskIncrementTick
 1175              		.thumb
 1176              		.thumb_func
 1178              	vTaskIncrementTick:
 1179              	.LFB17:
1643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1180              		.loc 1 1643 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
1650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1184              		.loc 1 1650 0
 1185 04c0 314B     		ldr	r3, .L138
1643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1186              		.loc 1 1643 0
 1187 04c2 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1188              	.LCFI13:
 1189              		.cfi_def_cfa_offset 24
 1190              		.cfi_offset 4, -24
 1191              		.cfi_offset 5, -20
 1192              		.cfi_offset 6, -16
 1193              		.cfi_offset 7, -12
 1194              		.cfi_offset 8, -8
 1195              		.cfi_offset 14, -4
1650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1196              		.loc 1 1650 0
 1197 04c6 D3F8F020 		ldr	r2, [r3, #240]
 1198 04ca 002A     		cmp	r2, #0
 1199 04cc 54D1     		bne	.L122
1652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		++xTickCount;
 1200              		.loc 1 1652 0
 1201 04ce 5A68     		ldr	r2, [r3, #4]
 1202 04d0 0132     		adds	r2, r2, #1
 1203 04d2 5A60     		str	r2, [r3, #4]
1653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTickCount == ( portTickType ) 0U )
 1204              		.loc 1 1653 0
 1205 04d4 5A68     		ldr	r2, [r3, #4]
 1206 04d6 D2B9     		cbnz	r2, .L123
 1207              	.LBB33:
1660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 1208              		.loc 1 1660 0
 1209 04d8 DA68     		ldr	r2, [r3, #12]
 1210 04da 1268     		ldr	r2, [r2, #0]
 1211 04dc 12B1     		cbz	r2, .L124
1660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 1212              		.loc 1 1660 0 is_stmt 0 discriminator 1
 1213 04de FFF7FEFF 		bl	ulPortSetInterruptMask
 1214              	.LVL119:
 1215              	.L125:
 1216 04e2 FEE7     		b	.L125
 1217              	.L124:
1662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTemp = pxDelayedTaskList;
 1218              		.loc 1 1662 0 is_stmt 1
 1219 04e4 DA68     		ldr	r2, [r3, #12]
 1220              	.LVL120:
1663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 1221              		.loc 1 1663 0
 1222 04e6 9968     		ldr	r1, [r3, #8]
 1223 04e8 D960     		str	r1, [r3, #12]
1664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 1224              		.loc 1 1664 0
 1225 04ea 9A60     		str	r2, [r3, #8]
1665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xNumOfOverflows++;
 1226              		.loc 1 1665 0
 1227 04ec D3F8F420 		ldr	r2, [r3, #244]
 1228              	.LVL121:
 1229 04f0 0132     		adds	r2, r2, #1
 1230 04f2 C3F8F420 		str	r2, [r3, #244]
1667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1231              		.loc 1 1667 0
 1232 04f6 DA68     		ldr	r2, [r3, #12]
 1233 04f8 1168     		ldr	r1, [r2, #0]
 1234 04fa 244A     		ldr	r2, .L138+4
 1235 04fc 11B9     		cbnz	r1, .L126
1674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;
 1236              		.loc 1 1674 0
 1237 04fe 4FF0FF33 		mov	r3, #-1
 1238 0502 03E0     		b	.L137
 1239              	.L126:
1682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 1240              		.loc 1 1682 0
 1241 0504 DB68     		ldr	r3, [r3, #12]
 1242 0506 DB68     		ldr	r3, [r3, #12]
 1243 0508 DB68     		ldr	r3, [r3, #12]
 1244              	.LVL122:
1683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 1245              		.loc 1 1683 0
 1246 050a 5B68     		ldr	r3, [r3, #4]
 1247              	.LVL123:
 1248              	.L137:
 1249 050c 1360     		str	r3, [r2, #0]
 1250              	.LVL124:
 1251              	.L123:
 1252              	.LBE33:
 1253              	.LBB34:
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 1254              		.loc 1 1688 0
 1255 050e 1E4C     		ldr	r4, .L138
 1256 0510 1E4B     		ldr	r3, .L138+4
 1257 0512 6268     		ldr	r2, [r4, #4]
 1258 0514 1B68     		ldr	r3, [r3, #0]
 1259 0516 9A42     		cmp	r2, r3
 1260 0518 33D3     		bcc	.L121
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 1261              		.loc 1 1688 0 is_stmt 0 discriminator 1
 1262 051a 04F11407 		add	r7, r4, #20
 1263 051e 4FF01408 		mov	r8, #20
 1264              	.L136:
 1265 0522 E368     		ldr	r3, [r4, #12]
 1266 0524 1B68     		ldr	r3, [r3, #0]
 1267 0526 2BB9     		cbnz	r3, .L128
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 1268              		.loc 1 1688 0 discriminator 2
 1269 0528 184B     		ldr	r3, .L138+4
 1270 052a 4FF0FF32 		mov	r2, #-1
 1271 052e 1A60     		str	r2, [r3, #0]
 1272 0530 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1273              	.L128:
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 1274              		.loc 1 1688 0 discriminator 3
 1275 0534 E368     		ldr	r3, [r4, #12]
 1276 0536 DB68     		ldr	r3, [r3, #12]
 1277 0538 DD68     		ldr	r5, [r3, #12]
 1278              	.LVL125:
 1279 053a 6268     		ldr	r2, [r4, #4]
 1280 053c 6B68     		ldr	r3, [r5, #4]
 1281              	.LVL126:
 1282 053e 9A42     		cmp	r2, r3
 1283 0540 03D2     		bcs	.L129
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 1284              		.loc 1 1688 0 discriminator 4
 1285 0542 124A     		ldr	r2, .L138+4
 1286 0544 1360     		str	r3, [r2, #0]
 1287 0546 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1288              	.L129:
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 1289              		.loc 1 1688 0 discriminator 5
 1290 054a 2E1D     		adds	r6, r5, #4
 1291 054c 3046     		mov	r0, r6
 1292 054e FFF7FEFF 		bl	uxListRemove
 1293              	.LVL127:
 1294 0552 AB6A     		ldr	r3, [r5, #40]
 1295 0554 1BB1     		cbz	r3, .L130
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 1296              		.loc 1 1688 0 discriminator 6
 1297 0556 05F11800 		add	r0, r5, #24
 1298 055a FFF7FEFF 		bl	uxListRemove
 1299              	.LVL128:
 1300              	.L130:
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 1301              		.loc 1 1688 0 discriminator 7
 1302 055e E86A     		ldr	r0, [r5, #44]
 1303 0560 D4F8E820 		ldr	r2, [r4, #232]
 1304 0564 3146     		mov	r1, r6
 1305 0566 9042     		cmp	r0, r2
 1306 0568 88BF     		it	hi
 1307 056a C4F8E800 		strhi	r0, [r4, #232]
 1308 056e 08FB0070 		mla	r0, r8, r0, r7
 1309 0572 FFF7FEFF 		bl	vListInsertEnd
 1310              	.LVL129:
 1311 0576 D4E7     		b	.L136
 1312              	.LVL130:
 1313              	.L122:
 1314              	.LBE34:
1692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		++uxMissedTicks;
 1315              		.loc 1 1692 0 is_stmt 1
 1316 0578 D3F8F820 		ldr	r2, [r3, #248]
 1317 057c 0132     		adds	r2, r2, #1
 1318 057e C3F8F820 		str	r2, [r3, #248]
 1319              	.L121:
 1320 0582 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1321              	.L139:
 1322 0586 00BF     		.align	2
 1323              	.L138:
 1324 0588 00000000 		.word	.LANCHOR0
 1325 058c 00000000 		.word	.LANCHOR1
 1326              		.cfi_endproc
 1327              	.LFE17:
 1329              		.align	1
 1330              		.global	xTaskResumeAll
 1331              		.thumb
 1332              		.thumb_func
 1334              	xTaskResumeAll:
 1335              	.LFB13:
1349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1336              		.loc 1 1349 0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 0
 1339              		@ frame_needed = 0, uses_anonymous_args = 0
 1340              	.LVL131:
 1341 0590 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1342              	.LCFI14:
 1343              		.cfi_def_cfa_offset 32
 1344              		.cfi_offset 3, -32
 1345              		.cfi_offset 4, -28
 1346              		.cfi_offset 5, -24
 1347              		.cfi_offset 6, -20
 1348              		.cfi_offset 7, -16
 1349              		.cfi_offset 8, -12
 1350              		.cfi_offset 9, -8
 1351              		.cfi_offset 14, -4
1355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 1352              		.loc 1 1355 0
 1353 0594 304C     		ldr	r4, .L165
 1354 0596 D4F8F030 		ldr	r3, [r4, #240]
 1355 059a 13B9     		cbnz	r3, .L141
1355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 1356              		.loc 1 1355 0 is_stmt 0 discriminator 1
 1357 059c FFF7FEFF 		bl	ulPortSetInterruptMask
 1358              	.LVL132:
 1359              	.L142:
 1360 05a0 FEE7     		b	.L142
 1361              	.L141:
1362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1362              		.loc 1 1362 0 is_stmt 1
 1363 05a2 FFF7FEFF 		bl	vPortEnterCritical
 1364              	.LVL133:
1364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 1365              		.loc 1 1364 0
 1366 05a6 D4F8F030 		ldr	r3, [r4, #240]
 1367 05aa 013B     		subs	r3, r3, #1
 1368 05ac C4F8F030 		str	r3, [r4, #240]
1366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1369              		.loc 1 1366 0
 1370 05b0 D4F8F060 		ldr	r6, [r4, #240]
 1371 05b4 0EB1     		cbz	r6, .L143
 1372              	.L146:
1351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 1373              		.loc 1 1351 0
 1374 05b6 0024     		movs	r4, #0
 1375 05b8 49E0     		b	.L144
 1376              	.L143:
1368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 1377              		.loc 1 1368 0
 1378 05ba 2369     		ldr	r3, [r4, #16]
 1379 05bc F3B9     		cbnz	r3, .L154
 1380 05be FAE7     		b	.L146
 1381              	.LVL134:
 1382              	.L149:
 1383              	.LBB35:
1376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 1384              		.loc 1 1376 0
 1385 05c0 D4F8AC30 		ldr	r3, [r4, #172]
 1386 05c4 DD68     		ldr	r5, [r3, #12]
 1387              	.LVL135:
1378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
 1388              		.loc 1 1378 0
 1389 05c6 2F1D     		adds	r7, r5, #4
1377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove( &( pxTCB->xEventListItem ) );
 1390              		.loc 1 1377 0
 1391 05c8 05F11800 		add	r0, r5, #24
 1392 05cc FFF7FEFF 		bl	uxListRemove
 1393              	.LVL136:
1378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
 1394              		.loc 1 1378 0
 1395 05d0 3846     		mov	r0, r7
 1396 05d2 FFF7FEFF 		bl	uxListRemove
 1397              	.LVL137:
1379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1398              		.loc 1 1379 0
 1399 05d6 E86A     		ldr	r0, [r5, #44]
 1400 05d8 D4F8E820 		ldr	r2, [r4, #232]
 1401 05dc 3946     		mov	r1, r7
 1402 05de 9042     		cmp	r0, r2
 1403 05e0 88BF     		it	hi
 1404 05e2 C4F8E800 		strhi	r0, [r4, #232]
 1405 05e6 09FB0080 		mla	r0, r9, r0, r8
 1406 05ea FFF7FEFF 		bl	vListInsertEnd
 1407              	.LVL138:
1383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1408              		.loc 1 1383 0
 1409 05ee 2368     		ldr	r3, [r4, #0]
 1410 05f0 EA6A     		ldr	r2, [r5, #44]
 1411 05f2 DB6A     		ldr	r3, [r3, #44]
1385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1412              		.loc 1 1385 0
 1413 05f4 9A42     		cmp	r2, r3
 1414 05f6 28BF     		it	cs
 1415 05f8 0126     		movcs	r6, #1
 1416              	.LVL139:
 1417 05fa 03E0     		b	.L162
 1418              	.LVL140:
 1419              	.L154:
1379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1420              		.loc 1 1379 0
 1421 05fc 04F11408 		add	r8, r4, #20
 1422 0600 4FF01409 		mov	r9, #20
 1423              	.L162:
 1424              	.LVL141:
1374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1425              		.loc 1 1374 0 discriminator 1
 1426 0604 D4F8A020 		ldr	r2, [r4, #160]
 1427 0608 134B     		ldr	r3, .L165
 1428 060a 002A     		cmp	r2, #0
 1429 060c D8D1     		bne	.L149
1392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1430              		.loc 1 1392 0
 1431 060e D3F8F820 		ldr	r2, [r3, #248]
 1432 0612 42B9     		cbnz	r2, .L150
 1433 0614 14E0     		b	.L163
 1434              	.L152:
1396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						vTaskIncrementTick();
 1435              		.loc 1 1396 0
 1436 0616 FFF7FEFF 		bl	vTaskIncrementTick
 1437              	.LVL142:
1397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						--uxMissedTicks;
 1438              		.loc 1 1397 0
 1439 061a D4F8F830 		ldr	r3, [r4, #248]
 1440 061e 013B     		subs	r3, r3, #1
 1441 0620 C4F8F830 		str	r3, [r4, #248]
 1442 0624 00E0     		b	.L164
 1443              	.L150:
1394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1444              		.loc 1 1394 0 discriminator 1
 1445 0626 1C46     		mov	r4, r3
 1446              	.L164:
 1447 0628 D4F8F830 		ldr	r3, [r4, #248]
 1448 062c 002B     		cmp	r3, #0
 1449 062e F2D1     		bne	.L152
 1450              	.L153:
 1451              	.LVL143:
1413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xMissedYield = pdFALSE;
 1452              		.loc 1 1413 0
 1453 0630 094B     		ldr	r3, .L165
 1454 0632 0022     		movs	r2, #0
 1455 0634 C3F8FC20 		str	r2, [r3, #252]
1412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xAlreadyYielded = pdTRUE;
 1456              		.loc 1 1412 0
 1457 0638 0124     		movs	r4, #1
1414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 1458              		.loc 1 1414 0
 1459 063a FFF7FEFF 		bl	vPortYield
 1460              	.LVL144:
 1461 063e 06E0     		b	.L144
 1462              	.LVL145:
 1463              	.L163:
1410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1464              		.loc 1 1410 0
 1465 0640 012E     		cmp	r6, #1
 1466 0642 F5D0     		beq	.L153
1410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1467              		.loc 1 1410 0 is_stmt 0 discriminator 1
 1468 0644 D3F8FC30 		ldr	r3, [r3, #252]
 1469 0648 012B     		cmp	r3, #1
 1470 064a B4D1     		bne	.L146
 1471 064c F0E7     		b	.L153
 1472              	.LVL146:
 1473              	.L144:
 1474              	.LBE35:
1419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1475              		.loc 1 1419 0 is_stmt 1
 1476 064e FFF7FEFF 		bl	vPortExitCritical
 1477              	.LVL147:
1422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 1478              		.loc 1 1422 0
 1479 0652 2046     		mov	r0, r4
 1480 0654 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1481              	.L166:
 1482              		.align	2
 1483              	.L165:
 1484 0658 00000000 		.word	.LANCHOR0
 1485              		.cfi_endproc
 1486              	.LFE13:
 1488              		.align	1
 1489              		.thumb
 1490              		.thumb_func
 1492              	prvIdleTask:
 1493              	.LFB25:
2097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1494              		.loc 1 2097 0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 0
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 1498              	.LVL148:
 1499 065c 38B5     		push	{r3, r4, r5, lr}
 1500              	.LCFI15:
 1501              		.cfi_def_cfa_offset 16
 1502              		.cfi_offset 3, -16
 1503              		.cfi_offset 4, -12
 1504              		.cfi_offset 5, -8
 1505              		.cfi_offset 14, -4
 1506              	.LBB43:
 1507              	.LBB44:
2351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 1508              		.loc 1 2351 0
 1509 065e 164C     		ldr	r4, .L178
 1510 0660 1EE0     		b	.L177
 1511              	.LVL149:
 1512              	.L170:
2353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1513              		.loc 1 2353 0
 1514 0662 FFF7FEFF 		bl	vTaskSuspendAll
 1515              	.LVL150:
2354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 1516              		.loc 1 2354 0
 1517 0666 D4F8B450 		ldr	r5, [r4, #180]
 1518              	.LVL151:
2355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTaskResumeAll();
 1519              		.loc 1 2355 0
 1520 066a FFF7FEFF 		bl	xTaskResumeAll
 1521              	.LVL152:
2357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 1522              		.loc 1 2357 0
 1523 066e BDB1     		cbz	r5, .L177
 1524              	.LBB45:
2361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 1525              		.loc 1 2361 0
 1526 0670 FFF7FEFF 		bl	vPortEnterCritical
 1527              	.LVL153:
2363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 1528              		.loc 1 2363 0
 1529 0674 D4F8C030 		ldr	r3, [r4, #192]
 1530 0678 DD68     		ldr	r5, [r3, #12]
 1531              	.LVL154:
2364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					uxListRemove( &( pxTCB->xGenericListItem ) );
 1532              		.loc 1 2364 0
 1533 067a 281D     		adds	r0, r5, #4
 1534 067c FFF7FEFF 		bl	uxListRemove
 1535              	.LVL155:
2365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 1536              		.loc 1 2365 0
 1537 0680 2369     		ldr	r3, [r4, #16]
 1538 0682 013B     		subs	r3, r3, #1
 1539 0684 2361     		str	r3, [r4, #16]
2366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
 1540              		.loc 1 2366 0
 1541 0686 D4F8EC30 		ldr	r3, [r4, #236]
 1542 068a 013B     		subs	r3, r3, #1
 1543 068c C4F8EC30 		str	r3, [r4, #236]
2368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 1544              		.loc 1 2368 0
 1545 0690 FFF7FEFF 		bl	vPortExitCritical
 1546              	.LVL156:
 1547              	.LBB46:
 1548              	.LBB47:
2429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	return pxNewTCB;
2433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
2434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
2439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned short usStackRemaining;
2442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatusString[ configMAX_TASK_NAME_LEN + 30 ];
2443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Write the details of all the TCB's in pxList into the buffer. */
2445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		do
2447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
2450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
2452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#else
2454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
2456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			#endif
2458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, 
2460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
2461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
2469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
2471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned long ulStatsAsPercentage;
2474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Write the run time stats of all the TCB's in pxList into the buffer. */
2476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		do
2478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Get next TCB in from the list. */
2480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			/* Divide by zero check. */
2483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTimeDiv100 > 0UL )
2484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Has the task run at all? */
2486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( pxNextTCB->ulRunTimeCounter == 0UL )
2487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* The task has used no CPU time at all. */
2489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					sprintf( pcStatsString, ( char * ) "%s\t\t0\t\t0%%\r\n", pxNextTCB->pcTaskName );
2490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else
2492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
2494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
2495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
2496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTimeDiv100;
2497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
2499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
2500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						{
2502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t%lu%%\r\n", pxNextTCB->pcTaskName, pxNextTC
2503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						}
2504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#else
2505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						{
2506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t%u%%\r\n", pxNextTCB->pcTaskName, ( unsigned
2509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						}
2510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#endif
2511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
2512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					else
2513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
2514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
2515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
2516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						{
2518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t<1%%\r\n", pxNextTCB->pcTaskName, pxNextTCB
2519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						}
2520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#else
2521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						{
2522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t<1%%\r\n", pxNextTCB->pcTaskName, ( unsigned
2525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						}
2526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						#endif
2527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
2528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
2531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configGENERATE_RUN_TIME_STATS */
2537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	register unsigned short usCount = 0U;
2544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
2546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
2548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			usCount++;
2549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
2552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return usCount;
2554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
2557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned char *pcEndOfStack;
2565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
2570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
2572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#else
2574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		#endif
2578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
2580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return uxReturn;
2582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
2585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
2591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
2592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
2593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
2594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
2595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		the task to free any memory allocated at the application level. */
2598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 1549              		.loc 1 2598 0
 1550 0694 286B     		ldr	r0, [r5, #48]
 1551 0696 FFF7FEFF 		bl	vPortFree
 1552              	.LVL157:
2599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vPortFree( pxTCB );
 1553              		.loc 1 2599 0
 1554 069a 2846     		mov	r0, r5
 1555 069c FFF7FEFF 		bl	vPortFree
 1556              	.LVL158:
 1557              	.L177:
 1558              	.LBE47:
 1559              	.LBE46:
 1560              	.LBE45:
2351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 1561              		.loc 1 2351 0
 1562 06a0 D4F8EC30 		ldr	r3, [r4, #236]
 1563 06a4 002B     		cmp	r3, #0
 1564 06a6 DCD1     		bne	.L170
 1565              	.LBE44:
 1566              	.LBE43:
2127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
 1567              		.loc 1 2127 0
 1568 06a8 6369     		ldr	r3, [r4, #20]
 1569 06aa 012B     		cmp	r3, #1
 1570 06ac 01D9     		bls	.L171
2129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 1571              		.loc 1 2129 0
 1572 06ae FFF7FEFF 		bl	vPortYield
 1573              	.LVL159:
 1574              	.L171:
 1575              	.LBB48:
2143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
 1576              		.loc 1 2143 0
 1577 06b2 FFF7FEFF 		bl	vApplicationIdleHook
 1578              	.LVL160:
 1579              	.LBE48:
2180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1580              		.loc 1 2180 0
 1581 06b6 F3E7     		b	.L177
 1582              	.L179:
 1583              		.align	2
 1584              	.L178:
 1585 06b8 00000000 		.word	.LANCHOR0
 1586              		.cfi_endproc
 1587              	.LFE25:
 1589              		.align	1
 1590              		.global	vTaskDelay
 1591              		.thumb
 1592              		.thumb_func
 1594              	vTaskDelay:
 1595              	.LFB3:
 794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 1596              		.loc 1 794 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 0
 1599              		@ frame_needed = 0, uses_anonymous_args = 0
 1600              	.LVL161:
 1601 06bc 10B5     		push	{r4, lr}
 1602              	.LCFI16:
 1603              		.cfi_def_cfa_offset 8
 1604              		.cfi_offset 4, -8
 1605              		.cfi_offset 14, -4
 799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 1606              		.loc 1 799 0
 1607 06be 0446     		mov	r4, r0
 1608 06c0 18B9     		cbnz	r0, .L181
 1609              	.LVL162:
 1610              	.L182:
 838:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1611              		.loc 1 838 0
 1612 06c2 BDE81040 		pop	{r4, lr}
 836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1613              		.loc 1 836 0
 1614 06c6 FFF7FEBF 		b	vPortYield
 1615              	.LVL163:
 1616              	.L181:
 801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1617              		.loc 1 801 0
 1618 06ca FFF7FEFF 		bl	vTaskSuspendAll
 1619              	.LVL164:
 815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 1620              		.loc 1 815 0
 1621 06ce 074B     		ldr	r3, .L186
 1622 06d0 5A68     		ldr	r2, [r3, #4]
 820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 1623              		.loc 1 820 0
 1624 06d2 1868     		ldr	r0, [r3, #0]
 815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 1625              		.loc 1 815 0
 1626 06d4 A418     		adds	r4, r4, r2
 1627              	.LVL165:
 820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 1628              		.loc 1 820 0
 1629 06d6 0430     		adds	r0, r0, #4
 1630 06d8 FFF7FEFF 		bl	uxListRemove
 1631              	.LVL166:
 827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 1632              		.loc 1 827 0
 1633 06dc 2046     		mov	r0, r4
 1634 06de FFF78FFC 		bl	prvAddCurrentTaskToDelayedList
 1635              	.LVL167:
 829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1636              		.loc 1 829 0
 1637 06e2 FFF7FEFF 		bl	xTaskResumeAll
 1638              	.LVL168:
 834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1639              		.loc 1 834 0
 1640 06e6 0028     		cmp	r0, #0
 1641 06e8 EBD0     		beq	.L182
 838:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1642              		.loc 1 838 0
 1643 06ea 10BD     		pop	{r4, pc}
 1644              	.L187:
 1645              		.align	2
 1646              	.L186:
 1647 06ec 00000000 		.word	.LANCHOR0
 1648              		.cfi_endproc
 1649              	.LFE3:
 1651              		.align	1
 1652              		.global	vTaskDelayUntil
 1653              		.thumb
 1654              		.thumb_func
 1656              	vTaskDelayUntil:
 1657              	.LFB2:
 722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 1658              		.loc 1 722 0
 1659              		.cfi_startproc
 1660              		@ args = 0, pretend = 0, frame = 0
 1661              		@ frame_needed = 0, uses_anonymous_args = 0
 1662              	.LVL169:
 1663 06f0 38B5     		push	{r3, r4, r5, lr}
 1664              	.LCFI17:
 1665              		.cfi_def_cfa_offset 16
 1666              		.cfi_offset 3, -16
 1667              		.cfi_offset 4, -12
 1668              		.cfi_offset 5, -8
 1669              		.cfi_offset 14, -4
 722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 1670              		.loc 1 722 0
 1671 06f2 0C46     		mov	r4, r1
 726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1672              		.loc 1 726 0
 1673 06f4 0546     		mov	r5, r0
 1674 06f6 10B9     		cbnz	r0, .L189
 726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1675              		.loc 1 726 0 is_stmt 0 discriminator 1
 1676 06f8 FFF7FEFF 		bl	ulPortSetInterruptMask
 1677              	.LVL170:
 1678              	.L190:
 1679 06fc FEE7     		b	.L190
 1680              	.LVL171:
 1681              	.L189:
 727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1682              		.loc 1 727 0 is_stmt 1
 1683 06fe 11B9     		cbnz	r1, .L191
 727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1684              		.loc 1 727 0 is_stmt 0 discriminator 1
 1685 0700 FFF7FEFF 		bl	ulPortSetInterruptMask
 1686              	.LVL172:
 1687              	.L192:
 1688 0704 FEE7     		b	.L192
 1689              	.LVL173:
 1690              	.L191:
 729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1691              		.loc 1 729 0 is_stmt 1
 1692 0706 FFF7FEFF 		bl	vTaskSuspendAll
 1693              	.LVL174:
 734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 1694              		.loc 1 734 0
 1695 070a 134A     		ldr	r2, .L203
 732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1696              		.loc 1 732 0
 1697 070c 2B68     		ldr	r3, [r5, #0]
 734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 1698              		.loc 1 734 0
 1699 070e 5168     		ldr	r1, [r2, #4]
 732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1700              		.loc 1 732 0
 1701 0710 1C19     		adds	r4, r3, r4
 1702              	.LVL175:
 734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 1703              		.loc 1 734 0
 1704 0712 9942     		cmp	r1, r3
 1705 0714 02D2     		bcs	.L193
 741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 1706              		.loc 1 741 0
 1707 0716 9C42     		cmp	r4, r3
 1708 0718 08D2     		bcs	.L197
 1709 071a 01E0     		b	.L202
 1710              	.L193:
 751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 1711              		.loc 1 751 0
 1712 071c 9C42     		cmp	r4, r3
 1713 071e 07D3     		bcc	.L198
 1714              	.L202:
 751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 1715              		.loc 1 751 0 is_stmt 0 discriminator 1
 1716 0720 5368     		ldr	r3, [r2, #4]
 1717 0722 9C42     		cmp	r4, r3
 1718 0724 94BF     		ite	ls
 1719 0726 0023     		movls	r3, #0
 1720 0728 0123     		movhi	r3, #1
 1721 072a 02E0     		b	.L194
 1722              	.L197:
 724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 1723              		.loc 1 724 0 is_stmt 1
 1724 072c 0023     		movs	r3, #0
 1725 072e 00E0     		b	.L194
 1726              	.L198:
 753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1727              		.loc 1 753 0
 1728 0730 0123     		movs	r3, #1
 1729              	.L194:
 1730              	.LVL176:
 758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1731              		.loc 1 758 0
 1732 0732 2C60     		str	r4, [r5, #0]
 760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1733              		.loc 1 760 0
 1734 0734 3BB1     		cbz	r3, .L195
 767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 1735              		.loc 1 767 0
 1736 0736 084B     		ldr	r3, .L203
 1737              	.LVL177:
 1738 0738 1868     		ldr	r0, [r3, #0]
 1739 073a 0430     		adds	r0, r0, #4
 1740 073c FFF7FEFF 		bl	uxListRemove
 1741              	.LVL178:
 775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 1742              		.loc 1 775 0
 1743 0740 2046     		mov	r0, r4
 1744 0742 FFF75DFC 		bl	prvAddCurrentTaskToDelayedList
 1745              	.LVL179:
 1746              	.L195:
 778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1747              		.loc 1 778 0
 1748 0746 FFF7FEFF 		bl	xTaskResumeAll
 1749              	.LVL180:
 782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1750              		.loc 1 782 0
 1751 074a 18B9     		cbnz	r0, .L188
 786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1752              		.loc 1 786 0
 1753 074c BDE83840 		pop	{r3, r4, r5, lr}
 784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1754              		.loc 1 784 0
 1755 0750 FFF7FEBF 		b	vPortYield
 1756              	.LVL181:
 1757              	.L188:
 1758 0754 38BD     		pop	{r3, r4, r5, pc}
 1759              	.L204:
 1760 0756 00BF     		.align	2
 1761              	.L203:
 1762 0758 00000000 		.word	.LANCHOR0
 1763              		.cfi_endproc
 1764              	.LFE2:
 1766              		.align	1
 1767              		.global	vTaskSwitchContext
 1768              		.thumb
 1769              		.thumb_func
 1771              	vTaskSwitchContext:
 1772              	.LFB18:
1804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1773              		.loc 1 1804 0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 0
 1776              		@ frame_needed = 0, uses_anonymous_args = 0
 1777 075c 38B5     		push	{r3, r4, r5, lr}
 1778              	.LCFI18:
 1779              		.cfi_def_cfa_offset 16
 1780              		.cfi_offset 3, -16
 1781              		.cfi_offset 4, -12
 1782              		.cfi_offset 5, -8
 1783              		.cfi_offset 14, -4
1805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 1784              		.loc 1 1805 0
 1785 075e 264B     		ldr	r3, .L219
 1786 0760 D3F8F020 		ldr	r2, [r3, #240]
 1787 0764 1C46     		mov	r4, r3
 1788 0766 1AB1     		cbz	r2, .L206
1809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xMissedYield = pdTRUE;
 1789              		.loc 1 1809 0
 1790 0768 0122     		movs	r2, #1
 1791 076a C3F8FC20 		str	r2, [r3, #252]
 1792 076e 38BD     		pop	{r3, r4, r5, pc}
 1793              	.L206:
1833:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 1794              		.loc 1 1833 0
 1795 0770 1A68     		ldr	r2, [r3, #0]
 1796 0772 1B68     		ldr	r3, [r3, #0]
 1797 0774 1268     		ldr	r2, [r2, #0]
 1798 0776 1B6B     		ldr	r3, [r3, #48]
 1799 0778 9A42     		cmp	r2, r3
 1800 077a 04D8     		bhi	.L208
1833:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 1801              		.loc 1 1833 0 is_stmt 0 discriminator 1
 1802 077c 2068     		ldr	r0, [r4, #0]
 1803 077e 2168     		ldr	r1, [r4, #0]
 1804 0780 3431     		adds	r1, r1, #52
 1805 0782 FFF7FEFF 		bl	vApplicationStackOverflowHook
 1806              	.LVL182:
 1807              	.L208:
 1808              	.LBB49:
1834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 1809              		.loc 1 1834 0 is_stmt 1
 1810 0786 2368     		ldr	r3, [r4, #0]
 1811 0788 1C49     		ldr	r1, .L219+4
 1812 078a 186B     		ldr	r0, [r3, #48]
 1813 078c 1422     		movs	r2, #20
 1814 078e 1A4D     		ldr	r5, .L219
 1815 0790 FFF7FEFF 		bl	memcmp
 1816              	.LVL183:
 1817 0794 88B1     		cbz	r0, .L210
1834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 1818              		.loc 1 1834 0 is_stmt 0 discriminator 1
 1819 0796 2868     		ldr	r0, [r5, #0]
 1820 0798 2968     		ldr	r1, [r5, #0]
 1821 079a 3431     		adds	r1, r1, #52
 1822 079c FFF7FEFF 		bl	vApplicationStackOverflowHook
 1823              	.LVL184:
 1824 07a0 0BE0     		b	.L210
 1825              	.L213:
 1826              	.LBE49:
1836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1827              		.loc 1 1836 0 is_stmt 1 discriminator 5
 1828 07a2 D2F8E830 		ldr	r3, [r2, #232]
 1829 07a6 13B9     		cbnz	r3, .L211
1836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1830              		.loc 1 1836 0 is_stmt 0 discriminator 2
 1831 07a8 FFF7FEFF 		bl	ulPortSetInterruptMask
 1832              	.LVL185:
 1833              	.L212:
 1834 07ac FEE7     		b	.L212
 1835              	.L211:
1836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1836              		.loc 1 1836 0 discriminator 3
 1837 07ae D2F8E830 		ldr	r3, [r2, #232]
 1838 07b2 013B     		subs	r3, r3, #1
 1839 07b4 C2F8E830 		str	r3, [r2, #232]
 1840 07b8 01E0     		b	.L218
 1841              	.L210:
1836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1842              		.loc 1 1836 0 discriminator 1
 1843 07ba 0F4A     		ldr	r2, .L219
 1844 07bc 1420     		movs	r0, #20
 1845              	.L218:
 1846 07be D2F8E830 		ldr	r3, [r2, #232]
 1847 07c2 0D49     		ldr	r1, .L219
 1848 07c4 00FB0323 		mla	r3, r0, r3, r2
 1849 07c8 5B69     		ldr	r3, [r3, #20]
 1850 07ca 002B     		cmp	r3, #0
 1851 07cc E9D0     		beq	.L213
 1852              	.LBB50:
1836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 1853              		.loc 1 1836 0 discriminator 6
 1854 07ce D1F8E830 		ldr	r3, [r1, #232]
 1855 07d2 1422     		movs	r2, #20
 1856 07d4 1431     		adds	r1, r1, #20
 1857 07d6 02FB0313 		mla	r3, r2, r3, r1
 1858              	.LVL186:
 1859 07da 5A68     		ldr	r2, [r3, #4]
 1860 07dc 03F10801 		add	r1, r3, #8
 1861 07e0 5268     		ldr	r2, [r2, #4]
 1862 07e2 8A42     		cmp	r2, r1
 1863 07e4 5A60     		str	r2, [r3, #4]
 1864 07e6 04BF     		itt	eq
 1865 07e8 5268     		ldreq	r2, [r2, #4]
 1866 07ea 5A60     		streq	r2, [r3, #4]
 1867 07ec 5B68     		ldr	r3, [r3, #4]
 1868              	.LVL187:
 1869 07ee DA68     		ldr	r2, [r3, #12]
 1870 07f0 014B     		ldr	r3, .L219
 1871 07f2 1A60     		str	r2, [r3, #0]
 1872 07f4 38BD     		pop	{r3, r4, r5, pc}
 1873              	.L220:
 1874 07f6 00BF     		.align	2
 1875              	.L219:
 1876 07f8 00000000 		.word	.LANCHOR0
 1877 07fc 00000000 		.word	.LANCHOR2
 1878              	.LBE50:
 1879              		.cfi_endproc
 1880              	.LFE18:
 1882              		.align	1
 1883              		.global	vTaskSuspend
 1884              		.thumb
 1885              		.thumb_func
 1887              	vTaskSuspend:
 1888              	.LFB6:
1048:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 1889              		.loc 1 1048 0 is_stmt 1
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 0
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893              	.LVL188:
 1894 0800 70B5     		push	{r4, r5, r6, lr}
 1895              	.LCFI19:
 1896              		.cfi_def_cfa_offset 16
 1897              		.cfi_offset 4, -16
 1898              		.cfi_offset 5, -12
 1899              		.cfi_offset 6, -8
 1900              		.cfi_offset 14, -4
1048:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 1901              		.loc 1 1048 0
 1902 0802 0446     		mov	r4, r0
1051:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1903              		.loc 1 1051 0
 1904 0804 FFF7FEFF 		bl	vPortEnterCritical
 1905              	.LVL189:
1055:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xTaskToSuspend == ( xTaskHandle ) pxCurrentTCB )
 1906              		.loc 1 1055 0
 1907 0808 174B     		ldr	r3, .L232
 1908 080a 1A68     		ldr	r2, [r3, #0]
 1909 080c 9442     		cmp	r4, r2
 1910 080e 01D0     		beq	.L222
1061:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1911              		.loc 1 1061 0
 1912 0810 2546     		mov	r5, r4
 1913 0812 14B9     		cbnz	r4, .L223
 1914              	.L222:
1061:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1915              		.loc 1 1061 0 is_stmt 0 discriminator 1
 1916 0814 1D68     		ldr	r5, [r3, #0]
 1917 0816 0024     		movs	r4, #0
 1918              	.LVL190:
 1919 0818 FFE7     		b	.L223
 1920              	.L223:
 1921              	.LVL191:
1066:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 1922              		.loc 1 1066 0 is_stmt 1 discriminator 3
 1923 081a 2E1D     		adds	r6, r5, #4
 1924 081c 3046     		mov	r0, r6
 1925 081e FFF7FEFF 		bl	uxListRemove
 1926              	.LVL192:
1072:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 1927              		.loc 1 1072 0 discriminator 3
 1928 0822 AB6A     		ldr	r3, [r5, #40]
 1929 0824 1BB1     		cbz	r3, .L224
1074:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				uxListRemove( &( pxTCB->xEventListItem ) );
 1930              		.loc 1 1074 0
 1931 0826 05F11800 		add	r0, r5, #24
 1932 082a FFF7FEFF 		bl	uxListRemove
 1933              	.LVL193:
 1934              	.L224:
1077:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1935              		.loc 1 1077 0
 1936 082e 0E4D     		ldr	r5, .L232
 1937              	.LVL194:
 1938 0830 3146     		mov	r1, r6
 1939 0832 05F1C800 		add	r0, r5, #200
 1940 0836 FFF7FEFF 		bl	vListInsertEnd
 1941              	.LVL195:
1079:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1942              		.loc 1 1079 0
 1943 083a FFF7FEFF 		bl	vPortExitCritical
 1944              	.LVL196:
1081:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( void * ) xTaskToSuspend == NULL )
 1945              		.loc 1 1081 0
 1946 083e 002C     		cmp	r4, #0
 1947 0840 11D1     		bne	.L221
1083:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1948              		.loc 1 1083 0
 1949 0842 D5F8DC30 		ldr	r3, [r5, #220]
 1950 0846 1BB1     		cbz	r3, .L226
1107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1951              		.loc 1 1107 0
 1952 0848 BDE87040 		pop	{r4, r5, r6, lr}
1086:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1953              		.loc 1 1086 0
 1954 084c FFF7FEBF 		b	vPortYield
 1955              	.LVL197:
 1956              	.L226:
1093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1957              		.loc 1 1093 0
 1958 0850 D5F8C820 		ldr	r2, [r5, #200]
 1959 0854 2B69     		ldr	r3, [r5, #16]
 1960 0856 9A42     		cmp	r2, r3
 1961 0858 01D1     		bne	.L227
1099:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1962              		.loc 1 1099 0
 1963 085a 2C60     		str	r4, [r5, #0]
 1964 085c 70BD     		pop	{r4, r5, r6, pc}
 1965              	.L227:
1107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 1966              		.loc 1 1107 0
 1967 085e BDE87040 		pop	{r4, r5, r6, lr}
1103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
 1968              		.loc 1 1103 0
 1969 0862 FFF7FEBF 		b	vTaskSwitchContext
 1970              	.LVL198:
 1971              	.L221:
 1972 0866 70BD     		pop	{r4, r5, r6, pc}
 1973              	.L233:
 1974              		.align	2
 1975              	.L232:
 1976 0868 00000000 		.word	.LANCHOR0
 1977              		.cfi_endproc
 1978              	.LFE6:
 1980              		.align	1
 1981              		.global	vTaskPlaceOnEventList
 1982              		.thumb
 1983              		.thumb_func
 1985              	vTaskPlaceOnEventList:
 1986              	.LFB19:
1844:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1987              		.loc 1 1844 0
 1988              		.cfi_startproc
 1989              		@ args = 0, pretend = 0, frame = 0
 1990              		@ frame_needed = 0, uses_anonymous_args = 0
 1991              	.LVL199:
 1992 086c 38B5     		push	{r3, r4, r5, lr}
 1993              	.LCFI20:
 1994              		.cfi_def_cfa_offset 16
 1995              		.cfi_offset 3, -16
 1996              		.cfi_offset 4, -12
 1997              		.cfi_offset 5, -8
 1998              		.cfi_offset 14, -4
1844:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 1999              		.loc 1 1844 0
 2000 086e 0D46     		mov	r5, r1
1847:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2001              		.loc 1 1847 0
 2002 0870 10B9     		cbnz	r0, .L235
1847:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2003              		.loc 1 1847 0 is_stmt 0 discriminator 1
 2004 0872 FFF7FEFF 		bl	ulPortSetInterruptMask
 2005              	.LVL200:
 2006              	.L236:
 2007 0876 FEE7     		b	.L236
 2008              	.LVL201:
 2009              	.L235:
1855:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2010              		.loc 1 1855 0 is_stmt 1
 2011 0878 0C4C     		ldr	r4, .L238
 2012 087a 2168     		ldr	r1, [r4, #0]
 2013              	.LVL202:
 2014 087c 1831     		adds	r1, r1, #24
 2015 087e FFF7FEFF 		bl	vListInsert
 2016              	.LVL203:
1860:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 2017              		.loc 1 1860 0
 2018 0882 2068     		ldr	r0, [r4, #0]
 2019 0884 0430     		adds	r0, r0, #4
 2020 0886 FFF7FEFF 		bl	uxListRemove
 2021              	.LVL204:
1869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2022              		.loc 1 1869 0
 2023 088a 6A1C     		adds	r2, r5, #1
 2024 088c 07D1     		bne	.L237
1874:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2025              		.loc 1 1874 0
 2026 088e 2046     		mov	r0, r4
 2027 0890 50F8C81B 		ldr	r1, [r0], #200
 2028 0894 0431     		adds	r1, r1, #4
1892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 2029              		.loc 1 1892 0
 2030 0896 BDE83840 		pop	{r3, r4, r5, lr}
1874:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2031              		.loc 1 1874 0
 2032 089a FFF7FEBF 		b	vListInsertEnd
 2033              	.LVL205:
 2034              	.L237:
1880:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2035              		.loc 1 1880 0
 2036 089e 6068     		ldr	r0, [r4, #4]
 2037              	.LVL206:
1881:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2038              		.loc 1 1881 0
 2039 08a0 2818     		adds	r0, r5, r0
 2040              	.LVL207:
1892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 2041              		.loc 1 1892 0
 2042 08a2 BDE83840 		pop	{r3, r4, r5, lr}
1881:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2043              		.loc 1 1881 0
 2044 08a6 FFF7ABBB 		b	prvAddCurrentTaskToDelayedList
 2045              	.LVL208:
 2046              	.L239:
 2047 08aa 00BF     		.align	2
 2048              	.L238:
 2049 08ac 00000000 		.word	.LANCHOR0
 2050              		.cfi_endproc
 2051              	.LFE19:
 2053              		.align	1
 2054              		.global	vTaskPlaceOnEventListRestricted
 2055              		.thumb
 2056              		.thumb_func
 2058              	vTaskPlaceOnEventListRestricted:
 2059              	.LFB20:
1898:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2060              		.loc 1 1898 0
 2061              		.cfi_startproc
 2062              		@ args = 0, pretend = 0, frame = 0
 2063              		@ frame_needed = 0, uses_anonymous_args = 0
 2064              	.LVL209:
 2065 08b0 38B5     		push	{r3, r4, r5, lr}
 2066              	.LCFI21:
 2067              		.cfi_def_cfa_offset 16
 2068              		.cfi_offset 3, -16
 2069              		.cfi_offset 4, -12
 2070              		.cfi_offset 5, -8
 2071              		.cfi_offset 14, -4
1898:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2072              		.loc 1 1898 0
 2073 08b2 0D46     		mov	r5, r1
1901:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 2074              		.loc 1 1901 0
 2075 08b4 10B9     		cbnz	r0, .L241
1901:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 2076              		.loc 1 1901 0 is_stmt 0 discriminator 1
 2077 08b6 FFF7FEFF 		bl	ulPortSetInterruptMask
 2078              	.LVL210:
 2079              	.L242:
 2080 08ba FEE7     		b	.L242
 2081              	.LVL211:
 2082              	.L241:
1913:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2083              		.loc 1 1913 0 is_stmt 1
 2084 08bc 074C     		ldr	r4, .L243
 2085 08be 2168     		ldr	r1, [r4, #0]
 2086              	.LVL212:
 2087 08c0 1831     		adds	r1, r1, #24
 2088 08c2 FFF7FEFF 		bl	vListInsertEnd
 2089              	.LVL213:
1918:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
 2090              		.loc 1 1918 0
 2091 08c6 2068     		ldr	r0, [r4, #0]
 2092 08c8 0430     		adds	r0, r0, #4
 2093 08ca FFF7FEFF 		bl	uxListRemove
 2094              	.LVL214:
1927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
 2095              		.loc 1 1927 0
 2096 08ce 6068     		ldr	r0, [r4, #4]
 2097              	.LVL215:
1930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
 2098              		.loc 1 1930 0
 2099 08d0 2818     		adds	r0, r5, r0
 2100              	.LVL216:
1931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 2101              		.loc 1 1931 0
 2102 08d2 BDE83840 		pop	{r3, r4, r5, lr}
1930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
 2103              		.loc 1 1930 0
 2104 08d6 FFF793BB 		b	prvAddCurrentTaskToDelayedList
 2105              	.LVL217:
 2106              	.L244:
 2107 08da 00BF     		.align	2
 2108              	.L243:
 2109 08dc 00000000 		.word	.LANCHOR0
 2110              		.cfi_endproc
 2111              	.LFE20:
 2113              		.align	1
 2114              		.global	xTaskRemoveFromEventList
 2115              		.thumb
 2116              		.thumb_func
 2118              	xTaskRemoveFromEventList:
 2119              	.LFB21:
1937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2120              		.loc 1 1937 0
 2121              		.cfi_startproc
 2122              		@ args = 0, pretend = 0, frame = 0
 2123              		@ frame_needed = 0, uses_anonymous_args = 0
 2124              	.LVL218:
1954:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2125              		.loc 1 1954 0
 2126 08e0 C368     		ldr	r3, [r0, #12]
1937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2127              		.loc 1 1937 0
 2128 08e2 70B5     		push	{r4, r5, r6, lr}
 2129              	.LCFI22:
 2130              		.cfi_def_cfa_offset 16
 2131              		.cfi_offset 4, -16
 2132              		.cfi_offset 5, -12
 2133              		.cfi_offset 6, -8
 2134              		.cfi_offset 14, -4
1954:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2135              		.loc 1 1954 0
 2136 08e4 DC68     		ldr	r4, [r3, #12]
 2137              	.LVL219:
1955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2138              		.loc 1 1955 0
 2139 08e6 14B9     		cbnz	r4, .L246
1955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2140              		.loc 1 1955 0 is_stmt 0 discriminator 1
 2141 08e8 FFF7FEFF 		bl	ulPortSetInterruptMask
 2142              	.LVL220:
 2143              	.L247:
 2144 08ec FEE7     		b	.L247
 2145              	.LVL221:
 2146              	.L246:
1956:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2147              		.loc 1 1956 0 is_stmt 1
 2148 08ee 04F11806 		add	r6, r4, #24
1958:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2149              		.loc 1 1958 0
 2150 08f2 124D     		ldr	r5, .L252
1956:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2151              		.loc 1 1956 0
 2152 08f4 3046     		mov	r0, r6
 2153              	.LVL222:
 2154 08f6 FFF7FEFF 		bl	uxListRemove
 2155              	.LVL223:
1958:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2156              		.loc 1 1958 0
 2157 08fa D5F8F030 		ldr	r3, [r5, #240]
 2158 08fe 7BB9     		cbnz	r3, .L248
1960:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2159              		.loc 1 1960 0
 2160 0900 261D     		adds	r6, r4, #4
 2161 0902 3046     		mov	r0, r6
 2162 0904 FFF7FEFF 		bl	uxListRemove
 2163              	.LVL224:
1961:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 2164              		.loc 1 1961 0
 2165 0908 E36A     		ldr	r3, [r4, #44]
 2166 090a D5F8E820 		ldr	r2, [r5, #232]
 2167 090e 9342     		cmp	r3, r2
 2168 0910 0B4A     		ldr	r2, .L252+4
 2169 0912 88BF     		it	hi
 2170 0914 C5F8E830 		strhi	r3, [r5, #232]
 2171 0918 1420     		movs	r0, #20
 2172 091a 00FB0320 		mla	r0, r0, r3, r2
 2173 091e 01E0     		b	.L251
 2174              	.L248:
1967:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2175              		.loc 1 1967 0
 2176 0920 05F1A000 		add	r0, r5, #160
 2177              	.L251:
 2178 0924 3146     		mov	r1, r6
 2179 0926 FFF7FEFF 		bl	vListInsertEnd
 2180              	.LVL225:
1970:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2181              		.loc 1 1970 0
 2182 092a 044B     		ldr	r3, .L252
 2183 092c E06A     		ldr	r0, [r4, #44]
 2184 092e 1B68     		ldr	r3, [r3, #0]
 2185              	.LVL226:
 2186 0930 DB6A     		ldr	r3, [r3, #44]
 2187              	.LVL227:
1984:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 2188              		.loc 1 1984 0
 2189 0932 9842     		cmp	r0, r3
 2190 0934 34BF     		ite	cc
 2191 0936 0020     		movcc	r0, #0
 2192              	.LVL228:
 2193 0938 0120     		movcs	r0, #1
 2194 093a 70BD     		pop	{r4, r5, r6, pc}
 2195              	.L253:
 2196              		.align	2
 2197              	.L252:
 2198 093c 00000000 		.word	.LANCHOR0
 2199 0940 14000000 		.word	.LANCHOR0+20
 2200              		.cfi_endproc
 2201              	.LFE21:
 2203              		.align	1
 2204              		.global	vTaskSetTimeOutState
 2205              		.thumb
 2206              		.thumb_func
 2208              	vTaskSetTimeOutState:
 2209              	.LFB22:
1988:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2210              		.loc 1 1988 0
 2211              		.cfi_startproc
 2212              		@ args = 0, pretend = 0, frame = 0
 2213              		@ frame_needed = 0, uses_anonymous_args = 0
 2214              	.LVL229:
 2215 0944 08B5     		push	{r3, lr}
 2216              	.LCFI23:
 2217              		.cfi_def_cfa_offset 8
 2218              		.cfi_offset 3, -8
 2219              		.cfi_offset 14, -4
1989:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 2220              		.loc 1 1989 0
 2221 0946 10B9     		cbnz	r0, .L255
1989:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 2222              		.loc 1 1989 0 is_stmt 0 discriminator 1
 2223 0948 FFF7FEFF 		bl	ulPortSetInterruptMask
 2224              	.LVL230:
 2225              	.L256:
 2226 094c FEE7     		b	.L256
 2227              	.LVL231:
 2228              	.L255:
1990:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2229              		.loc 1 1990 0 is_stmt 1
 2230 094e 034B     		ldr	r3, .L257
 2231 0950 D3F8F420 		ldr	r2, [r3, #244]
1991:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2232              		.loc 1 1991 0
 2233 0954 5B68     		ldr	r3, [r3, #4]
 2234 0956 80E80C00 		stmia	r0, {r2, r3}
 2235 095a 08BD     		pop	{r3, pc}
 2236              	.L258:
 2237              		.align	2
 2238              	.L257:
 2239 095c 00000000 		.word	.LANCHOR0
 2240              		.cfi_endproc
 2241              	.LFE22:
 2243              		.align	1
 2244              		.global	xTaskCheckForTimeOut
 2245              		.thumb
 2246              		.thumb_func
 2248              	xTaskCheckForTimeOut:
 2249              	.LFB23:
1996:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2250              		.loc 1 1996 0
 2251              		.cfi_startproc
 2252              		@ args = 0, pretend = 0, frame = 0
 2253              		@ frame_needed = 0, uses_anonymous_args = 0
 2254              	.LVL232:
 2255 0960 38B5     		push	{r3, r4, r5, lr}
 2256              	.LCFI24:
 2257              		.cfi_def_cfa_offset 16
 2258              		.cfi_offset 3, -16
 2259              		.cfi_offset 4, -12
 2260              		.cfi_offset 5, -8
 2261              		.cfi_offset 14, -4
1996:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2262              		.loc 1 1996 0
 2263 0962 0D46     		mov	r5, r1
1999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 2264              		.loc 1 1999 0
 2265 0964 0446     		mov	r4, r0
 2266 0966 10B9     		cbnz	r0, .L260
1999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 2267              		.loc 1 1999 0 is_stmt 0 discriminator 1
 2268 0968 FFF7FEFF 		bl	ulPortSetInterruptMask
 2269              	.LVL233:
 2270              	.L261:
 2271 096c FEE7     		b	.L261
 2272              	.LVL234:
 2273              	.L260:
2000:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 2274              		.loc 1 2000 0 is_stmt 1
 2275 096e 11B9     		cbnz	r1, .L262
2000:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 2276              		.loc 1 2000 0 is_stmt 0 discriminator 1
 2277 0970 FFF7FEFF 		bl	ulPortSetInterruptMask
 2278              	.LVL235:
 2279              	.L263:
 2280 0974 FEE7     		b	.L263
 2281              	.LVL236:
 2282              	.L262:
2002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2283              		.loc 1 2002 0 is_stmt 1
 2284 0976 FFF7FEFF 		bl	vPortEnterCritical
 2285              	.LVL237:
2008:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2286              		.loc 1 2008 0
 2287 097a 2B68     		ldr	r3, [r5, #0]
 2288 097c 591C     		adds	r1, r3, #1
 2289 097e 17D0     		beq	.L266
2015:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2290              		.loc 1 2015 0
 2291 0980 0F4A     		ldr	r2, .L269
 2292 0982 2168     		ldr	r1, [r4, #0]
 2293 0984 D2F8F400 		ldr	r0, [r2, #244]
 2294 0988 8842     		cmp	r0, r1
 2295 098a 1146     		mov	r1, r2
 2296 098c 03D0     		beq	.L265
2015:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2297              		.loc 1 2015 0 is_stmt 0 discriminator 1
 2298 098e 5068     		ldr	r0, [r2, #4]
 2299 0990 6268     		ldr	r2, [r4, #4]
 2300 0992 9042     		cmp	r0, r2
 2301 0994 0ED2     		bcs	.L268
 2302              	.L265:
2023:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
 2303              		.loc 1 2023 0 is_stmt 1
 2304 0996 4968     		ldr	r1, [r1, #4]
 2305 0998 6268     		ldr	r2, [r4, #4]
 2306 099a 891A     		subs	r1, r1, r2
 2307 099c 9942     		cmp	r1, r3
 2308 099e 09D2     		bcs	.L268
2026:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 2309              		.loc 1 2026 0
 2310 09a0 0749     		ldr	r1, .L269
2027:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2311              		.loc 1 2027 0
 2312 09a2 2046     		mov	r0, r4
2026:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 2313              		.loc 1 2026 0
 2314 09a4 4968     		ldr	r1, [r1, #4]
 2315 09a6 521A     		subs	r2, r2, r1
 2316 09a8 D318     		adds	r3, r2, r3
 2317 09aa 2B60     		str	r3, [r5, #0]
2027:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2318              		.loc 1 2027 0
 2319 09ac FFF7FEFF 		bl	vTaskSetTimeOutState
 2320              	.LVL238:
 2321              	.L266:
2010:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 2322              		.loc 1 2010 0
 2323 09b0 0024     		movs	r4, #0
 2324              	.LVL239:
 2325 09b2 00E0     		b	.L264
 2326              	.LVL240:
 2327              	.L268:
2021:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2328              		.loc 1 2021 0
 2329 09b4 0124     		movs	r4, #1
 2330              	.LVL241:
 2331              	.L264:
2035:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2332              		.loc 1 2035 0
 2333 09b6 FFF7FEFF 		bl	vPortExitCritical
 2334              	.LVL242:
2038:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** }
 2335              		.loc 1 2038 0
 2336 09ba 2046     		mov	r0, r4
 2337 09bc 38BD     		pop	{r3, r4, r5, pc}
 2338              	.L270:
 2339 09be 00BF     		.align	2
 2340              	.L269:
 2341 09c0 00000000 		.word	.LANCHOR0
 2342              		.cfi_endproc
 2343              	.LFE23:
 2345              		.align	1
 2346              		.global	vTaskMissedYield
 2347              		.thumb
 2348              		.thumb_func
 2350              	vTaskMissedYield:
 2351              	.LFB24:
2042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** {
 2352              		.loc 1 2042 0
 2353              		.cfi_startproc
 2354              		@ args = 0, pretend = 0, frame = 0
 2355              		@ frame_needed = 0, uses_anonymous_args = 0
 2356              		@ link register save eliminated.
2043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xMissedYield = pdTRUE;
 2357              		.loc 1 2043 0
 2358 09c4 024B     		ldr	r3, .L272
 2359 09c6 0122     		movs	r2, #1
 2360 09c8 C3F8FC20 		str	r2, [r3, #252]
 2361 09cc 7047     		bx	lr
 2362              	.L273:
 2363 09ce 00BF     		.align	2
 2364              	.L272:
 2365 09d0 00000000 		.word	.LANCHOR0
 2366              		.cfi_endproc
 2367              	.LFE24:
 2369              		.align	1
 2370              		.global	xTaskGetCurrentTaskHandle
 2371              		.thumb
 2372              		.thumb_func
 2374              	xTaskGetCurrentTaskHandle:
 2375              	.LFB32:
2600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
2601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
2603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
2606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2376              		.loc 1 2608 0
 2377              		.cfi_startproc
 2378              		@ args = 0, pretend = 0, frame = 0
 2379              		@ frame_needed = 0, uses_anonymous_args = 0
 2380              		@ link register save eliminated.
2609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	xTaskHandle xReturn;
2610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
2612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
2613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
2614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 2381              		.loc 1 2614 0
 2382 09d4 014B     		ldr	r3, .L275
 2383 09d6 1868     		ldr	r0, [r3, #0]
 2384              	.LVL243:
2615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
2617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 2385              		.loc 1 2617 0
 2386 09d8 7047     		bx	lr
 2387              	.L276:
 2388 09da 00BF     		.align	2
 2389              	.L275:
 2390 09dc 00000000 		.word	.LANCHOR0
 2391              		.cfi_endproc
 2392              	.LFE32:
 2394              		.align	1
 2395              		.global	xTaskGetSchedulerState
 2396              		.thumb
 2397              		.thumb_func
 2399              	xTaskGetSchedulerState:
 2400              	.LFB33:
2618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
2620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
2623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2401              		.loc 1 2625 0
 2402              		.cfi_startproc
 2403              		@ args = 0, pretend = 0, frame = 0
 2404              		@ frame_needed = 0, uses_anonymous_args = 0
 2405              		@ link register save eliminated.
2626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
2627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 2406              		.loc 1 2628 0
 2407 09e0 054B     		ldr	r3, .L281
 2408 09e2 D3F8DC00 		ldr	r0, [r3, #220]
 2409 09e6 28B1     		cbz	r0, .L278
2629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
2631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		else
2633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2410              		.loc 1 2634 0
 2411 09e8 D3F8F000 		ldr	r0, [r3, #240]
2635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 2412              		.loc 1 2636 0
 2413 09ec 0028     		cmp	r0, #0
 2414 09ee 14BF     		ite	ne
 2415 09f0 0220     		movne	r0, #2
 2416 09f2 0120     		moveq	r0, #1
 2417              	.L278:
 2418              	.LVL244:
2637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			else
2639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
2641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		return xReturn;
2645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 2419              		.loc 1 2645 0
 2420 09f4 7047     		bx	lr
 2421              	.L282:
 2422 09f6 00BF     		.align	2
 2423              	.L281:
 2424 09f8 00000000 		.word	.LANCHOR0
 2425              		.cfi_endproc
 2426              	.LFE33:
 2428              		.align	1
 2429              		.global	vTaskPriorityInherit
 2430              		.thumb
 2431              		.thumb_func
 2433              	vTaskPriorityInherit:
 2434              	.LFB34:
2646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
2648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
2653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2435              		.loc 1 2653 0
 2436              		.cfi_startproc
 2437              		@ args = 0, pretend = 0, frame = 0
 2438              		@ frame_needed = 0, uses_anonymous_args = 0
 2439              	.LVL245:
 2440 09fc 70B5     		push	{r4, r5, r6, lr}
 2441              	.LCFI25:
 2442              		.cfi_def_cfa_offset 16
 2443              		.cfi_offset 4, -16
 2444              		.cfi_offset 5, -12
 2445              		.cfi_offset 6, -8
 2446              		.cfi_offset 14, -4
2654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
2655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
2657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
2658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 2447              		.loc 1 2658 0
 2448 09fe 0446     		mov	r4, r0
 2449 0a00 0028     		cmp	r0, #0
 2450 0a02 2BD0     		beq	.L283
2659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 2451              		.loc 1 2660 0
 2452 0a04 164D     		ldr	r5, .L290
 2453 0a06 C26A     		ldr	r2, [r0, #44]
 2454 0a08 2B68     		ldr	r3, [r5, #0]
 2455 0a0a DB6A     		ldr	r3, [r3, #44]
 2456 0a0c 9A42     		cmp	r2, r3
 2457 0a0e 25D2     		bcs	.L283
2661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new priority. */
2663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 2458              		.loc 1 2663 0
 2459 0a10 2B46     		mov	r3, r5
 2460 0a12 53F8141B 		ldr	r1, [r3], #20
 2461 0a16 C96A     		ldr	r1, [r1, #44]
 2462 0a18 C1F10501 		rsb	r1, r1, #5
 2463 0a1c 8161     		str	r1, [r0, #24]
2664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need to
2666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				be moved into a new list. */
2667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 2464              		.loc 1 2667 0
 2465 0a1e 1421     		movs	r1, #20
 2466 0a20 01FB0233 		mla	r3, r1, r2, r3
 2467 0a24 4169     		ldr	r1, [r0, #20]
 2468 0a26 9942     		cmp	r1, r3
 2469 0a28 15D1     		bne	.L285
2668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 2470              		.loc 1 2669 0
 2471 0a2a 061D     		adds	r6, r0, #4
 2472 0a2c 3046     		mov	r0, r6
 2473              	.LVL246:
 2474 0a2e FFF7FEFF 		bl	uxListRemove
 2475              	.LVL247:
2670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					{
2671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					}
2673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
2675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2476              		.loc 1 2675 0
 2477 0a32 2B68     		ldr	r3, [r5, #0]
2676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 2478              		.loc 1 2676 0
 2479 0a34 D5F8E820 		ldr	r2, [r5, #232]
2675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2480              		.loc 1 2675 0
 2481 0a38 DB6A     		ldr	r3, [r3, #44]
 2482              		.loc 1 2676 0
 2483 0a3a 3146     		mov	r1, r6
 2484 0a3c 9342     		cmp	r3, r2
 2485 0a3e 094A     		ldr	r2, .L290+4
 2486 0a40 88BF     		it	hi
 2487 0a42 C5F8E830 		strhi	r3, [r5, #232]
 2488 0a46 1420     		movs	r0, #20
 2489 0a48 00FB0320 		mla	r0, r0, r3, r2
2675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2490              		.loc 1 2675 0
 2491 0a4c E362     		str	r3, [r4, #44]
2677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				else
2679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
2681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
2682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
2685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 2492              		.loc 1 2687 0
 2493 0a4e BDE87040 		pop	{r4, r5, r6, lr}
2676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 2494              		.loc 1 2676 0
 2495 0a52 FFF7FEBF 		b	vListInsertEnd
 2496              	.LVL248:
 2497              	.L285:
2681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 2498              		.loc 1 2681 0
 2499 0a56 2B68     		ldr	r3, [r5, #0]
 2500 0a58 DB6A     		ldr	r3, [r3, #44]
 2501 0a5a C362     		str	r3, [r0, #44]
 2502              	.L283:
 2503 0a5c 70BD     		pop	{r4, r5, r6, pc}
 2504              	.L291:
 2505 0a5e 00BF     		.align	2
 2506              	.L290:
 2507 0a60 00000000 		.word	.LANCHOR0
 2508 0a64 14000000 		.word	.LANCHOR0+20
 2509              		.cfi_endproc
 2510              	.LFE34:
 2512              		.align	1
 2513              		.global	vTaskPriorityDisinherit
 2514              		.thumb
 2515              		.thumb_func
 2517              	vTaskPriorityDisinherit:
 2518              	.LFB35:
2688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
2690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
2695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	{
 2519              		.loc 1 2695 0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
 2523              	.LVL249:
 2524 0a68 38B5     		push	{r3, r4, r5, lr}
 2525              	.LCFI26:
 2526              		.cfi_def_cfa_offset 16
 2527              		.cfi_offset 3, -16
 2528              		.cfi_offset 4, -12
 2529              		.cfi_offset 5, -8
 2530              		.cfi_offset 14, -4
2696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
2697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 2531              		.loc 1 2698 0
 2532 0a6a 0446     		mov	r4, r0
 2533 0a6c E0B1     		cbz	r0, .L292
2699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		{
2700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 2534              		.loc 1 2700 0
 2535 0a6e C26A     		ldr	r2, [r0, #44]
 2536 0a70 036C     		ldr	r3, [r0, #64]
 2537 0a72 9A42     		cmp	r2, r3
 2538 0a74 18D0     		beq	.L292
2701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			{
2702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
 2539              		.loc 1 2704 0
 2540 0a76 051D     		adds	r5, r0, #4
 2541 0a78 2846     		mov	r0, r5
 2542              	.LVL250:
 2543 0a7a FFF7FEFF 		bl	uxListRemove
 2544              	.LVL251:
2705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				{
2706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				}
2708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 
2709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				/* Disinherit the priority before adding the task into the new
2710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				ready list. */
2711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
2712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 2545              		.loc 1 2712 0
 2546 0a7e 236C     		ldr	r3, [r4, #64]
2713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 2547              		.loc 1 2713 0
 2548 0a80 C3F10502 		rsb	r2, r3, #5
 2549 0a84 A261     		str	r2, [r4, #24]
2714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 2550              		.loc 1 2714 0
 2551 0a86 094A     		ldr	r2, .L298
2712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 2552              		.loc 1 2712 0
 2553 0a88 E362     		str	r3, [r4, #44]
 2554              		.loc 1 2714 0
 2555 0a8a D2F8E810 		ldr	r1, [r2, #232]
 2556 0a8e 8B42     		cmp	r3, r1
 2557 0a90 88BF     		it	hi
 2558 0a92 C2F8E830 		strhi	r3, [r2, #232]
 2559 0a96 064A     		ldr	r2, .L298+4
 2560 0a98 1420     		movs	r0, #20
 2561 0a9a 00FB0320 		mla	r0, r0, r3, r2
 2562 0a9e 2946     		mov	r1, r5
2715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 			}
2716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 		}
2717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 	}
 2563              		.loc 1 2717 0
 2564 0aa0 BDE83840 		pop	{r3, r4, r5, lr}
2714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 2565              		.loc 1 2714 0
 2566 0aa4 FFF7FEBF 		b	vListInsertEnd
 2567              	.LVL252:
 2568              	.L292:
 2569 0aa8 38BD     		pop	{r3, r4, r5, pc}
 2570              	.L299:
 2571 0aaa 00BF     		.align	2
 2572              	.L298:
 2573 0aac 00000000 		.word	.LANCHOR0
 2574 0ab0 14000000 		.word	.LANCHOR0+20
 2575              		.cfi_endproc
 2576              	.LFE35:
 2578              		.global	pxCurrentTCB
 2579              		.section	.rodata
 2580              		.set	.LANCHOR2,. + 0
 2583              	ucExpectedStackBytes.5909:
 2584 0000 A5       		.byte	-91
 2585 0001 A5       		.byte	-91
 2586 0002 A5       		.byte	-91
 2587 0003 A5       		.byte	-91
 2588 0004 A5       		.byte	-91
 2589 0005 A5       		.byte	-91
 2590 0006 A5       		.byte	-91
 2591 0007 A5       		.byte	-91
 2592 0008 A5       		.byte	-91
 2593 0009 A5       		.byte	-91
 2594 000a A5       		.byte	-91
 2595 000b A5       		.byte	-91
 2596 000c A5       		.byte	-91
 2597 000d A5       		.byte	-91
 2598 000e A5       		.byte	-91
 2599 000f A5       		.byte	-91
 2600 0010 A5       		.byte	-91
 2601 0011 A5       		.byte	-91
 2602 0012 A5       		.byte	-91
 2603 0013 A5       		.byte	-91
 2604              		.section	.rodata.str1.1,"aMS",%progbits,1
 2605              	.LC0:
 2606 0000 49444C45 		.ascii	"IDLE\000"
 2606      00
 2607              		.data
 2608              		.align	2
 2609              		.set	.LANCHOR1,. + 0
 2612              	xNextTaskUnblockTime:
 2613 0000 FFFFFFFF 		.word	-1
 2614              		.bss
 2615              		.align	2
 2616              		.set	.LANCHOR0,. + 0
 2619              	pxCurrentTCB:
 2620 0000 00000000 		.space	4
 2623              	xTickCount:
 2624 0004 00000000 		.space	4
 2627              	pxOverflowDelayedTaskList:
 2628 0008 00000000 		.space	4
 2631              	pxDelayedTaskList:
 2632 000c 00000000 		.space	4
 2635              	uxCurrentNumberOfTasks:
 2636 0010 00000000 		.space	4
 2639              	pxReadyTasksLists:
 2640 0014 00000000 		.space	100
 2640      00000000 
 2640      00000000 
 2640      00000000 
 2640      00000000 
 2643              	xDelayedTaskList1:
 2644 0078 00000000 		.space	20
 2644      00000000 
 2644      00000000 
 2644      00000000 
 2644      00000000 
 2647              	xDelayedTaskList2:
 2648 008c 00000000 		.space	20
 2648      00000000 
 2648      00000000 
 2648      00000000 
 2648      00000000 
 2651              	xPendingReadyList:
 2652 00a0 00000000 		.space	20
 2652      00000000 
 2652      00000000 
 2652      00000000 
 2652      00000000 
 2655              	xTasksWaitingTermination:
 2656 00b4 00000000 		.space	20
 2656      00000000 
 2656      00000000 
 2656      00000000 
 2656      00000000 
 2659              	xSuspendedTaskList:
 2660 00c8 00000000 		.space	20
 2660      00000000 
 2660      00000000 
 2660      00000000 
 2660      00000000 
 2663              	xSchedulerRunning:
 2664 00dc 00000000 		.space	4
 2667              	uxTopUsedPriority:
 2668 00e0 00000000 		.space	4
 2671              	uxTaskNumber:
 2672 00e4 00000000 		.space	4
 2675              	uxTopReadyPriority:
 2676 00e8 00000000 		.space	4
 2679              	uxTasksDeleted:
 2680 00ec 00000000 		.space	4
 2683              	uxSchedulerSuspended:
 2684 00f0 00000000 		.space	4
 2687              	xNumOfOverflows:
 2688 00f4 00000000 		.space	4
 2691              	uxMissedTicks:
 2692 00f8 00000000 		.space	4
 2695              	xMissedYield:
 2696 00fc 00000000 		.space	4
 2697              		.text
 2698              	.Letext0:
 2699              		.file 2 "/opt/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2
 2700              		.file 3 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/projdefs.h"
 2701              		.file 4 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/portable/GCC/ARM_CM4F/p
 2702              		.file 5 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/list.h"
 2703              		.file 6 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/task.h"
 2704              		.file 7 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/portable.h"
 2705              		.file 8 "/opt/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2
 2706              		.file 9 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/timers.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/cca553fB.s:18     .text:00000000 $t
     /tmp/cca553fB.s:22     .text:00000000 prvAddCurrentTaskToDelayedList
     /tmp/cca553fB.s:85     .text:00000034 $d
     /tmp/cca553fB.s:90     .text:0000003c $t
     /tmp/cca553fB.s:95     .text:0000003c xTaskGenericCreate
     /tmp/cca553fB.s:408    .text:000001c0 $d
     /tmp/cca553fB.s:412    .text:000001c4 $t
     /tmp/cca553fB.s:417    .text:000001c4 vTaskDelete
     /tmp/cca553fB.s:498    .text:00000228 $d
     /tmp/cca553fB.s:502    .text:0000022c $t
     /tmp/cca553fB.s:507    .text:0000022c uxTaskPriorityGet
     /tmp/cca553fB.s:543    .text:00000244 $d
     /tmp/cca553fB.s:547    .text:00000248 $t
     /tmp/cca553fB.s:552    .text:00000248 vTaskPrioritySet
     /tmp/cca553fB.s:680    .text:000002e0 $d
     /tmp/cca553fB.s:684    .text:000002e4 $t
     /tmp/cca553fB.s:689    .text:000002e4 xTaskIsTaskSuspended
     /tmp/cca553fB.s:741    .text:00000310 $d
     /tmp/cca553fB.s:745    .text:00000314 $t
     /tmp/cca553fB.s:750    .text:00000314 vTaskResume
     /tmp/cca553fB.s:826    .text:00000378 $d
     /tmp/cca553fB.s:830    .text:0000037c $t
     /tmp/cca553fB.s:835    .text:0000037c xTaskResumeFromISR
     /tmp/cca553fB.s:926    .text:000003f0 $d
     /tmp/cca553fB.s:931    .text:000003f8 $t
     /tmp/cca553fB.s:936    .text:000003f8 vTaskStartScheduler
     /tmp/cca553fB.s:1011   .text:00000448 $d
     /tmp/cca553fB.s:1492   .text:0000065c prvIdleTask
     /tmp/cca553fB.s:1017   .text:00000454 $t
     /tmp/cca553fB.s:1022   .text:00000454 vTaskEndScheduler
     /tmp/cca553fB.s:1048   .text:0000046c $d
     /tmp/cca553fB.s:1052   .text:00000470 $t
     /tmp/cca553fB.s:1057   .text:00000470 vTaskSuspendAll
     /tmp/cca553fB.s:1073   .text:00000480 $d
     /tmp/cca553fB.s:1077   .text:00000484 $t
     /tmp/cca553fB.s:1082   .text:00000484 xTaskGetTickCount
     /tmp/cca553fB.s:1109   .text:00000498 $d
     /tmp/cca553fB.s:1113   .text:0000049c $t
     /tmp/cca553fB.s:1118   .text:0000049c xTaskGetTickCountFromISR
     /tmp/cca553fB.s:1145   .text:000004b0 $d
     /tmp/cca553fB.s:1149   .text:000004b4 $t
     /tmp/cca553fB.s:1154   .text:000004b4 uxTaskGetNumberOfTasks
     /tmp/cca553fB.s:1169   .text:000004bc $d
     /tmp/cca553fB.s:1173   .text:000004c0 $t
     /tmp/cca553fB.s:1178   .text:000004c0 vTaskIncrementTick
     /tmp/cca553fB.s:1324   .text:00000588 $d
     /tmp/cca553fB.s:1329   .text:00000590 $t
     /tmp/cca553fB.s:1334   .text:00000590 xTaskResumeAll
     /tmp/cca553fB.s:1484   .text:00000658 $d
     /tmp/cca553fB.s:1488   .text:0000065c $t
     /tmp/cca553fB.s:1585   .text:000006b8 $d
     /tmp/cca553fB.s:1589   .text:000006bc $t
     /tmp/cca553fB.s:1594   .text:000006bc vTaskDelay
     /tmp/cca553fB.s:1647   .text:000006ec $d
     /tmp/cca553fB.s:1651   .text:000006f0 $t
     /tmp/cca553fB.s:1656   .text:000006f0 vTaskDelayUntil
     /tmp/cca553fB.s:1762   .text:00000758 $d
     /tmp/cca553fB.s:1766   .text:0000075c $t
     /tmp/cca553fB.s:1771   .text:0000075c vTaskSwitchContext
     /tmp/cca553fB.s:1876   .text:000007f8 $d
     /tmp/cca553fB.s:1882   .text:00000800 $t
     /tmp/cca553fB.s:1887   .text:00000800 vTaskSuspend
     /tmp/cca553fB.s:1976   .text:00000868 $d
     /tmp/cca553fB.s:1980   .text:0000086c $t
     /tmp/cca553fB.s:1985   .text:0000086c vTaskPlaceOnEventList
     /tmp/cca553fB.s:2049   .text:000008ac $d
     /tmp/cca553fB.s:2053   .text:000008b0 $t
     /tmp/cca553fB.s:2058   .text:000008b0 vTaskPlaceOnEventListRestricted
     /tmp/cca553fB.s:2109   .text:000008dc $d
     /tmp/cca553fB.s:2113   .text:000008e0 $t
     /tmp/cca553fB.s:2118   .text:000008e0 xTaskRemoveFromEventList
     /tmp/cca553fB.s:2198   .text:0000093c $d
     /tmp/cca553fB.s:2203   .text:00000944 $t
     /tmp/cca553fB.s:2208   .text:00000944 vTaskSetTimeOutState
     /tmp/cca553fB.s:2239   .text:0000095c $d
     /tmp/cca553fB.s:2243   .text:00000960 $t
     /tmp/cca553fB.s:2248   .text:00000960 xTaskCheckForTimeOut
     /tmp/cca553fB.s:2341   .text:000009c0 $d
     /tmp/cca553fB.s:2345   .text:000009c4 $t
     /tmp/cca553fB.s:2350   .text:000009c4 vTaskMissedYield
     /tmp/cca553fB.s:2365   .text:000009d0 $d
     /tmp/cca553fB.s:2369   .text:000009d4 $t
     /tmp/cca553fB.s:2374   .text:000009d4 xTaskGetCurrentTaskHandle
     /tmp/cca553fB.s:2390   .text:000009dc $d
     /tmp/cca553fB.s:2394   .text:000009e0 $t
     /tmp/cca553fB.s:2399   .text:000009e0 xTaskGetSchedulerState
     /tmp/cca553fB.s:2424   .text:000009f8 $d
     /tmp/cca553fB.s:2428   .text:000009fc $t
     /tmp/cca553fB.s:2433   .text:000009fc vTaskPriorityInherit
     /tmp/cca553fB.s:2507   .text:00000a60 $d
     /tmp/cca553fB.s:2512   .text:00000a68 $t
     /tmp/cca553fB.s:2517   .text:00000a68 vTaskPriorityDisinherit
     /tmp/cca553fB.s:2573   .text:00000aac $d
     /tmp/cca553fB.s:2619   .bss:00000000 pxCurrentTCB
     /tmp/cca553fB.s:2583   .rodata:00000000 ucExpectedStackBytes.5909
     /tmp/cca553fB.s:2608   .data:00000000 $d
     /tmp/cca553fB.s:2612   .data:00000000 xNextTaskUnblockTime
     /tmp/cca553fB.s:2615   .bss:00000000 $d
     /tmp/cca553fB.s:2623   .bss:00000004 xTickCount
     /tmp/cca553fB.s:2627   .bss:00000008 pxOverflowDelayedTaskList
     /tmp/cca553fB.s:2631   .bss:0000000c pxDelayedTaskList
     /tmp/cca553fB.s:2635   .bss:00000010 uxCurrentNumberOfTasks
     /tmp/cca553fB.s:2639   .bss:00000014 pxReadyTasksLists
     /tmp/cca553fB.s:2643   .bss:00000078 xDelayedTaskList1
     /tmp/cca553fB.s:2647   .bss:0000008c xDelayedTaskList2
     /tmp/cca553fB.s:2651   .bss:000000a0 xPendingReadyList
     /tmp/cca553fB.s:2655   .bss:000000b4 xTasksWaitingTermination
     /tmp/cca553fB.s:2659   .bss:000000c8 xSuspendedTaskList
     /tmp/cca553fB.s:2663   .bss:000000dc xSchedulerRunning
     /tmp/cca553fB.s:2667   .bss:000000e0 uxTopUsedPriority
     /tmp/cca553fB.s:2671   .bss:000000e4 uxTaskNumber
     /tmp/cca553fB.s:2675   .bss:000000e8 uxTopReadyPriority
     /tmp/cca553fB.s:2679   .bss:000000ec uxTasksDeleted
     /tmp/cca553fB.s:2683   .bss:000000f0 uxSchedulerSuspended
     /tmp/cca553fB.s:2687   .bss:000000f4 xNumOfOverflows
     /tmp/cca553fB.s:2691   .bss:000000f8 uxMissedTicks
     /tmp/cca553fB.s:2695   .bss:000000fc xMissedYield
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.4549fa27c92e72ea66ffdb0399fbe8da
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.cf962ebbec441b3ac67502735f0765db
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.f2bfdfeee9f340633702c07fad9b5e01
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.1f4bc553faa62c5c69dd9cb47f9f1417
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.58.3943707ca024393181a6211b2c8a1625
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.projdefs.h.76.214f319a5937dae232f0ee2912b07e1d
                           .group:00000000 wm4.FreeRTOSConfig.h.79.5ce50f1f04ae36d94916fa991aa4b8d7
                           .group:00000000 wm4.portmacro.h.77.0810e0eb8c6edf5adf0d27242484a945
                           .group:00000000 wm4.portable.h.332.e25bf3f97ebf50a0f90736144cb8c3f8
                           .group:00000000 wm4.mpu_wrappers.h.76.3abcfc7ebb6d78909ee0b4ad2f20f282
                           .group:00000000 wm4.FreeRTOS.h.159.741cbf33489b2c951994722716e9692e
                           .group:00000000 wm4.list.h.105.6a6307ce3396638a078c02ff83387dc6
                           .group:00000000 wm4.task.h.94.33ec4de8c3f825901c54e6cf58507761
                           .group:00000000 wm4.timers.h.94.1c877eceef25f06590ac289101b9a408
                           .group:00000000 wm4.StackMacros.h.76.05bafce1d9e236e19f8a340bdef6124f

UNDEFINED SYMBOLS
vListInsert
ulPortSetInterruptMask
pvPortMalloc
vPortFree
memset
strncpy
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInitialise
vListInsertEnd
vPortExitCritical
vPortYield
uxListRemove
vPortClearInterruptMask
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vApplicationIdleHook
vApplicationStackOverflowHook
memcmp
