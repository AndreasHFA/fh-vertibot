   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"queue.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	prvUnlockQueue:
  25              	.LFB12:
  26              		.file 1 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c"
   1:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
   2:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FreeRTOS V7.4.0 - Copyright (C) 2013 Real Time Engineers Ltd.
   3:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
   4:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
   5:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
   7:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
   8:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
   9:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
  10:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
  11:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    available.                                                         *
  12:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  13:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  14:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    ensuring you get running as quickly as possible and with an        *
  15:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  16:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  17:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    professional grade, cross platform, de facto standard solutions    *
  18:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    for microcontrollers - completely free of charge!                  *
  19:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  20:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  21:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  22:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  23:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  24:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
  25:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  26:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  27:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     This file is part of the FreeRTOS distribution.
  28:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  29:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  30:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  31:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  32:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  33:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
  34:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  35:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     provide the source code for proprietary components outside of the FreeRTOS
  36:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     kernel.
  37:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  38:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  39:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  40:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  41:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     details. You should have received a copy of the GNU General Public License
  42:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     and the FreeRTOS license exception along with FreeRTOS; if not itcan be
  43:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     viewed here: http://www.freertos.org/a00114.html and also obtained by
  44:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     writing to Real Time Engineers Ltd., contact details for whom are available
  45:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     on the FreeRTOS WEB site.
  46:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  47:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     1 tab == 4 spaces!
  48:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  49:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
  50:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  51:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  52:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    not run, what could be wrong?"                                     *
  53:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  54:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  55:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  56:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
  57:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  58:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  59:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
  60:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     license and Real Time Engineers Ltd. contact details.
  61:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  62:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  63:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, and our new
  64:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     fully thread aware and reentrant UDP/IP stack.
  65:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  66:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
  67:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     Integrity Systems, who sell the code with commercial support, 
  68:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     indemnification and middleware, under the OpenRTOS brand.
  69:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     
  70:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
  71:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and 
  72:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     mission critical applications that require provable dependability.
  73:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** */
  74:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  75:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  76:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include <string.h>
  77:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  78:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  79:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  80:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  81:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  82:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  83:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  84:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include "task.h"
  85:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include "queue.h"
  86:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  87:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  88:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  89:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif
  90:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  91:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  92:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  93:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and xTxLock structure members. */
  94:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( signed portBASE_TYPE ) -1 )
  95:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( signed portBASE_TYPE ) 0 )
  96:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  97:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueERRONEOUS_UNBLOCK			( -1 )
  98:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  99:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Effectively make a union out of the xQUEUE structure. */
 100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
 101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
 102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define uxRecursiveCallCount			pcReadFrom
 103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an items size of
 106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** zero. */
 107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( unsigned portBASE_TYPE ) 0 )
 108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueDONT_BLOCK					 ( ( portTickType ) 0U )
 109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( portTickType ) 0U )
 110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
 114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.
 115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
 117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcHead;					/*< Points to the beginning of the queue storage area. */
 119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more b
 120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcWriteTo;					/*< Points to the free next place in the storage area. */
 122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcReadFrom;				/*< Points to the last place that a queued item was read from. */
 123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xList xTasksWaitingToSend;				/*< List of tasks that are blocked waiting to post onto this queue. 
 125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xList xTasksWaitingToReceive;			/*< List of tasks that are blocked waiting to read from this queue
 126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	volatile unsigned portBASE_TYPE uxMessagesWaiting;/*< The number of items currently in the queue. 
 128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE uxLength;		/*< The length of the queue defined as the number of items it wi
 129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE uxItemSize;		/*< The size of each items that the queue will hold. */
 130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	volatile signed portBASE_TYPE xRxLock;	/*< Stores the number of items received from the queue (rem
 132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	volatile signed portBASE_TYPE xTxLock;	/*< Stores the number of items transmitted to the queue (ad
 133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		unsigned char ucQueueNumber;
 136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		unsigned char ucQueueType;
 137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#endif
 138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#endif
 142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } xQUEUE;
 144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	more user friendly. */
 155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		signed char *pcQueueName;
 158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xQueueHandle xHandle;
 159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of xQueueRegistryItem structures.
 162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueRegistryItem xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Removes a queue from the registry by simply setting the pcQueueName
 167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	member to NULL. */
 168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	static void prvQueueUnregisterQueue( xQueueHandle xQueue ) PRIVILEGED_FUNCTION;
 169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( xQUEUE *pxQueue ) PRIVILEGED_FUNCTION;
 181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  *
 185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue ) PRIVILEGED_FUNCTION;
 188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  *
 192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue ) PRIVILEGED_FUNCTION;
 195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * back of the queue.
 199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
 201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer ) PRIVILEGED_FUNCTIO
 206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/*
 209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	 */
 212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	static portBASE_TYPE prvNotifyQueueSetContainer( xQUEUE *pxQueue, portBASE_TYPE xCopyPosition );
 213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif
 214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{														\
 224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->xRxLock == queueUNLOCKED )			\
 225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{													\
 226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxQueue )->xRxLock = queueLOCKED_UNMODIFIED;	\
 227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}													\
 228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->xTxLock == queueUNLOCKED )			\
 229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{													\
 230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxQueue )->xTxLock = queueLOCKED_UNMODIFIED;	\
 231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}													\
 232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}														\
 233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
 237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
 239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) *
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to	write to
 257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	versions. */
 278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return pdPASS;
 279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxIt
 283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxNewQueue;
 285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** size_t xQueueSizeInBytes;
 286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQueueHandle xReturn = NULL;
 287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Allocate the new queue structure. */
 293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Create the list of pointers to queue items.  The queue is one byte
 299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			longer than asked for to make wrap checking easier/faster. */
 300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxNewQueue->pcHead != NULL )
 304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Initialise the queue members as described above where the
 306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				queue type is defined. */
 307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxLength = uxQueueLength;
 308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxItemSize = uxItemSize;
 309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueGenericReset( pxNewQueue, pdTRUE );
 310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_TRACE_FACILITY == 1 )
 312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxNewQueue->ucQueueType = ucQueueType;
 314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_TRACE_FACILITY */
 316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if( configUSE_QUEUE_SETS == 1 )
 318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxNewQueue->pxQueueSetContainer = NULL;
 320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceQUEUE_CREATE( pxNewQueue );
 324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pxNewQueue;
 325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceQUEUE_CREATE_FAILED( ucQueueType );
 329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vPortFree( pxNewQueue );
 330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xReturn );
 335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
 337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
 343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxNewQueue;
 345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Allocate the new queue structure. */
 351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Information required for priority inheritance. */
 355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Queues used as a mutex no data is actually copied into or out
 359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			of the queue. */
 360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcReadFrom = NULL;
 362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Each mutex has a length of 1 (like a binary semaphore) and
 364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			an item size of 0 as nothing is actually copied into or out
 365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			of the mutex. */
 366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucQueueType = ucQueueType;
 375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#endif
 377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
 379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->pxQueueSetContainer = NULL;
 381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#endif
 383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start with the correct state. */
 385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxNewQueue );
 399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
 408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is is a good way of determining if the
 413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( ( ( xQUEUE * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( xQUEUE * ) xSemaphore )->pxMutexHolder;
 421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return pxReturn;
 430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif
 433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle xMutex )
 438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xReturn;
 440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxMutex;
 441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxMutex = ( xQUEUE * ) xMutex;
 443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
 452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxMutex->uxRecursiveCallCount )--;
 461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Have we unwound the call count? */
 463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxMutex->uxRecursiveCallCount == 0 )
 464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* We cannot give the mutex because we are not the holder. */
 475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
 481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle xMutex, portTickType xBlockTime )
 489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xReturn;
 491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxMutex;
 492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxMutex = ( xQUEUE * ) xMutex;
 494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
 502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxMutex->uxRecursiveCallCount )++;
 504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xBlockTime, pdFALSE );
 509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if we successfully obtained the mutex,
 511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			we may have blocked to reach here. */
 512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xReturn == pdPASS )
 513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( pxMutex->uxRecursiveCallCount )++;
 515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
 523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_COUNTING_SEMAPHORES == 1 )
 529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE
 531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueHandle xHandle;
 533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM
 535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( ( xQUEUE * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( xHandle );
 548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xHandle;
 549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_COUNTING_SEMAPHORES */
 552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, port
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xTimeOutType xTimeOut;
 558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
 559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	for( ;; )
 568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  To be running we must be
 572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the highest priority task wanting to access the queue. */
 573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
 591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							takes care of that. */
 619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Return to the original privilege level before exiting the
 628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				function. */
 629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
 630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the function. */
 641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				remove this task from the event	list again - but as the
 672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Try again. */
 689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Return to the original privilege level before exiting the
 700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			function. */
 701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueAltGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, 
 711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xTimeOutType xTimeOut;
 714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
 715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
 717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxQueue );
 718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE )
 719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ;; )
 721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Is there room on the queue now?  To be running we must be
 725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				the highest priority task wanting to access the queue. */
 726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND( pxQueue );
 729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 731:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 733:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 735:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 737:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							our own so yield immediately. */
 739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 740:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 742:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 743:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 744:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return pdPASS;
 745:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 746:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 748:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 749:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						return errQUEUE_FULL;
 752:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 755:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xEntryTimeSet = pdTRUE;
 757:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 759:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 762:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 763:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 765:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( prvIsQueueFull( pxQueue ) != pdFALSE )
 767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 768:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 769:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 770:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portYIELD_WITHIN_API();
 771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 772:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 774:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 776:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 777:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 779:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 780:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 781:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 783:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 785:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 788:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 789:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueAltGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTick
 790:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 791:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xTimeOutType xTimeOut;
 793:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcOriginalReadPosition;
 794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
 795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 796:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
 797:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxQueue );
 798:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U )
 799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 800:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ;; )
 801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 802:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 803:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Remember our read position in case we are just peeking. */
 807:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pcOriginalReadPosition = pxQueue->pcReadFrom;
 808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					prvCopyDataFromQueue( pxQueue, pvBuffer );
 810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 811:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xJustPeeking == pdFALSE )
 812:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 813:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceQUEUE_RECEIVE( pxQueue );
 814:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* We are actually removing data. */
 816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						--( pxQueue->uxMessagesWaiting );
 817:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 818:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 819:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 821:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 822:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* Record the information required to implement
 823:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								priority inheritance should it become necessary. */
 824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 825:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 826:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#endif
 828:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 831:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 832:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 833:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 835:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 837:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
 838:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 839:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceQUEUE_PEEK( pxQueue );
 840:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 841:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* We are not removing the data, so reset our read
 842:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						pointer. */
 843:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						pxQueue->pcReadFrom = pcOriginalReadPosition;
 844:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 845:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The data is being left in the queue, so see if there are
 846:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						any other tasks waiting for the data. */
 847:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 848:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 849:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* Tasks that are removed from the event list will get added to
 850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							the pending ready list as the scheduler is still suspended. */
 851:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 852:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority than this task. */
 854:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 855:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 856:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 857:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 858:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 859:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 860:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 861:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return pdPASS;
 862:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 863:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 864:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 865:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 866:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 867:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 868:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceQUEUE_RECEIVE_FAILED( pxQueue );
 869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						return errQUEUE_EMPTY;
 870:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 871:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 872:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 873:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 874:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xEntryTimeSet = pdTRUE;
 875:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 876:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 877:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 878:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 879:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 880:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 881:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 882:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 883:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 884:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 885:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 886:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 887:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 888:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 889:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 890:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 891:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portENTER_CRITICAL();
 893:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								{
 894:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 									vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 895:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								}
 896:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portEXIT_CRITICAL();
 897:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 898:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 899:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#endif
 900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 901:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 902:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portYIELD_WITHIN_API();
 903:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 904:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 906:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 907:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 908:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 909:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
 910:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 911:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 912:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 913:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 914:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 915:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 916:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 918:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 919:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 920:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueu
 921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 922:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
 923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
 924:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
 925:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 926:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
 927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 929:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except we don't block if there is no room
 931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	in the queue.  Also we don't directly wake a task that was blocked on a
 932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	queue read, instead we return a flag to say whether a context switch is
 933:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	required or not (i.e. has a task with a higher priority than us been woken
 934:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	by this	post). */
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 936:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 938:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 939:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 940:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 941:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 942:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 943:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* If the queue is locked we do not alter the event list.  This will
 944:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 945:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 946:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 947:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 948:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 949:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 950:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 951:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 953:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 954:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 956:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 957:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 958:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 959:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 960:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 961:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 962:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
 963:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 964:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 965:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 966:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 967:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 968:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so record that a
 969:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								context	switch is required. */
 970:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
 971:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								{
 972:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
 973:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								}
 974:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 975:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 976:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 977:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 978:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 979:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 981:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 982:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 983:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 984:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
 985:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							context	switch is required. */
 986:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 987:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 988:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 989:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 990:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 991:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 992:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 993:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 994:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 995:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 996:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 997:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
 998:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
 999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xTxLock );
1000:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1001:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1003:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1004:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1005:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1006:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1007:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1008:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1010:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1011:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1012:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1013:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1014:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1015:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1016:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType
1017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1018:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
1019:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xTimeOutType xTimeOut;
1020:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed char *pcOriginalReadPosition;
1021:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
1022:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1023:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
1024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
1026:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1027:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1028:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1029:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1030:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	for( ;; )
1032:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1033:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1034:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1035:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running we must be
1036:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the highest priority task wanting to access the queue. */
1037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1038:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1039:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Remember our read position in case we are just peeking. */
1040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->pcReadFrom;
1041:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
1045:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1046:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1047:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1048:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* We are actually removing data. */
1049:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					--( pxQueue->uxMessagesWaiting );
1050:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1051:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1052:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1053:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1054:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1055:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* Record the information required to implement
1056:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							priority inheritance should it become necessary. */
1057:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
1058:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1059:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1060:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					#endif
1061:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1063:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1064:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
1065:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1066:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
1067:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1068:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1069:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1070:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1071:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1072:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1073:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1074:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The data is not being removed, so reset the read
1075:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pointer. */
1076:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxQueue->pcReadFrom = pcOriginalReadPosition;
1077:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1078:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1079:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					any other tasks waiting for the data. */
1080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1081:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1082:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* Tasks that are removed from the event list will get added to
1083:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						the pending ready list as the scheduler is still suspended. */
1084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1085:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1086:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1087:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
1088:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1089:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1090:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1091:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1092:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
1094:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1095:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1096:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
1098:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1099:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portENTER_CRITICAL();
1134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portEXIT_CRITICAL();
1138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif
1141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Try again. */
1152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
1161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_EMPTY;
1162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle xQueue, void * const pvBuffer, signed portB
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
1172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
1174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
1176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. */
1180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
1186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* If the queue is locked we will not modify the event list.  Instead
1188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			we update the lock count so the task that unlocks the queue will know
1189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			that an ISR has removed data while the queue was locked. */
1190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
1191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						force a context switch. */
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xRxLock );
1210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle xQueue )
1227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxReturn;
1229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
1234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return uxReturn;
1237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle xQueue )
1241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxReturn;
1243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
1247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return uxReturn;
1249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** void vQueueDelete( xQueueHandle xQueue )
1253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
1255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
1257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvQueueUnregisterQueue( pxQueue );
1263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#endif
1265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue->pcHead );
1266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
1267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue )
1273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return ( ( xQUEUE * ) xQueue )->ucQueueNumber;
1275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( xQueueHandle xQueue, unsigned char ucQueueNumber )
1283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		( ( xQUEUE * ) xQueue )->ucQueueNumber = ucQueueNumber;
1285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned char ucQueueGetQueueType( xQueueHandle xQueue )
1293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return ( ( xQUEUE * ) xQueue )->ucQueueType;
1295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
1303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
1309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		#endif
1314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
1318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
1320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else
1325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
1329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	++( pxQueue->uxMessagesWaiting );
1335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
1341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
1343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
1344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom = pxQueue->pcHead;
1346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
1348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( xQUEUE *pxQueue )
1353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
  27              		.loc 1 1353 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 38B5     		push	{r3, r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 1353 0
  40 0002 0446     		mov	r4, r0
1354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	updated. */
1360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
1364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
1367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						A context switch is required. */
1376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get added to
1382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the pending ready list as the scheduler is still suspended. */
1383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
1390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
1393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						break;
1395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  41              		.loc 1 1404 0
  42 0004 04F12405 		add	r5, r4, #36
1360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  43              		.loc 1 1360 0
  44 0008 FFF7FEFF 		bl	vPortEnterCritical
  45              	.LVL1:
1363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  46              		.loc 1 1363 0
  47 000c 0AE0     		b	.L2
  48              	.L5:
1402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  49              		.loc 1 1402 0
  50 000e 636A     		ldr	r3, [r4, #36]
  51 0010 5BB1     		cbz	r3, .L3
  52              		.loc 1 1404 0
  53 0012 2846     		mov	r0, r5
  54 0014 FFF7FEFF 		bl	xTaskRemoveFromEventList
  55              	.LVL2:
  56 0018 08B1     		cbz	r0, .L4
1405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that a
1407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						context	switch is required. */
1408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
  57              		.loc 1 1408 0
  58 001a FFF7FEFF 		bl	vTaskMissedYield
  59              	.LVL3:
  60              	.L4:
1409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					break;
1414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->xTxLock );
  61              		.loc 1 1418 0
  62 001e A36C     		ldr	r3, [r4, #72]
  63 0020 013B     		subs	r3, r3, #1
  64 0022 A364     		str	r3, [r4, #72]
  65              	.L2:
1363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  66              		.loc 1 1363 0 discriminator 1
  67 0024 A36C     		ldr	r3, [r4, #72]
  68 0026 002B     		cmp	r3, #0
  69 0028 F1DC     		bgt	.L5
  70              	.L3:
1419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
  71              		.loc 1 1421 0
  72 002a 4FF0FF33 		mov	r3, #-1
  73 002e A364     		str	r3, [r4, #72]
1422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
  74              		.loc 1 1423 0
  75 0030 FFF7FEFF 		bl	vPortExitCritical
  76              	.LVL4:
1424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
1426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
1429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  77              		.loc 1 1432 0
  78 0034 04F11005 		add	r5, r4, #16
1426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  79              		.loc 1 1426 0
  80 0038 FFF7FEFF 		bl	vPortEnterCritical
  81              	.LVL5:
1428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  82              		.loc 1 1428 0
  83 003c 0AE0     		b	.L6
  84              	.L9:
1430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  85              		.loc 1 1430 0
  86 003e 2369     		ldr	r3, [r4, #16]
  87 0040 5BB1     		cbz	r3, .L7
  88              		.loc 1 1432 0
  89 0042 2846     		mov	r0, r5
  90 0044 FFF7FEFF 		bl	xTaskRemoveFromEventList
  91              	.LVL6:
  92 0048 08B1     		cbz	r0, .L8
1433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
  93              		.loc 1 1434 0
  94 004a FFF7FEFF 		bl	vTaskMissedYield
  95              	.LVL7:
  96              	.L8:
1435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->xRxLock );
  97              		.loc 1 1437 0
  98 004e 636C     		ldr	r3, [r4, #68]
  99 0050 013B     		subs	r3, r3, #1
 100 0052 6364     		str	r3, [r4, #68]
 101              	.L6:
1428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 102              		.loc 1 1428 0 discriminator 1
 103 0054 636C     		ldr	r3, [r4, #68]
 104 0056 002B     		cmp	r3, #0
 105 0058 F1DC     		bgt	.L9
 106              	.L7:
1438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				break;
1442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 107              		.loc 1 1445 0
 108 005a 4FF0FF33 		mov	r3, #-1
 109 005e 6364     		str	r3, [r4, #68]
1446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 110              		.loc 1 1448 0
 111 0060 BDE83840 		pop	{r3, r4, r5, lr}
1447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 112              		.loc 1 1447 0
 113 0064 FFF7FEBF 		b	vPortExitCritical
 114              	.LVL8:
 115              		.cfi_endproc
 116              	.LFE12:
 118              		.align	1
 119              		.thumb
 120              		.thumb_func
 122              	prvCopyDataFromQueue:
 123              	.LFB11:
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 124              		.loc 1 1339 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              	.LVL9:
 129 0068 70B5     		push	{r4, r5, r6, lr}
 130              	.LCFI1:
 131              		.cfi_def_cfa_offset 16
 132              		.cfi_offset 4, -16
 133              		.cfi_offset 5, -12
 134              		.cfi_offset 6, -8
 135              		.cfi_offset 14, -4
1340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 136              		.loc 1 1340 0
 137 006a 0468     		ldr	r4, [r0, #0]
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 138              		.loc 1 1339 0
 139 006c 0346     		mov	r3, r0
1340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 140              		.loc 1 1340 0
 141 006e 6CB1     		cbz	r4, .L22
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 142              		.loc 1 1342 0
 143 0070 C568     		ldr	r5, [r0, #12]
 144 0072 026C     		ldr	r2, [r0, #64]
1343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 145              		.loc 1 1343 0
 146 0074 4668     		ldr	r6, [r0, #4]
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 147              		.loc 1 1342 0
 148 0076 AD18     		adds	r5, r5, r2
1343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 149              		.loc 1 1343 0
 150 0078 B542     		cmp	r5, r6
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 151              		.loc 1 1342 0
 152 007a C560     		str	r5, [r0, #12]
1345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom = pxQueue->pcHead;
 153              		.loc 1 1345 0
 154 007c 28BF     		it	cs
 155 007e C460     		strcs	r4, [r0, #12]
1347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 156              		.loc 1 1347 0
 157 0080 0846     		mov	r0, r1
 158              	.LVL10:
 159 0082 D968     		ldr	r1, [r3, #12]
 160              	.LVL11:
1349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 161              		.loc 1 1349 0
 162 0084 BDE87040 		pop	{r4, r5, r6, lr}
1347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 163              		.loc 1 1347 0
 164 0088 FFF7FEBF 		b	memcpy
 165              	.LVL12:
 166              	.L22:
 167 008c 70BD     		pop	{r4, r5, r6, pc}
 168              		.cfi_endproc
 169              	.LFE11:
 171              		.align	1
 172              		.thumb
 173              		.thumb_func
 175              	prvCopyDataToQueue:
 176              	.LFB10:
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 177              		.loc 1 1301 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              	.LVL13:
 182 008e 38B5     		push	{r3, r4, r5, lr}
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 16
 185              		.cfi_offset 3, -16
 186              		.cfi_offset 4, -12
 187              		.cfi_offset 5, -8
 188              		.cfi_offset 14, -4
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 189              		.loc 1 1301 0
 190 0090 1346     		mov	r3, r2
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 191              		.loc 1 1302 0
 192 0092 026C     		ldr	r2, [r0, #64]
 193              	.LVL14:
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 194              		.loc 1 1301 0
 195 0094 0446     		mov	r4, r0
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 196              		.loc 1 1302 0
 197 0096 32B9     		cbnz	r2, .L26
1306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 198              		.loc 1 1306 0
 199 0098 0568     		ldr	r5, [r0, #0]
 200 009a 05BB     		cbnz	r5, .L28
1309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 201              		.loc 1 1309 0
 202 009c 4068     		ldr	r0, [r0, #4]
 203              	.LVL15:
 204 009e FFF7FEFF 		bl	vTaskPriorityDisinherit
 205              	.LVL16:
1310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 206              		.loc 1 1310 0
 207 00a2 6560     		str	r5, [r4, #4]
 208 00a4 1BE0     		b	.L28
 209              	.LVL17:
 210              	.L26:
1315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 211              		.loc 1 1315 0
 212 00a6 63B9     		cbnz	r3, .L29
1317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 213              		.loc 1 1317 0
 214 00a8 8068     		ldr	r0, [r0, #8]
 215              	.LVL18:
 216 00aa FFF7FEFF 		bl	memcpy
 217              	.LVL19:
1318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 218              		.loc 1 1318 0
 219 00ae A268     		ldr	r2, [r4, #8]
 220 00b0 236C     		ldr	r3, [r4, #64]
 221 00b2 D318     		adds	r3, r2, r3
1319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 222              		.loc 1 1319 0
 223 00b4 6268     		ldr	r2, [r4, #4]
1318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 224              		.loc 1 1318 0
 225 00b6 A360     		str	r3, [r4, #8]
1319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 226              		.loc 1 1319 0
 227 00b8 9342     		cmp	r3, r2
 228 00ba 10D3     		bcc	.L28
1321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 229              		.loc 1 1321 0
 230 00bc 2368     		ldr	r3, [r4, #0]
 231 00be A360     		str	r3, [r4, #8]
 232 00c0 0DE0     		b	.L28
 233              	.LVL20:
 234              	.L29:
1326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 235              		.loc 1 1326 0
 236 00c2 C068     		ldr	r0, [r0, #12]
 237              	.LVL21:
 238 00c4 FFF7FEFF 		bl	memcpy
 239              	.LVL22:
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 240              		.loc 1 1327 0
 241 00c8 236C     		ldr	r3, [r4, #64]
 242 00ca E268     		ldr	r2, [r4, #12]
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 243              		.loc 1 1328 0
 244 00cc 2168     		ldr	r1, [r4, #0]
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 245              		.loc 1 1327 0
 246 00ce 5B42     		negs	r3, r3
 247 00d0 D218     		adds	r2, r2, r3
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 248              		.loc 1 1328 0
 249 00d2 8A42     		cmp	r2, r1
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 250              		.loc 1 1327 0
 251 00d4 E260     		str	r2, [r4, #12]
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 252              		.loc 1 1328 0
 253 00d6 02D2     		bcs	.L28
1330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 254              		.loc 1 1330 0
 255 00d8 6268     		ldr	r2, [r4, #4]
 256 00da D318     		adds	r3, r2, r3
 257 00dc E360     		str	r3, [r4, #12]
 258              	.L28:
1334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	++( pxQueue->uxMessagesWaiting );
 259              		.loc 1 1334 0
 260 00de A36B     		ldr	r3, [r4, #56]
 261 00e0 0133     		adds	r3, r3, #1
 262 00e2 A363     		str	r3, [r4, #56]
 263 00e4 38BD     		pop	{r3, r4, r5, pc}
 264              		.cfi_endproc
 265              	.LFE10:
 267              		.align	1
 268              		.global	xQueueGenericReset
 269              		.thumb
 270              		.thumb_func
 272              	xQueueGenericReset:
 273              	.LFB0:
 237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 274              		.loc 1 237 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              	.LVL23:
 279 00e6 38B5     		push	{r3, r4, r5, lr}
 280              	.LCFI3:
 281              		.cfi_def_cfa_offset 16
 282              		.cfi_offset 3, -16
 283              		.cfi_offset 4, -12
 284              		.cfi_offset 5, -8
 285              		.cfi_offset 14, -4
 237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 286              		.loc 1 237 0
 287 00e8 0D46     		mov	r5, r1
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 288              		.loc 1 241 0
 289 00ea 0446     		mov	r4, r0
 290 00ec 10B9     		cbnz	r0, .L32
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 291              		.loc 1 241 0 is_stmt 0 discriminator 1
 292 00ee FFF7FEFF 		bl	ulPortSetInterruptMask
 293              	.LVL24:
 294              	.L33:
 295 00f2 FEE7     		b	.L33
 296              	.LVL25:
 297              	.L32:
 243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 298              		.loc 1 243 0 is_stmt 1
 299 00f4 FFF7FEFF 		bl	vPortEnterCritical
 300              	.LVL26:
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 301              		.loc 1 245 0
 302 00f8 2368     		ldr	r3, [r4, #0]
 303 00fa E06B     		ldr	r0, [r4, #60]
 304 00fc 226C     		ldr	r2, [r4, #64]
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 305              		.loc 1 247 0
 306 00fe A360     		str	r3, [r4, #8]
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 307              		.loc 1 245 0
 308 0100 00FB0231 		mla	r1, r0, r2, r3
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) *
 309              		.loc 1 248 0
 310 0104 0138     		subs	r0, r0, #1
 311 0106 02FB0033 		mla	r3, r2, r0, r3
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 312              		.loc 1 245 0
 313 010a 6160     		str	r1, [r4, #4]
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) *
 314              		.loc 1 248 0
 315 010c E360     		str	r3, [r4, #12]
 246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 316              		.loc 1 246 0
 317 010e 0021     		movs	r1, #0
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 318              		.loc 1 249 0
 319 0110 4FF0FF33 		mov	r3, #-1
 246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 320              		.loc 1 246 0
 321 0114 A163     		str	r1, [r4, #56]
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 322              		.loc 1 249 0
 323 0116 6364     		str	r3, [r4, #68]
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 324              		.loc 1 250 0
 325 0118 A364     		str	r3, [r4, #72]
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 326              		.loc 1 252 0
 327 011a 55B9     		cbnz	r5, .L34
 259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 328              		.loc 1 259 0
 329 011c 2369     		ldr	r3, [r4, #16]
 330 011e 83B1     		cbz	r3, .L36
 261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 331              		.loc 1 261 0
 332 0120 04F11000 		add	r0, r4, #16
 333 0124 FFF7FEFF 		bl	xTaskRemoveFromEventList
 334              	.LVL27:
 335 0128 0128     		cmp	r0, #1
 336 012a 0AD1     		bne	.L36
 263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 337              		.loc 1 263 0
 338 012c FFF7FEFF 		bl	vPortYield
 339              	.LVL28:
 340 0130 07E0     		b	.L36
 341              	.L34:
 270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 342              		.loc 1 270 0
 343 0132 04F11000 		add	r0, r4, #16
 344 0136 FFF7FEFF 		bl	vListInitialise
 345              	.LVL29:
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 346              		.loc 1 271 0
 347 013a 04F12400 		add	r0, r4, #36
 348 013e FFF7FEFF 		bl	vListInitialise
 349              	.LVL30:
 350              	.L36:
 274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 351              		.loc 1 274 0
 352 0142 FFF7FEFF 		bl	vPortExitCritical
 353              	.LVL31:
 279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 354              		.loc 1 279 0
 355 0146 0120     		movs	r0, #1
 356 0148 38BD     		pop	{r3, r4, r5, pc}
 357              		.cfi_endproc
 358              	.LFE0:
 360              		.align	1
 361              		.global	xQueueGenericCreate
 362              		.thumb
 363              		.thumb_func
 365              	xQueueGenericCreate:
 366              	.LFB1:
 283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 367              		.loc 1 283 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              	.LVL32:
 372 014a 70B5     		push	{r4, r5, r6, lr}
 373              	.LCFI4:
 374              		.cfi_def_cfa_offset 16
 375              		.cfi_offset 4, -16
 376              		.cfi_offset 5, -12
 377              		.cfi_offset 6, -8
 378              		.cfi_offset 14, -4
 283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 379              		.loc 1 283 0
 380 014c 0E46     		mov	r6, r1
 293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 381              		.loc 1 293 0
 382 014e 0546     		mov	r5, r0
 383 0150 80B1     		cbz	r0, .L41
 295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 384              		.loc 1 295 0
 385 0152 4C20     		movs	r0, #76
 386              	.LVL33:
 387 0154 FFF7FEFF 		bl	pvPortMalloc
 388              	.LVL34:
 296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 389              		.loc 1 296 0
 390 0158 0446     		mov	r4, r0
 391 015a 58B1     		cbz	r0, .L41
 392              	.LVL35:
 300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 393              		.loc 1 300 0
 394 015c 05FB06F0 		mul	r0, r5, r6
 395              	.LVL36:
 302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 396              		.loc 1 302 0
 397 0160 0130     		adds	r0, r0, #1
 398              	.LVL37:
 399 0162 FFF7FEFF 		bl	pvPortMalloc
 400              	.LVL38:
 401 0166 2060     		str	r0, [r4, #0]
 303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxNewQueue->pcHead != NULL )
 402              		.loc 1 303 0
 403 0168 38B9     		cbnz	r0, .L50
 329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vPortFree( pxNewQueue );
 404              		.loc 1 329 0
 405 016a 2046     		mov	r0, r4
 406 016c FFF7FEFF 		bl	vPortFree
 407              	.LVL39:
 408 0170 00E0     		b	.L41
 409              	.LVL40:
 410              	.L42:
 411 0172 FEE7     		b	.L42
 412              	.L41:
 334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xReturn );
 413              		.loc 1 334 0
 414 0174 FFF7FEFF 		bl	ulPortSetInterruptMask
 415              	.LVL41:
 416 0178 FBE7     		b	.L42
 417              	.LVL42:
 418              	.L50:
 307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxLength = uxQueueLength;
 419              		.loc 1 307 0
 420 017a E563     		str	r5, [r4, #60]
 308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxItemSize = uxItemSize;
 421              		.loc 1 308 0
 422 017c 2664     		str	r6, [r4, #64]
 309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueGenericReset( pxNewQueue, pdTRUE );
 423              		.loc 1 309 0
 424 017e 2046     		mov	r0, r4
 425 0180 0121     		movs	r1, #1
 426 0182 FFF7FEFF 		bl	xQueueGenericReset
 427              	.LVL43:
 337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 428              		.loc 1 337 0
 429 0186 2046     		mov	r0, r4
 430 0188 70BD     		pop	{r4, r5, r6, pc}
 431              		.cfi_endproc
 432              	.LFE1:
 434              		.align	1
 435              		.global	xQueueGenericSend
 436              		.thumb
 437              		.thumb_func
 439              	xQueueGenericSend:
 440              	.LFB3:
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 441              		.loc 1 555 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 16
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445              	.LVL44:
 446 018a 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 447              	.LCFI5:
 448              		.cfi_def_cfa_offset 28
 449              		.cfi_offset 4, -28
 450              		.cfi_offset 5, -24
 451              		.cfi_offset 6, -20
 452              		.cfi_offset 7, -16
 453              		.cfi_offset 8, -12
 454              		.cfi_offset 9, -8
 455              		.cfi_offset 14, -4
 456 018e 85B0     		sub	sp, sp, #20
 457              	.LCFI6:
 458              		.cfi_def_cfa_offset 48
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 459              		.loc 1 555 0
 460 0190 0D46     		mov	r5, r1
 461 0192 0192     		str	r2, [sp, #4]
 462 0194 9946     		mov	r9, r3
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 463              		.loc 1 561 0
 464 0196 0446     		mov	r4, r0
 465 0198 10B9     		cbnz	r0, .L52
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 466              		.loc 1 561 0 is_stmt 0 discriminator 1
 467 019a FFF7FEFF 		bl	ulPortSetInterruptMask
 468              	.LVL45:
 469              	.L53:
 470 019e FEE7     		b	.L53
 471              	.LVL46:
 472              	.L52:
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 473              		.loc 1 562 0 is_stmt 1
 474 01a0 29B9     		cbnz	r1, .L69
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 475              		.loc 1 562 0 is_stmt 0 discriminator 2
 476 01a2 036C     		ldr	r3, [r0, #64]
 477              	.LVL47:
 478 01a4 2BB1     		cbz	r3, .L70
 479 01a6 65E0     		b	.L71
 480              	.LVL48:
 481              	.L56:
 482 01a8 FEE7     		b	.L56
 483              	.LVL49:
 484              	.L68:
 485 01aa 0126     		movs	r6, #1
 486              	.LVL50:
 487 01ac 03E0     		b	.L72
 488              	.LVL51:
 489              	.L69:
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 490              		.loc 1 562 0
 491 01ae 0026     		movs	r6, #0
 492 01b0 00E0     		b	.L54
 493              	.LVL52:
 494              	.L70:
 495 01b2 0E46     		mov	r6, r1
 496              	.L54:
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 497              		.loc 1 659 0 is_stmt 1
 498 01b4 0027     		movs	r7, #0
 499              	.LVL53:
 500              	.L72:
 569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 501              		.loc 1 569 0
 502 01b6 FFF7FEFF 		bl	vPortEnterCritical
 503              	.LVL54:
 573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 504              		.loc 1 573 0
 505 01ba A26B     		ldr	r2, [r4, #56]
 506 01bc E36B     		ldr	r3, [r4, #60]
 507 01be 9A42     		cmp	r2, r3
 508 01c0 12D2     		bcs	.L57
 576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 509              		.loc 1 576 0
 510 01c2 2046     		mov	r0, r4
 511 01c4 2946     		mov	r1, r5
 512 01c6 4A46     		mov	r2, r9
 513 01c8 FFF761FF 		bl	prvCopyDataToQueue
 514              	.LVL55:
 611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 515              		.loc 1 611 0
 516 01cc 636A     		ldr	r3, [r4, #36]
 517 01ce 3BB1     		cbz	r3, .L59
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 518              		.loc 1 613 0
 519 01d0 04F12400 		add	r0, r4, #36
 520 01d4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 521              	.LVL56:
 522 01d8 0128     		cmp	r0, #1
 523 01da 01D1     		bne	.L59
 619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 524              		.loc 1 619 0
 525 01dc FFF7FEFF 		bl	vPortYield
 526              	.LVL57:
 527              	.L59:
 625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 528              		.loc 1 625 0
 529 01e0 FFF7FEFF 		bl	vPortExitCritical
 530              	.LVL58:
 629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
 531              		.loc 1 629 0
 532 01e4 0120     		movs	r0, #1
 533 01e6 48E0     		b	.L73
 534              	.L57:
 633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 535              		.loc 1 633 0
 536 01e8 DDF80480 		ldr	r8, [sp, #4]
 537 01ec B8F1000F 		cmp	r8, #0
 538 01f0 02D1     		bne	.L62
 637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 539              		.loc 1 637 0
 540 01f2 FFF7FEFF 		bl	vPortExitCritical
 541              	.LVL59:
 542 01f6 3BE0     		b	.L74
 543              	.L62:
 644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 544              		.loc 1 644 0
 545 01f8 16B9     		cbnz	r6, .L63
 648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 546              		.loc 1 648 0
 547 01fa 02A8     		add	r0, sp, #8
 548 01fc FFF7FEFF 		bl	vTaskSetTimeOutState
 549              	.LVL60:
 550              	.L63:
 653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 551              		.loc 1 653 0
 552 0200 FFF7FEFF 		bl	vPortExitCritical
 553              	.LVL61:
 658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 554              		.loc 1 658 0
 555 0204 FFF7FEFF 		bl	vTaskSuspendAll
 556              	.LVL62:
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 557              		.loc 1 659 0
 558 0208 FFF7FEFF 		bl	vPortEnterCritical
 559              	.LVL63:
 560 020c 636C     		ldr	r3, [r4, #68]
 561 020e 0133     		adds	r3, r3, #1
 562 0210 08BF     		it	eq
 563 0212 6764     		streq	r7, [r4, #68]
 564 0214 A36C     		ldr	r3, [r4, #72]
 565 0216 0133     		adds	r3, r3, #1
 566 0218 08BF     		it	eq
 567 021a A764     		streq	r7, [r4, #72]
 568 021c FFF7FEFF 		bl	vPortExitCritical
 569              	.LVL64:
 662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 570              		.loc 1 662 0
 571 0220 02A8     		add	r0, sp, #8
 572 0222 01A9     		add	r1, sp, #4
 573 0224 FFF7FEFF 		bl	xTaskCheckForTimeOut
 574              	.LVL65:
 575 0228 E8B9     		cbnz	r0, .L66
 576              	.LVL66:
 577              	.LBB4:
 578              	.LBB5:
1449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
1452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == 0 )
1458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
1464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle xQueue )
1473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( ( ( xQUEUE * ) xQueue )->uxMessagesWaiting == 0 )
1478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
1480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else
1482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
1484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
1491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 579              		.loc 1 1494 0
 580 022a FFF7FEFF 		bl	vPortEnterCritical
 581              	.LVL67:
1495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 582              		.loc 1 1496 0
 583 022e D4F83880 		ldr	r8, [r4, #56]
 584 0232 E66B     		ldr	r6, [r4, #60]
 585              	.LVL68:
1497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
1503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 586              		.loc 1 1505 0
 587 0234 FFF7FEFF 		bl	vPortExitCritical
 588              	.LVL69:
 589              	.LBE5:
 590              	.LBE4:
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 591              		.loc 1 664 0
 592 0238 B045     		cmp	r8, r6
 593 023a 0ED1     		bne	.L67
 667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 594              		.loc 1 667 0
 595 023c 04F11000 		add	r0, r4, #16
 596 0240 0199     		ldr	r1, [sp, #4]
 597 0242 FFF7FEFF 		bl	vTaskPlaceOnEventList
 598              	.LVL70:
 674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 599              		.loc 1 674 0
 600 0246 2046     		mov	r0, r4
 601 0248 FFF7DAFE 		bl	prvUnlockQueue
 602              	.LVL71:
 681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 603              		.loc 1 681 0
 604 024c FFF7FEFF 		bl	xTaskResumeAll
 605              	.LVL72:
 606 0250 0028     		cmp	r0, #0
 607 0252 AAD1     		bne	.L68
 683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 608              		.loc 1 683 0
 609 0254 FFF7FEFF 		bl	vPortYield
 610              	.LVL73:
 611 0258 A7E7     		b	.L68
 612              	.L67:
 689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 613              		.loc 1 689 0
 614 025a 2046     		mov	r0, r4
 615 025c FFF7D0FE 		bl	prvUnlockQueue
 616              	.LVL74:
 690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 617              		.loc 1 690 0
 618 0260 FFF7FEFF 		bl	xTaskResumeAll
 619              	.LVL75:
 620 0264 A1E7     		b	.L68
 621              	.LVL76:
 622              	.L66:
 696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 623              		.loc 1 696 0
 624 0266 2046     		mov	r0, r4
 625 0268 FFF7CAFE 		bl	prvUnlockQueue
 626              	.LVL77:
 697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 627              		.loc 1 697 0
 628 026c FFF7FEFF 		bl	xTaskResumeAll
 629              	.LVL78:
 630              	.L74:
 702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 631              		.loc 1 702 0
 632 0270 0020     		movs	r0, #0
 633 0272 02E0     		b	.L73
 634              	.LVL79:
 635              	.L71:
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 636              		.loc 1 562 0
 637 0274 FFF7FEFF 		bl	ulPortSetInterruptMask
 638              	.LVL80:
 639 0278 96E7     		b	.L56
 640              	.LVL81:
 641              	.L73:
 705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 642              		.loc 1 705 0
 643 027a 05B0     		add	sp, sp, #20
 644 027c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 645              		.cfi_endproc
 646              	.LFE3:
 648              		.align	1
 649              		.global	xQueueCreateMutex
 650              		.thumb
 651              		.thumb_func
 653              	xQueueCreateMutex:
 654              	.LFB2:
 343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 655              		.loc 1 343 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              	.LVL82:
 660 0280 38B5     		push	{r3, r4, r5, lr}
 661              	.LCFI7:
 662              		.cfi_def_cfa_offset 16
 663              		.cfi_offset 3, -16
 664              		.cfi_offset 4, -12
 665              		.cfi_offset 5, -8
 666              		.cfi_offset 14, -4
 351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 667              		.loc 1 351 0
 668 0282 4C20     		movs	r0, #76
 669              	.LVL83:
 670 0284 FFF7FEFF 		bl	pvPortMalloc
 671              	.LVL84:
 352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 672              		.loc 1 352 0
 673 0288 0446     		mov	r4, r0
 674 028a 08B1     		cbz	r0, .L76
 675 028c 03E0     		b	.L79
 676              	.LVL85:
 677              	.L77:
 678 028e FEE7     		b	.L77
 679              	.LVL86:
 680              	.L76:
 398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxNewQueue );
 681              		.loc 1 398 0
 682 0290 FFF7FEFF 		bl	ulPortSetInterruptMask
 683              	.LVL87:
 684 0294 FBE7     		b	.L77
 685              	.LVL88:
 686              	.L79:
 367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 687              		.loc 1 367 0
 688 0296 0123     		movs	r3, #1
 355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 689              		.loc 1 355 0
 690 0298 0025     		movs	r5, #0
 367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 691              		.loc 1 367 0
 692 029a C363     		str	r3, [r0, #60]
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 693              		.loc 1 369 0
 694 029c 4FF0FF33 		mov	r3, #-1
 366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 695              		.loc 1 366 0
 696 02a0 8563     		str	r5, [r0, #56]
 355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 697              		.loc 1 355 0
 698 02a2 4560     		str	r5, [r0, #4]
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 699              		.loc 1 369 0
 700 02a4 4364     		str	r3, [r0, #68]
 356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 701              		.loc 1 356 0
 702 02a6 0560     		str	r5, [r0, #0]
 370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 703              		.loc 1 370 0
 704 02a8 8364     		str	r3, [r0, #72]
 360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 705              		.loc 1 360 0
 706 02aa 8560     		str	r5, [r0, #8]
 361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcReadFrom = NULL;
 707              		.loc 1 361 0
 708 02ac C560     		str	r5, [r0, #12]
 368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 709              		.loc 1 368 0
 710 02ae 0564     		str	r5, [r0, #64]
 385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 711              		.loc 1 385 0
 712 02b0 1030     		adds	r0, r0, #16
 713              	.LVL89:
 714 02b2 FFF7FEFF 		bl	vListInitialise
 715              	.LVL90:
 386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 716              		.loc 1 386 0
 717 02b6 04F12400 		add	r0, r4, #36
 718 02ba FFF7FEFF 		bl	vListInitialise
 719              	.LVL91:
 391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 720              		.loc 1 391 0
 721 02be 2046     		mov	r0, r4
 722 02c0 2946     		mov	r1, r5
 723 02c2 2A46     		mov	r2, r5
 724 02c4 2B46     		mov	r3, r5
 725 02c6 FFF7FEFF 		bl	xQueueGenericSend
 726              	.LVL92:
 400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 727              		.loc 1 400 0
 728 02ca 2046     		mov	r0, r4
 729 02cc 38BD     		pop	{r3, r4, r5, pc}
 730              		.cfi_endproc
 731              	.LFE2:
 733              		.align	1
 734              		.global	xQueueGenericSendFromISR
 735              		.thumb
 736              		.thumb_func
 738              	xQueueGenericSendFromISR:
 739              	.LFB4:
 921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 740              		.loc 1 921 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              	.LVL93:
 745 02ce 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 746              	.LCFI8:
 747              		.cfi_def_cfa_offset 24
 748              		.cfi_offset 4, -24
 749              		.cfi_offset 5, -20
 750              		.cfi_offset 6, -16
 751              		.cfi_offset 7, -12
 752              		.cfi_offset 8, -8
 753              		.cfi_offset 14, -4
 921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 754              		.loc 1 921 0
 755 02d2 0E46     		mov	r6, r1
 756 02d4 1546     		mov	r5, r2
 757 02d6 9846     		mov	r8, r3
 927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 758              		.loc 1 927 0
 759 02d8 0446     		mov	r4, r0
 760 02da 10B9     		cbnz	r0, .L81
 927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 761              		.loc 1 927 0 is_stmt 0 discriminator 1
 762 02dc FFF7FEFF 		bl	ulPortSetInterruptMask
 763              	.LVL94:
 764              	.L82:
 765 02e0 FEE7     		b	.L82
 766              	.LVL95:
 767              	.L81:
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 768              		.loc 1 928 0 is_stmt 1
 769 02e2 F9B9     		cbnz	r1, .L83
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 770              		.loc 1 928 0 is_stmt 0 discriminator 2
 771 02e4 016C     		ldr	r1, [r0, #64]
 772              	.LVL96:
 773 02e6 E9B1     		cbz	r1, .L83
 774 02e8 19E0     		b	.L100
 775              	.LVL97:
 776              	.L85:
 777 02ea FEE7     		b	.L85
 778              	.LVL98:
 779              	.L90:
 941:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 780              		.loc 1 941 0 is_stmt 1
 781 02ec 2046     		mov	r0, r4
 782              	.LVL99:
 783 02ee 3146     		mov	r1, r6
 784 02f0 4246     		mov	r2, r8
 785 02f2 FFF7CCFE 		bl	prvCopyDataToQueue
 786              	.LVL100:
 945:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 787              		.loc 1 945 0
 788 02f6 A36C     		ldr	r3, [r4, #72]
 789 02f8 0133     		adds	r3, r3, #1
 790 02fa 0BD1     		bne	.L86
 980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 791              		.loc 1 980 0
 792 02fc 636A     		ldr	r3, [r4, #36]
 793 02fe 03B9     		cbnz	r3, .L87
 794 0300 0BE0     		b	.L102
 795              	.L87:
 982:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 796              		.loc 1 982 0
 797 0302 04F12400 		add	r0, r4, #36
 798 0306 FFF7FEFF 		bl	xTaskRemoveFromEventList
 799              	.LVL101:
 800 030a 30B1     		cbz	r0, .L102
 986:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 801              		.loc 1 986 0
 802 030c 2DB1     		cbz	r5, .L102
 988:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 803              		.loc 1 988 0
 804 030e 0124     		movs	r4, #1
 805              	.LVL102:
 806 0310 2C60     		str	r4, [r5, #0]
 807 0312 0FE0     		b	.L88
 808              	.LVL103:
 809              	.L86:
 999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xTxLock );
 810              		.loc 1 999 0
 811 0314 A36C     		ldr	r3, [r4, #72]
 812 0316 0133     		adds	r3, r3, #1
 813 0318 A364     		str	r3, [r4, #72]
 814              	.L102:
1002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 815              		.loc 1 1002 0
 816 031a 0124     		movs	r4, #1
 817              	.LVL104:
 818 031c 0AE0     		b	.L88
 819              	.LVL105:
 820              	.L100:
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 821              		.loc 1 928 0
 822 031e FFF7FEFF 		bl	ulPortSetInterruptMask
 823              	.LVL106:
 824 0322 E2E7     		b	.L85
 825              	.LVL107:
 826              	.L83:
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 827              		.loc 1 935 0
 828 0324 FFF7FEFF 		bl	ulPortSetInterruptMask
 829              	.LVL108:
 937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 830              		.loc 1 937 0
 831 0328 A36B     		ldr	r3, [r4, #56]
 832 032a E16B     		ldr	r1, [r4, #60]
 833 032c 8B42     		cmp	r3, r1
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 834              		.loc 1 935 0
 835 032e 0746     		mov	r7, r0
 836              	.LVL109:
 937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 837              		.loc 1 937 0
 838 0330 DCD3     		bcc	.L90
1007:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 839              		.loc 1 1007 0
 840 0332 0024     		movs	r4, #0
 841              	.LVL110:
 842              	.L88:
1010:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 843              		.loc 1 1010 0
 844 0334 3846     		mov	r0, r7
 845 0336 FFF7FEFF 		bl	vPortClearInterruptMask
 846              	.LVL111:
1013:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 847              		.loc 1 1013 0
 848 033a 2046     		mov	r0, r4
 849 033c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 850              		.cfi_endproc
 851              	.LFE4:
 853              		.align	1
 854              		.global	xQueueGenericReceive
 855              		.thumb
 856              		.thumb_func
 858              	xQueueGenericReceive:
 859              	.LFB5:
1017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 860              		.loc 1 1017 0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 16
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 864              	.LVL112:
 865 0340 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 866              	.LCFI9:
 867              		.cfi_def_cfa_offset 28
 868              		.cfi_offset 4, -28
 869              		.cfi_offset 5, -24
 870              		.cfi_offset 6, -20
 871              		.cfi_offset 7, -16
 872              		.cfi_offset 8, -12
 873              		.cfi_offset 9, -8
 874              		.cfi_offset 14, -4
 875 0344 85B0     		sub	sp, sp, #20
 876              	.LCFI10:
 877              		.cfi_def_cfa_offset 48
1017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 878              		.loc 1 1017 0
 879 0346 0D46     		mov	r5, r1
 880 0348 0192     		str	r2, [sp, #4]
 881 034a 9946     		mov	r9, r3
1024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 882              		.loc 1 1024 0
 883 034c 0446     		mov	r4, r0
 884 034e 10B9     		cbnz	r0, .L104
1024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 885              		.loc 1 1024 0 is_stmt 0 discriminator 1
 886 0350 FFF7FEFF 		bl	ulPortSetInterruptMask
 887              	.LVL113:
 888              	.L105:
 889 0354 FEE7     		b	.L105
 890              	.LVL114:
 891              	.L104:
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 892              		.loc 1 1025 0 is_stmt 1
 893 0356 29B9     		cbnz	r1, .L125
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 894              		.loc 1 1025 0 is_stmt 0 discriminator 2
 895 0358 036C     		ldr	r3, [r0, #64]
 896              	.LVL115:
 897 035a 2BB1     		cbz	r3, .L126
 898 035c 7EE0     		b	.L130
 899              	.LVL116:
 900              	.L108:
 901 035e FEE7     		b	.L108
 902              	.LVL117:
 903              	.L124:
 904 0360 0126     		movs	r6, #1
 905              	.LVL118:
 906 0362 03E0     		b	.L131
 907              	.LVL119:
 908              	.L125:
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 909              		.loc 1 1025 0
 910 0364 0026     		movs	r6, #0
 911 0366 00E0     		b	.L106
 912              	.LVL120:
 913              	.L126:
 914 0368 0E46     		mov	r6, r1
 915              	.L106:
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 916              		.loc 1 1120 0 is_stmt 1
 917 036a 0027     		movs	r7, #0
 918              	.LVL121:
 919              	.L131:
1033:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 920              		.loc 1 1033 0
 921 036c FFF7FEFF 		bl	vPortEnterCritical
 922              	.LVL122:
1037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 923              		.loc 1 1037 0
 924 0370 A36B     		ldr	r3, [r4, #56]
 925 0372 3BB3     		cbz	r3, .L109
1042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 926              		.loc 1 1042 0
 927 0374 2046     		mov	r0, r4
 928 0376 2946     		mov	r1, r5
1040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->pcReadFrom;
 929              		.loc 1 1040 0
 930 0378 E668     		ldr	r6, [r4, #12]
 931              	.LVL123:
1042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 932              		.loc 1 1042 0
 933 037a FFF775FE 		bl	prvCopyDataFromQueue
 934              	.LVL124:
1044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
 935              		.loc 1 1044 0
 936 037e B9F1000F 		cmp	r9, #0
 937 0382 12D1     		bne	.L110
1049:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					--( pxQueue->uxMessagesWaiting );
 938              		.loc 1 1049 0
 939 0384 A36B     		ldr	r3, [r4, #56]
 940 0386 013B     		subs	r3, r3, #1
 941 0388 A363     		str	r3, [r4, #56]
1053:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 942              		.loc 1 1053 0
 943 038a 2368     		ldr	r3, [r4, #0]
 944 038c 13B9     		cbnz	r3, .L111
1057:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 945              		.loc 1 1057 0
 946 038e FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 947              	.LVL125:
 948 0392 6060     		str	r0, [r4, #4]
 949              	.L111:
1062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 950              		.loc 1 1062 0
 951 0394 2369     		ldr	r3, [r4, #16]
 952 0396 8BB1     		cbz	r3, .L113
1064:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 953              		.loc 1 1064 0
 954 0398 04F11000 		add	r0, r4, #16
 955 039c FFF7FEFF 		bl	xTaskRemoveFromEventList
 956              	.LVL126:
 957 03a0 0128     		cmp	r0, #1
 958 03a2 0BD1     		bne	.L113
 959              	.L115:
1066:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 960              		.loc 1 1066 0
 961 03a4 FFF7FEFF 		bl	vPortYield
 962              	.LVL127:
 963 03a8 08E0     		b	.L113
 964              	.L110:
1080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 965              		.loc 1 1080 0
 966 03aa 636A     		ldr	r3, [r4, #36]
1076:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxQueue->pcReadFrom = pcOriginalReadPosition;
 967              		.loc 1 1076 0
 968 03ac E660     		str	r6, [r4, #12]
1080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 969              		.loc 1 1080 0
 970 03ae 2BB1     		cbz	r3, .L113
1084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 971              		.loc 1 1084 0
 972 03b0 04F12400 		add	r0, r4, #36
 973 03b4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 974              	.LVL128:
 975 03b8 0028     		cmp	r0, #0
 976 03ba F3D1     		bne	.L115
 977              	.L113:
1092:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 978              		.loc 1 1092 0
 979 03bc FFF7FEFF 		bl	vPortExitCritical
 980              	.LVL129:
1093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
 981              		.loc 1 1093 0
 982 03c0 0120     		movs	r0, #1
 983 03c2 4EE0     		b	.L132
 984              	.LVL130:
 985              	.L109:
1097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 986              		.loc 1 1097 0
 987 03c4 DDF80480 		ldr	r8, [sp, #4]
 988 03c8 B8F1000F 		cmp	r8, #0
 989 03cc 02D1     		bne	.L117
1101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 990              		.loc 1 1101 0
 991 03ce FFF7FEFF 		bl	vPortExitCritical
 992              	.LVL131:
 993 03d2 41E0     		b	.L133
 994              	.L117:
1105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 995              		.loc 1 1105 0
 996 03d4 16B9     		cbnz	r6, .L118
1109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 997              		.loc 1 1109 0
 998 03d6 02A8     		add	r0, sp, #8
 999 03d8 FFF7FEFF 		bl	vTaskSetTimeOutState
 1000              	.LVL132:
 1001              	.L118:
1114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 1002              		.loc 1 1114 0
 1003 03dc FFF7FEFF 		bl	vPortExitCritical
 1004              	.LVL133:
1119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 1005              		.loc 1 1119 0
 1006 03e0 FFF7FEFF 		bl	vTaskSuspendAll
 1007              	.LVL134:
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1008              		.loc 1 1120 0
 1009 03e4 FFF7FEFF 		bl	vPortEnterCritical
 1010              	.LVL135:
 1011 03e8 636C     		ldr	r3, [r4, #68]
 1012 03ea 0133     		adds	r3, r3, #1
 1013 03ec 08BF     		it	eq
 1014 03ee 6764     		streq	r7, [r4, #68]
 1015 03f0 A36C     		ldr	r3, [r4, #72]
 1016 03f2 0133     		adds	r3, r3, #1
 1017 03f4 08BF     		it	eq
 1018 03f6 A764     		streq	r7, [r4, #72]
 1019 03f8 FFF7FEFF 		bl	vPortExitCritical
 1020              	.LVL136:
1123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1021              		.loc 1 1123 0
 1022 03fc 02A8     		add	r0, sp, #8
 1023 03fe 01A9     		add	r1, sp, #4
 1024 0400 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1025              	.LVL137:
 1026 0404 18BB     		cbnz	r0, .L121
 1027              	.LVL138:
 1028              	.LBB8:
 1029              	.LBB9:
1455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1030              		.loc 1 1455 0
 1031 0406 FFF7FEFF 		bl	vPortEnterCritical
 1032              	.LVL139:
1457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == 0 )
 1033              		.loc 1 1457 0
 1034 040a A66B     		ldr	r6, [r4, #56]
 1035              	.LVL140:
1466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1036              		.loc 1 1466 0
 1037 040c FFF7FEFF 		bl	vPortExitCritical
 1038              	.LVL141:
 1039              	.LBE9:
 1040              	.LBE8:
1125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1041              		.loc 1 1125 0
 1042 0410 BEB9     		cbnz	r6, .L122
1131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1043              		.loc 1 1131 0
 1044 0412 2368     		ldr	r3, [r4, #0]
 1045 0414 33B9     		cbnz	r3, .L123
1133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portENTER_CRITICAL();
 1046              		.loc 1 1133 0
 1047 0416 FFF7FEFF 		bl	vPortEnterCritical
 1048              	.LVL142:
1135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 1049              		.loc 1 1135 0
 1050 041a 6068     		ldr	r0, [r4, #4]
 1051 041c FFF7FEFF 		bl	vTaskPriorityInherit
 1052              	.LVL143:
1137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portEXIT_CRITICAL();
 1053              		.loc 1 1137 0
 1054 0420 FFF7FEFF 		bl	vPortExitCritical
 1055              	.LVL144:
 1056              	.L123:
1142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1057              		.loc 1 1142 0
 1058 0424 04F12400 		add	r0, r4, #36
 1059 0428 0199     		ldr	r1, [sp, #4]
 1060 042a FFF7FEFF 		bl	vTaskPlaceOnEventList
 1061              	.LVL145:
1143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1062              		.loc 1 1143 0
 1063 042e 2046     		mov	r0, r4
 1064 0430 FFF7E6FD 		bl	prvUnlockQueue
 1065              	.LVL146:
1144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1066              		.loc 1 1144 0
 1067 0434 FFF7FEFF 		bl	xTaskResumeAll
 1068              	.LVL147:
 1069 0438 0028     		cmp	r0, #0
 1070 043a 91D1     		bne	.L124
1146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 1071              		.loc 1 1146 0
 1072 043c FFF7FEFF 		bl	vPortYield
 1073              	.LVL148:
 1074 0440 8EE7     		b	.L124
 1075              	.L122:
1152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1076              		.loc 1 1152 0
 1077 0442 2046     		mov	r0, r4
 1078 0444 FFF7DCFD 		bl	prvUnlockQueue
 1079              	.LVL149:
1153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1080              		.loc 1 1153 0
 1081 0448 FFF7FEFF 		bl	xTaskResumeAll
 1082              	.LVL150:
 1083 044c 88E7     		b	.L124
 1084              	.LVL151:
 1085              	.L121:
1158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1086              		.loc 1 1158 0
 1087 044e 2046     		mov	r0, r4
 1088 0450 FFF7D6FD 		bl	prvUnlockQueue
 1089              	.LVL152:
1159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1090              		.loc 1 1159 0
 1091 0454 FFF7FEFF 		bl	xTaskResumeAll
 1092              	.LVL153:
 1093              	.L133:
1161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_EMPTY;
 1094              		.loc 1 1161 0
 1095 0458 0020     		movs	r0, #0
 1096 045a 02E0     		b	.L132
 1097              	.LVL154:
 1098              	.L130:
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1099              		.loc 1 1025 0
 1100 045c FFF7FEFF 		bl	ulPortSetInterruptMask
 1101              	.LVL155:
 1102 0460 7DE7     		b	.L108
 1103              	.LVL156:
 1104              	.L132:
1164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1105              		.loc 1 1164 0
 1106 0462 05B0     		add	sp, sp, #20
 1107 0464 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1108              		.cfi_endproc
 1109              	.LFE5:
 1111              		.align	1
 1112              		.global	xQueueReceiveFromISR
 1113              		.thumb
 1114              		.thumb_func
 1116              	xQueueReceiveFromISR:
 1117              	.LFB6:
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1118              		.loc 1 1168 0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 0
 1121              		@ frame_needed = 0, uses_anonymous_args = 0
 1122              	.LVL157:
 1123 0468 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1124              	.LCFI11:
 1125              		.cfi_def_cfa_offset 24
 1126              		.cfi_offset 3, -24
 1127              		.cfi_offset 4, -20
 1128              		.cfi_offset 5, -16
 1129              		.cfi_offset 6, -12
 1130              		.cfi_offset 7, -8
 1131              		.cfi_offset 14, -4
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1132              		.loc 1 1168 0
 1133 046a 0E46     		mov	r6, r1
 1134 046c 1546     		mov	r5, r2
1174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1135              		.loc 1 1174 0
 1136 046e 0446     		mov	r4, r0
 1137 0470 10B9     		cbnz	r0, .L135
1174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1138              		.loc 1 1174 0 is_stmt 0 discriminator 1
 1139 0472 FFF7FEFF 		bl	ulPortSetInterruptMask
 1140              	.LVL158:
 1141              	.L136:
 1142 0476 FEE7     		b	.L136
 1143              	.LVL159:
 1144              	.L135:
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1145              		.loc 1 1175 0 is_stmt 1
 1146 0478 09BB     		cbnz	r1, .L137
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1147              		.loc 1 1175 0 is_stmt 0 discriminator 2
 1148 047a 036C     		ldr	r3, [r0, #64]
 1149 047c FBB1     		cbz	r3, .L137
 1150 047e 1BE0     		b	.L154
 1151              	.LVL160:
 1152              	.L139:
 1153 0480 FEE7     		b	.L139
 1154              	.LVL161:
 1155              	.L144:
1184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1156              		.loc 1 1184 0 is_stmt 1
 1157 0482 2046     		mov	r0, r4
 1158              	.LVL162:
 1159 0484 3146     		mov	r1, r6
 1160 0486 FFF7EFFD 		bl	prvCopyDataFromQueue
 1161              	.LVL163:
1185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 1162              		.loc 1 1185 0
 1163 048a A36B     		ldr	r3, [r4, #56]
 1164 048c 013B     		subs	r3, r3, #1
 1165 048e A363     		str	r3, [r4, #56]
1190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
 1166              		.loc 1 1190 0
 1167 0490 636C     		ldr	r3, [r4, #68]
 1168 0492 0133     		adds	r3, r3, #1
 1169 0494 0BD1     		bne	.L140
1192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1170              		.loc 1 1192 0
 1171 0496 2369     		ldr	r3, [r4, #16]
 1172 0498 03B9     		cbnz	r3, .L141
 1173 049a 0BE0     		b	.L156
 1174              	.L141:
1194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1175              		.loc 1 1194 0
 1176 049c 04F11000 		add	r0, r4, #16
 1177 04a0 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1178              	.LVL164:
 1179 04a4 30B1     		cbz	r0, .L156
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 1180              		.loc 1 1198 0
 1181 04a6 2DB1     		cbz	r5, .L156
1200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 1182              		.loc 1 1200 0
 1183 04a8 0124     		movs	r4, #1
 1184              	.LVL165:
 1185 04aa 2C60     		str	r4, [r5, #0]
 1186 04ac 0EE0     		b	.L142
 1187              	.LVL166:
 1188              	.L140:
1209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xRxLock );
 1189              		.loc 1 1209 0
 1190 04ae 636C     		ldr	r3, [r4, #68]
 1191 04b0 0133     		adds	r3, r3, #1
 1192 04b2 6364     		str	r3, [r4, #68]
 1193              	.L156:
1212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1194              		.loc 1 1212 0
 1195 04b4 0124     		movs	r4, #1
 1196              	.LVL167:
 1197 04b6 09E0     		b	.L142
 1198              	.LVL168:
 1199              	.L154:
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1200              		.loc 1 1175 0
 1201 04b8 FFF7FEFF 		bl	ulPortSetInterruptMask
 1202              	.LVL169:
 1203 04bc E0E7     		b	.L139
 1204              	.LVL170:
 1205              	.L137:
1177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1206              		.loc 1 1177 0
 1207 04be FFF7FEFF 		bl	ulPortSetInterruptMask
 1208              	.LVL171:
1180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1209              		.loc 1 1180 0
 1210 04c2 A36B     		ldr	r3, [r4, #56]
1177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1211              		.loc 1 1177 0
 1212 04c4 0746     		mov	r7, r0
 1213              	.LVL172:
1180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1214              		.loc 1 1180 0
 1215 04c6 002B     		cmp	r3, #0
 1216 04c8 DBD1     		bne	.L144
1216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 1217              		.loc 1 1216 0
 1218 04ca 1C46     		mov	r4, r3
 1219              	.LVL173:
 1220              	.L142:
1220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1221              		.loc 1 1220 0
 1222 04cc 3846     		mov	r0, r7
 1223 04ce FFF7FEFF 		bl	vPortClearInterruptMask
 1224              	.LVL174:
1223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1225              		.loc 1 1223 0
 1226 04d2 2046     		mov	r0, r4
 1227 04d4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1228              		.cfi_endproc
 1229              	.LFE6:
 1231              		.align	1
 1232              		.global	uxQueueMessagesWaiting
 1233              		.thumb
 1234              		.thumb_func
 1236              	uxQueueMessagesWaiting:
 1237              	.LFB7:
1227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1238              		.loc 1 1227 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242              	.LVL175:
 1243 04d6 10B5     		push	{r4, lr}
 1244              	.LCFI12:
 1245              		.cfi_def_cfa_offset 8
 1246              		.cfi_offset 4, -8
 1247              		.cfi_offset 14, -4
1230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1248              		.loc 1 1230 0
 1249 04d8 0446     		mov	r4, r0
 1250 04da 10B9     		cbnz	r0, .L158
1230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1251              		.loc 1 1230 0 is_stmt 0 discriminator 1
 1252 04dc FFF7FEFF 		bl	ulPortSetInterruptMask
 1253              	.LVL176:
 1254              	.L159:
 1255 04e0 FEE7     		b	.L159
 1256              	.LVL177:
 1257              	.L158:
1232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1258              		.loc 1 1232 0 is_stmt 1
 1259 04e2 FFF7FEFF 		bl	vPortEnterCritical
 1260              	.LVL178:
1233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
 1261              		.loc 1 1233 0
 1262 04e6 A46B     		ldr	r4, [r4, #56]
 1263              	.LVL179:
1234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1264              		.loc 1 1234 0
 1265 04e8 FFF7FEFF 		bl	vPortExitCritical
 1266              	.LVL180:
1237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1267              		.loc 1 1237 0
 1268 04ec 2046     		mov	r0, r4
 1269 04ee 10BD     		pop	{r4, pc}
 1270              		.cfi_endproc
 1271              	.LFE7:
 1273              		.align	1
 1274              		.global	uxQueueMessagesWaitingFromISR
 1275              		.thumb
 1276              		.thumb_func
 1278              	uxQueueMessagesWaitingFromISR:
 1279              	.LFB8:
1241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1280              		.loc 1 1241 0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 0
 1283              		@ frame_needed = 0, uses_anonymous_args = 0
 1284              	.LVL181:
 1285 04f0 08B5     		push	{r3, lr}
 1286              	.LCFI13:
 1287              		.cfi_def_cfa_offset 8
 1288              		.cfi_offset 3, -8
 1289              		.cfi_offset 14, -4
1244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1290              		.loc 1 1244 0
 1291 04f2 10B9     		cbnz	r0, .L161
1244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1292              		.loc 1 1244 0 is_stmt 0 discriminator 1
 1293 04f4 FFF7FEFF 		bl	ulPortSetInterruptMask
 1294              	.LVL182:
 1295              	.L162:
 1296 04f8 FEE7     		b	.L162
 1297              	.LVL183:
 1298              	.L161:
1246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
 1299              		.loc 1 1246 0 is_stmt 1
 1300 04fa 806B     		ldr	r0, [r0, #56]
 1301              	.LVL184:
1249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1302              		.loc 1 1249 0
 1303 04fc 08BD     		pop	{r3, pc}
 1304              		.cfi_endproc
 1305              	.LFE8:
 1307              		.align	1
 1308              		.global	vQueueDelete
 1309              		.thumb
 1310              		.thumb_func
 1312              	vQueueDelete:
 1313              	.LFB9:
1253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1314              		.loc 1 1253 0
 1315              		.cfi_startproc
 1316              		@ args = 0, pretend = 0, frame = 0
 1317              		@ frame_needed = 0, uses_anonymous_args = 0
 1318              	.LVL185:
 1319 04fe 10B5     		push	{r4, lr}
 1320              	.LCFI14:
 1321              		.cfi_def_cfa_offset 8
 1322              		.cfi_offset 4, -8
 1323              		.cfi_offset 14, -4
1257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1324              		.loc 1 1257 0
 1325 0500 0446     		mov	r4, r0
 1326 0502 10B9     		cbnz	r0, .L164
1257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1327              		.loc 1 1257 0 is_stmt 0 discriminator 1
 1328 0504 FFF7FEFF 		bl	ulPortSetInterruptMask
 1329              	.LVL186:
 1330              	.L165:
 1331 0508 FEE7     		b	.L165
 1332              	.LVL187:
 1333              	.L164:
1265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue->pcHead );
 1334              		.loc 1 1265 0 is_stmt 1
 1335 050a 0068     		ldr	r0, [r0, #0]
 1336              	.LVL188:
 1337 050c FFF7FEFF 		bl	vPortFree
 1338              	.LVL189:
1266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
 1339              		.loc 1 1266 0
 1340 0510 2046     		mov	r0, r4
1267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1341              		.loc 1 1267 0
 1342 0512 BDE81040 		pop	{r4, lr}
1266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
 1343              		.loc 1 1266 0
 1344 0516 FFF7FEBF 		b	vPortFree
 1345              	.LVL190:
 1346              		.cfi_endproc
 1347              	.LFE9:
 1349              		.align	1
 1350              		.global	xQueueIsQueueEmptyFromISR
 1351              		.thumb
 1352              		.thumb_func
 1354              	xQueueIsQueueEmptyFromISR:
 1355              	.LFB14:
1473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1356              		.loc 1 1473 0
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 0
 1359              		@ frame_needed = 0, uses_anonymous_args = 0
 1360              	.LVL191:
 1361 051a 08B5     		push	{r3, lr}
 1362              	.LCFI15:
 1363              		.cfi_def_cfa_offset 8
 1364              		.cfi_offset 3, -8
 1365              		.cfi_offset 14, -4
1476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1366              		.loc 1 1476 0
 1367 051c 10B9     		cbnz	r0, .L167
1476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1368              		.loc 1 1476 0 is_stmt 0 discriminator 1
 1369 051e FFF7FEFF 		bl	ulPortSetInterruptMask
 1370              	.LVL192:
 1371              	.L168:
 1372 0522 FEE7     		b	.L168
 1373              	.LVL193:
 1374              	.L167:
1477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( ( ( xQUEUE * ) xQueue )->uxMessagesWaiting == 0 )
 1375              		.loc 1 1477 0 is_stmt 1
 1376 0524 806B     		ldr	r0, [r0, #56]
 1377              	.LVL194:
1487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1378              		.loc 1 1487 0
 1379 0526 D0F10100 		rsbs	r0, r0, #1
 1380              	.LVL195:
 1381 052a 38BF     		it	cc
 1382 052c 0020     		movcc	r0, #0
 1383 052e 08BD     		pop	{r3, pc}
 1384              		.cfi_endproc
 1385              	.LFE14:
 1387              		.align	1
 1388              		.global	xQueueIsQueueFullFromISR
 1389              		.thumb
 1390              		.thumb_func
 1392              	xQueueIsQueueFullFromISR:
 1393              	.LFB16:
1506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle xQueue )
1512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1394              		.loc 1 1512 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398              	.LVL196:
 1399 0530 08B5     		push	{r3, lr}
 1400              	.LCFI16:
 1401              		.cfi_def_cfa_offset 8
 1402              		.cfi_offset 3, -8
 1403              		.cfi_offset 14, -4
1513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1404              		.loc 1 1515 0
 1405 0532 10B9     		cbnz	r0, .L170
 1406              		.loc 1 1515 0 is_stmt 0 discriminator 1
 1407 0534 FFF7FEFF 		bl	ulPortSetInterruptMask
 1408              	.LVL197:
 1409              	.L171:
 1410 0538 FEE7     		b	.L171
 1411              	.LVL198:
 1412              	.L170:
1516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( ( ( xQUEUE * ) xQueue )->uxMessagesWaiting == ( ( xQUEUE * ) xQueue )->uxLength )
 1413              		.loc 1 1516 0 is_stmt 1
 1414 053a 826B     		ldr	r2, [r0, #56]
 1415              	.LVL199:
 1416 053c C06B     		ldr	r0, [r0, #60]
 1417              	.LVL200:
1517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
1519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else
1521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
1523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1418              		.loc 1 1526 0
 1419 053e 131A     		subs	r3, r2, r0
 1420 0540 5842     		rsbs	r0, r3, #0
 1421              	.LVL201:
 1422 0542 5841     		adcs	r0, r0, r3
 1423 0544 08BD     		pop	{r3, pc}
 1424              		.cfi_endproc
 1425              	.LFE16:
 1427              		.align	1
 1428              		.global	xQueueCRSend
 1429              		.thumb
 1430              		.thumb_func
 1432              	xQueueCRSend:
 1433              	.LFB17:
1527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRSend( xQueueHandle xQueue, const void *pvItemToQueue, portTickType xT
1532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1434              		.loc 1 1532 0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 0
 1437              		@ frame_needed = 0, uses_anonymous_args = 0
 1438              	.LVL202:
 1439 0546 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1440              	.LCFI17:
 1441              		.cfi_def_cfa_offset 24
 1442              		.cfi_offset 4, -24
 1443              		.cfi_offset 5, -20
 1444              		.cfi_offset 6, -16
 1445              		.cfi_offset 7, -12
 1446              		.cfi_offset 8, -8
 1447              		.cfi_offset 14, -4
 1448              		.loc 1 1532 0
 1449 054a 0446     		mov	r4, r0
 1450              	.LVL203:
 1451 054c 0E46     		mov	r6, r1
 1452 054e 1546     		mov	r5, r2
1533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xReturn;
1534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
1535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
1537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
1539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
1540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
1541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1453              		.loc 1 1541 0
 1454 0550 FFF7FEFF 		bl	ulPortSetInterruptMask
 1455              	.LVL204:
 1456              	.LBB12:
 1457              	.LBB13:
1494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1458              		.loc 1 1494 0
 1459 0554 FFF7FEFF 		bl	vPortEnterCritical
 1460              	.LVL205:
1496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1461              		.loc 1 1496 0
 1462 0558 D4F83880 		ldr	r8, [r4, #56]
 1463 055c E76B     		ldr	r7, [r4, #60]
 1464              	.LVL206:
1505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1465              		.loc 1 1505 0
 1466 055e FFF7FEFF 		bl	vPortExitCritical
 1467              	.LVL207:
 1468              	.LBE13:
 1469              	.LBE12:
1542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1470              		.loc 1 1543 0
 1471 0562 B845     		cmp	r8, r7
 1472 0564 0FD1     		bne	.L173
1544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
1546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				posting? */
1547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
1548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
1550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
1551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
 1473              		.loc 1 1551 0
 1474 0566 2846     		mov	r0, r5
1547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
 1475              		.loc 1 1547 0
 1476 0568 4DB1     		cbz	r5, .L174
 1477              		.loc 1 1551 0
 1478 056a 04F11001 		add	r1, r4, #16
 1479 056e FFF7FEFF 		bl	vCoRoutineAddToDelayedList
 1480              	.LVL208:
1552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
 1481              		.loc 1 1552 0
 1482 0572 0020     		movs	r0, #0
 1483 0574 FFF7FEFF 		bl	vPortClearInterruptMask
 1484              	.LVL209:
1553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
 1485              		.loc 1 1553 0
 1486 0578 6FF00304 		mvn	r4, #3
 1487              	.LVL210:
 1488 057c 22E0     		b	.L175
 1489              	.LVL211:
 1490              	.L174:
1554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
 1491              		.loc 1 1557 0
 1492 057e FFF7FEFF 		bl	vPortClearInterruptMask
 1493              	.LVL212:
1558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 1494              		.loc 1 1558 0
 1495 0582 2C46     		mov	r4, r5
 1496              	.LVL213:
 1497 0584 1EE0     		b	.L175
 1498              	.LVL214:
 1499              	.L173:
1559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1500              		.loc 1 1562 0
 1501 0586 0020     		movs	r0, #0
 1502 0588 FFF7FEFF 		bl	vPortClearInterruptMask
 1503              	.LVL215:
1563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1504              		.loc 1 1564 0
 1505 058c FFF7FEFF 		bl	ulPortSetInterruptMask
 1506              	.LVL216:
1565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 1507              		.loc 1 1566 0
 1508 0590 A26B     		ldr	r2, [r4, #56]
 1509 0592 E36B     		ldr	r3, [r4, #60]
 1510 0594 9A42     		cmp	r2, r3
 1511 0596 11D2     		bcs	.L179
1567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
1569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
 1512              		.loc 1 1569 0
 1513 0598 2046     		mov	r0, r4
 1514 059a 3146     		mov	r1, r6
 1515 059c 0022     		movs	r2, #0
 1516 059e FFF776FD 		bl	prvCopyDataToQueue
 1517              	.LVL217:
1570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
1571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
1573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1518              		.loc 1 1573 0
 1519 05a2 636A     		ldr	r3, [r4, #36]
 1520 05a4 0BB9     		cbnz	r3, .L177
 1521              	.L178:
1570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
 1522              		.loc 1 1570 0
 1523 05a6 0124     		movs	r4, #1
 1524              	.LVL218:
 1525 05a8 09E0     		b	.L176
 1526              	.LVL219:
 1527              	.L177:
1574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
1576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
1577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
1578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
1579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1528              		.loc 1 1579 0
 1529 05aa 04F12400 		add	r0, r4, #36
 1530 05ae FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1531              	.LVL220:
 1532 05b2 0028     		cmp	r0, #0
 1533 05b4 F7D0     		beq	.L178
1580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
1582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
1583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
 1534              		.loc 1 1583 0
 1535 05b6 6FF00404 		mvn	r4, #4
 1536              	.LVL221:
 1537 05ba 00E0     		b	.L176
 1538              	.LVL222:
 1539              	.L179:
1584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
 1540              		.loc 1 1589 0
 1541 05bc 0024     		movs	r4, #0
 1542              	.LVL223:
 1543              	.L176:
1590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1544              		.loc 1 1592 0
 1545 05be 0020     		movs	r0, #0
 1546 05c0 FFF7FEFF 		bl	vPortClearInterruptMask
 1547              	.LVL224:
 1548              	.L175:
1593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
1595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1549              		.loc 1 1595 0
 1550 05c4 2046     		mov	r0, r4
 1551 05c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1552              		.cfi_endproc
 1553              	.LFE17:
 1555              		.align	1
 1556              		.global	xQueueCRReceive
 1557              		.thumb
 1558              		.thumb_func
 1560              	xQueueCRReceive:
 1561              	.LFB18:
1596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRReceive( xQueueHandle xQueue, void *pvBuffer, portTickType xTicksToWa
1603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1562              		.loc 1 1603 0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 0
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
 1566              	.LVL225:
 1567 05ca F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1568              	.LCFI18:
 1569              		.cfi_def_cfa_offset 24
 1570              		.cfi_offset 3, -24
 1571              		.cfi_offset 4, -20
 1572              		.cfi_offset 5, -16
 1573              		.cfi_offset 6, -12
 1574              		.cfi_offset 7, -8
 1575              		.cfi_offset 14, -4
 1576              		.loc 1 1603 0
 1577 05cc 0446     		mov	r4, r0
 1578              	.LVL226:
 1579 05ce 0F46     		mov	r7, r1
 1580 05d0 1546     		mov	r5, r2
1604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xReturn;
1605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
1606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
1608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
1610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
1611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
1612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1581              		.loc 1 1612 0
 1582 05d2 FFF7FEFF 		bl	ulPortSetInterruptMask
 1583              	.LVL227:
1613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 )
 1584              		.loc 1 1614 0
 1585 05d6 A66B     		ldr	r6, [r4, #56]
 1586 05d8 7EB9     		cbnz	r6, .L184
1615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
1617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				leave with nothing? */
1618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
1619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
1621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
1622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
 1587              		.loc 1 1622 0
 1588 05da 2846     		mov	r0, r5
1618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
 1589              		.loc 1 1618 0
 1590 05dc 4DB1     		cbz	r5, .L185
 1591              		.loc 1 1622 0
 1592 05de 04F12401 		add	r1, r4, #36
 1593 05e2 FFF7FEFF 		bl	vCoRoutineAddToDelayedList
 1594              	.LVL228:
1623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
 1595              		.loc 1 1623 0
 1596 05e6 3046     		mov	r0, r6
 1597 05e8 FFF7FEFF 		bl	vPortClearInterruptMask
 1598              	.LVL229:
1624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
 1599              		.loc 1 1624 0
 1600 05ec 6FF00304 		mvn	r4, #3
 1601              	.LVL230:
 1602 05f0 2BE0     		b	.L186
 1603              	.LVL231:
 1604              	.L185:
1625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
 1605              		.loc 1 1628 0
 1606 05f2 FFF7FEFF 		bl	vPortClearInterruptMask
 1607              	.LVL232:
1629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 1608              		.loc 1 1629 0
 1609 05f6 2C46     		mov	r4, r5
 1610              	.LVL233:
 1611 05f8 27E0     		b	.L186
 1612              	.LVL234:
 1613              	.L184:
1630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1614              		.loc 1 1633 0
 1615 05fa 0020     		movs	r0, #0
 1616 05fc FFF7FEFF 		bl	vPortClearInterruptMask
 1617              	.LVL235:
1634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1618              		.loc 1 1635 0
 1619 0600 FFF7FEFF 		bl	ulPortSetInterruptMask
 1620              	.LVL236:
1636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1621              		.loc 1 1637 0
 1622 0604 A36B     		ldr	r3, [r4, #56]
 1623 0606 E3B1     		cbz	r3, .L191
1638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
1640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1624              		.loc 1 1640 0
 1625 0608 E368     		ldr	r3, [r4, #12]
 1626 060a 226C     		ldr	r2, [r4, #64]
1641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 1627              		.loc 1 1641 0
 1628 060c 6168     		ldr	r1, [r4, #4]
1640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1629              		.loc 1 1640 0
 1630 060e 9B18     		adds	r3, r3, r2
 1631              		.loc 1 1641 0
 1632 0610 8B42     		cmp	r3, r1
1640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1633              		.loc 1 1640 0
 1634 0612 E360     		str	r3, [r4, #12]
1642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxQueue->pcReadFrom = pxQueue->pcHead;
 1635              		.loc 1 1643 0
 1636 0614 24BF     		itt	cs
 1637 0616 2368     		ldrcs	r3, [r4, #0]
 1638 0618 E360     		strcs	r3, [r4, #12]
1644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
 1639              		.loc 1 1645 0
 1640 061a A36B     		ldr	r3, [r4, #56]
1646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize )
 1641              		.loc 1 1646 0
 1642 061c E168     		ldr	r1, [r4, #12]
1645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
 1643              		.loc 1 1645 0
 1644 061e 013B     		subs	r3, r3, #1
 1645 0620 A363     		str	r3, [r4, #56]
 1646              		.loc 1 1646 0
 1647 0622 3846     		mov	r0, r7
 1648 0624 FFF7FEFF 		bl	memcpy
 1649              	.LVL237:
1647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
1649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
1651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1650              		.loc 1 1651 0
 1651 0628 2369     		ldr	r3, [r4, #16]
 1652 062a 0BB9     		cbnz	r3, .L189
 1653              	.L190:
1648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
 1654              		.loc 1 1648 0
 1655 062c 0124     		movs	r4, #1
 1656              	.LVL238:
 1657 062e 09E0     		b	.L187
 1658              	.LVL239:
 1659              	.L189:
1652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
1654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
1655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
1656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
1657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1660              		.loc 1 1657 0
 1661 0630 04F11000 		add	r0, r4, #16
 1662 0634 FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1663              	.LVL240:
 1664 0638 0028     		cmp	r0, #0
 1665 063a F7D0     		beq	.L190
1658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
 1666              		.loc 1 1659 0
 1667 063c 6FF00404 		mvn	r4, #4
 1668              	.LVL241:
 1669 0640 00E0     		b	.L187
 1670              	.LVL242:
 1671              	.L191:
1660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
 1672              		.loc 1 1665 0
 1673 0642 1C46     		mov	r4, r3
 1674              	.LVL243:
 1675              	.L187:
1666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1676              		.loc 1 1668 0
 1677 0644 0020     		movs	r0, #0
 1678 0646 FFF7FEFF 		bl	vPortClearInterruptMask
 1679              	.LVL244:
 1680              	.L186:
1669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
1671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1681              		.loc 1 1671 0
 1682 064a 2046     		mov	r0, r4
 1683 064c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1684              		.cfi_endproc
 1685              	.LFE18:
 1687              		.align	1
 1688              		.global	xQueueCRSendFromISR
 1689              		.thumb
 1690              		.thumb_func
 1692              	xQueueCRSendFromISR:
 1693              	.LFB19:
1672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRSendFromISR( xQueueHandle xQueue, const void *pvItemToQueue, signed p
1679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1694              		.loc 1 1679 0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 0
 1697              		@ frame_needed = 0, uses_anonymous_args = 0
 1698              	.LVL245:
 1699 064e 38B5     		push	{r3, r4, r5, lr}
 1700              	.LCFI19:
 1701              		.cfi_def_cfa_offset 16
 1702              		.cfi_offset 3, -16
 1703              		.cfi_offset 4, -12
 1704              		.cfi_offset 5, -8
 1705              		.cfi_offset 14, -4
 1706              		.loc 1 1679 0
 1707 0650 1546     		mov	r5, r2
1680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
1681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
1683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
1685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
1686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 1708              		.loc 1 1686 0
 1709 0652 C36B     		ldr	r3, [r0, #60]
 1710 0654 826B     		ldr	r2, [r0, #56]
 1711              	.LVL246:
 1712 0656 9A42     		cmp	r2, r3
1679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1713              		.loc 1 1679 0
 1714 0658 0446     		mov	r4, r0
 1715              		.loc 1 1686 0
 1716 065a 0CD2     		bcs	.L197
1687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
 1717              		.loc 1 1688 0
 1718 065c 0022     		movs	r2, #0
 1719 065e FFF716FD 		bl	prvCopyDataToQueue
 1720              	.LVL247:
1689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
1691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
1692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
 1721              		.loc 1 1692 0
 1722 0662 45B9     		cbnz	r5, .L197
1693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1723              		.loc 1 1694 0
 1724 0664 636A     		ldr	r3, [r4, #36]
 1725 0666 33B1     		cbz	r3, .L197
1695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1726              		.loc 1 1696 0
 1727 0668 04F12400 		add	r0, r4, #36
 1728 066c FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1729              	.LVL248:
 1730 0670 051C     		adds	r5, r0, #0
 1731              	.LVL249:
 1732 0672 18BF     		it	ne
 1733 0674 0125     		movne	r5, #1
 1734              	.L197:
1697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						return pdTRUE;
1699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
1705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1735              		.loc 1 1705 0
 1736 0676 2846     		mov	r0, r5
 1737 0678 38BD     		pop	{r3, r4, r5, pc}
 1738              		.cfi_endproc
 1739              	.LFE19:
 1741              		.align	1
 1742              		.global	xQueueCRReceiveFromISR
 1743              		.thumb
 1744              		.thumb_func
 1746              	xQueueCRReceiveFromISR:
 1747              	.LFB20:
1706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRReceiveFromISR( xQueueHandle xQueue, void *pvBuffer, signed portBASE_
1713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1748              		.loc 1 1713 0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 0
 1751              		@ frame_needed = 0, uses_anonymous_args = 0
 1752              	.LVL250:
1714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xReturn;
1715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * pxQueue;
1716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
1718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
1720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
1721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1753              		.loc 1 1721 0
 1754 067a 836B     		ldr	r3, [r0, #56]
1713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1755              		.loc 1 1713 0
 1756 067c 70B5     		push	{r4, r5, r6, lr}
 1757              	.LCFI20:
 1758              		.cfi_def_cfa_offset 16
 1759              		.cfi_offset 4, -16
 1760              		.cfi_offset 5, -12
 1761              		.cfi_offset 6, -8
 1762              		.cfi_offset 14, -4
1713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1763              		.loc 1 1713 0
 1764 067e 0446     		mov	r4, r0
 1765 0680 1546     		mov	r5, r2
 1766              		.loc 1 1721 0
 1767 0682 FBB1     		cbz	r3, .L207
1722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
1724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1768              		.loc 1 1724 0
 1769 0684 C368     		ldr	r3, [r0, #12]
 1770 0686 026C     		ldr	r2, [r0, #64]
 1771              	.LVL251:
1725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 1772              		.loc 1 1725 0
 1773 0688 4668     		ldr	r6, [r0, #4]
1724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1774              		.loc 1 1724 0
 1775 068a 9B18     		adds	r3, r3, r2
 1776              		.loc 1 1725 0
 1777 068c B342     		cmp	r3, r6
1724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1778              		.loc 1 1724 0
 1779 068e C360     		str	r3, [r0, #12]
1726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pcReadFrom = pxQueue->pcHead;
 1780              		.loc 1 1727 0
 1781 0690 24BF     		itt	cs
 1782 0692 0368     		ldrcs	r3, [r0, #0]
 1783 0694 C360     		strcs	r3, [r0, #12]
1728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 1784              		.loc 1 1729 0
 1785 0696 836B     		ldr	r3, [r0, #56]
 1786 0698 013B     		subs	r3, r3, #1
 1787 069a 8363     		str	r3, [r0, #56]
1730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 1788              		.loc 1 1730 0
 1789 069c 0846     		mov	r0, r1
 1790              	.LVL252:
 1791 069e E168     		ldr	r1, [r4, #12]
 1792              	.LVL253:
 1793 06a0 FFF7FEFF 		bl	memcpy
 1794              	.LVL254:
1731:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
 1795              		.loc 1 1732 0
 1796 06a4 2B68     		ldr	r3, [r5, #0]
 1797 06a6 0BB1     		cbz	r3, .L205
 1798              	.L206:
1733:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1735:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1737:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
1739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1740:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1742:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1743:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1799              		.loc 1 1743 0
 1800 06a8 0120     		movs	r0, #1
 1801 06aa 70BD     		pop	{r4, r5, r6, pc}
 1802              	.L205:
1734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1803              		.loc 1 1734 0
 1804 06ac 2369     		ldr	r3, [r4, #16]
 1805 06ae 002B     		cmp	r3, #0
 1806 06b0 FAD0     		beq	.L206
1736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1807              		.loc 1 1736 0
 1808 06b2 04F11000 		add	r0, r4, #16
 1809 06b6 FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1810              	.LVL255:
 1811 06ba 0028     		cmp	r0, #0
 1812 06bc F4D0     		beq	.L206
1738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
 1813              		.loc 1 1738 0
 1814 06be 0120     		movs	r0, #1
 1815 06c0 2860     		str	r0, [r5, #0]
 1816 06c2 70BD     		pop	{r4, r5, r6, pc}
 1817              	.LVL256:
 1818              	.L207:
1744:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1745:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1746:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 1819              		.loc 1 1747 0
 1820 06c4 1846     		mov	r0, r3
 1821              	.LVL257:
1748:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1749:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
1751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1822              		.loc 1 1751 0
 1823 06c6 70BD     		pop	{r4, r5, r6, pc}
 1824              		.cfi_endproc
 1825              	.LFE20:
 1827              		.align	1
 1828              		.global	vQueueWaitForMessageRestricted
 1829              		.thumb
 1830              		.thumb_func
 1832              	vQueueWaitForMessageRestricted:
 1833              	.LFB21:
1752:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1755:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
1757:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
1759:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE ux;
1761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1762:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
1763:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		a free slot. */
1764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZ
1765:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1768:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
1769:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1770:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
1771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				break;
1772:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1774:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1776:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
1777:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1779:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
1780:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1781:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	static void prvQueueUnregisterQueue( xQueueHandle xQueue )
1782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1783:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE ux;
1784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1785:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
1786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		registry. */
1787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZ
1788:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1789:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
1790:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1791:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
1792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
1793:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				break;
1794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1796:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1797:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1798:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
1800:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1802:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TIMERS == 1 )
1803:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
1805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1834              		.loc 1 1805 0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 1838              	.LVL258:
 1839 06c8 38B5     		push	{r3, r4, r5, lr}
 1840              	.LCFI21:
 1841              		.cfi_def_cfa_offset 16
 1842              		.cfi_offset 3, -16
 1843              		.cfi_offset 4, -12
 1844              		.cfi_offset 5, -8
 1845              		.cfi_offset 14, -4
 1846              		.loc 1 1805 0
 1847 06ca 0446     		mov	r4, r0
 1848              	.LVL259:
 1849 06cc 0D46     		mov	r5, r1
1806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
1807:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
1809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* This function should not be called by application code hence the
1811:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1812:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
1813:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		It can result in vListInsert() being called on a list that can only
1814:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
1815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
1816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		section. */
1817:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1818:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
1819:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
1820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
1821:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
1822:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
1823:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
1824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1850              		.loc 1 1824 0
 1851 06ce FFF7FEFF 		bl	vPortEnterCritical
 1852              	.LVL260:
 1853 06d2 636C     		ldr	r3, [r4, #68]
 1854 06d4 0133     		adds	r3, r3, #1
 1855 06d6 01D1     		bne	.L215
 1856              		.loc 1 1824 0 is_stmt 0 discriminator 1
 1857 06d8 0023     		movs	r3, #0
 1858 06da 6364     		str	r3, [r4, #68]
 1859              	.L215:
 1860              		.loc 1 1824 0 discriminator 2
 1861 06dc A36C     		ldr	r3, [r4, #72]
 1862 06de 0133     		adds	r3, r3, #1
 1863 06e0 01D1     		bne	.L216
 1864              		.loc 1 1824 0 discriminator 3
 1865 06e2 0023     		movs	r3, #0
 1866 06e4 A364     		str	r3, [r4, #72]
 1867              	.L216:
 1868              		.loc 1 1824 0 discriminator 4
 1869 06e6 FFF7FEFF 		bl	vPortExitCritical
 1870              	.LVL261:
1825:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 1871              		.loc 1 1825 0 is_stmt 1 discriminator 4
 1872 06ea A36B     		ldr	r3, [r4, #56]
 1873 06ec 23B9     		cbnz	r3, .L217
1826:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
1828:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1874              		.loc 1 1828 0
 1875 06ee 04F12400 		add	r0, r4, #36
 1876 06f2 2946     		mov	r1, r5
 1877 06f4 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 1878              	.LVL262:
 1879              	.L217:
1829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvUnlockQueue( pxQueue );
 1880              		.loc 1 1830 0
 1881 06f8 2046     		mov	r0, r4
1831:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1882              		.loc 1 1831 0
 1883 06fa BDE83840 		pop	{r3, r4, r5, lr}
1830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvUnlockQueue( pxQueue );
 1884              		.loc 1 1830 0
 1885 06fe FFF77FBC 		b	prvUnlockQueue
 1886              	.LVL263:
 1887              		.cfi_endproc
 1888              	.LFE21:
 1890              	.Letext0:
 1891              		.file 2 "/opt/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2
 1892              		.file 3 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/portable/GCC/ARM_CM4F/p
 1893              		.file 4 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/list.h"
 1894              		.file 5 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/task.h"
 1895              		.file 6 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/queue.h"
 1896              		.file 7 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/portable.h"
 1897              		.file 8 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/croutine.h"
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
     /tmp/ccuK9Uhk.s:20     .text:00000000 $t
     /tmp/ccuK9Uhk.s:24     .text:00000000 prvUnlockQueue
     /tmp/ccuK9Uhk.s:122    .text:00000068 prvCopyDataFromQueue
     /tmp/ccuK9Uhk.s:175    .text:0000008e prvCopyDataToQueue
     /tmp/ccuK9Uhk.s:272    .text:000000e6 xQueueGenericReset
     /tmp/ccuK9Uhk.s:365    .text:0000014a xQueueGenericCreate
     /tmp/ccuK9Uhk.s:439    .text:0000018a xQueueGenericSend
     /tmp/ccuK9Uhk.s:653    .text:00000280 xQueueCreateMutex
     /tmp/ccuK9Uhk.s:738    .text:000002ce xQueueGenericSendFromISR
     /tmp/ccuK9Uhk.s:858    .text:00000340 xQueueGenericReceive
     /tmp/ccuK9Uhk.s:1116   .text:00000468 xQueueReceiveFromISR
     /tmp/ccuK9Uhk.s:1236   .text:000004d6 uxQueueMessagesWaiting
     /tmp/ccuK9Uhk.s:1278   .text:000004f0 uxQueueMessagesWaitingFromISR
     /tmp/ccuK9Uhk.s:1312   .text:000004fe vQueueDelete
     /tmp/ccuK9Uhk.s:1354   .text:0000051a xQueueIsQueueEmptyFromISR
     /tmp/ccuK9Uhk.s:1392   .text:00000530 xQueueIsQueueFullFromISR
     /tmp/ccuK9Uhk.s:1432   .text:00000546 xQueueCRSend
     /tmp/ccuK9Uhk.s:1560   .text:000005ca xQueueCRReceive
     /tmp/ccuK9Uhk.s:1692   .text:0000064e xQueueCRSendFromISR
     /tmp/ccuK9Uhk.s:1746   .text:0000067a xQueueCRReceiveFromISR
     /tmp/ccuK9Uhk.s:1832   .text:000006c8 vQueueWaitForMessageRestricted
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.d481a9f4eba3ec0ceb0050fd0b2feec2
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.22eafe60f8565d898cbb44515781114b
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.projdefs.h.76.214f319a5937dae232f0ee2912b07e1d
                           .group:00000000 wm4.FreeRTOSConfig.h.79.5ce50f1f04ae36d94916fa991aa4b8d7
                           .group:00000000 wm4.portmacro.h.77.0810e0eb8c6edf5adf0d27242484a945
                           .group:00000000 wm4.portable.h.332.e25bf3f97ebf50a0f90736144cb8c3f8
                           .group:00000000 wm4.mpu_wrappers.h.76.3abcfc7ebb6d78909ee0b4ad2f20f282
                           .group:00000000 wm4.FreeRTOS.h.159.741cbf33489b2c951994722716e9692e
                           .group:00000000 wm4.list.h.105.6a6307ce3396638a078c02ff83387dc6
                           .group:00000000 wm4.task.h.94.33ec4de8c3f825901c54e6cf58507761
                           .group:00000000 wm4.queue.h.77.c405a8575cf45ee56672246904131fa4
                           .group:00000000 wm4.croutine.h.76.348a46e106a704888b711d08f2a8ea48

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vTaskMissedYield
vPortExitCritical
memcpy
vTaskPriorityDisinherit
ulPortSetInterruptMask
vPortYield
vListInitialise
pvPortMalloc
vPortFree
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortClearInterruptMask
xTaskGetCurrentTaskHandle
vTaskPriorityInherit
vCoRoutineAddToDelayedList
xCoRoutineRemoveFromEventList
vTaskPlaceOnEventListRestricted
