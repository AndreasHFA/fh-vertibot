   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"queue.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	1
  19              		.thumb
  20              		.thumb_func
  22              	prvUnlockQueue:
  23              	.LFB12:
  24              		.file 1 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c"
   1:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
   2:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FreeRTOS V7.4.0 - Copyright (C) 2013 Real Time Engineers Ltd.
   3:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
   4:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FEATURES AND PORTS ARE ADDED TO FREERTOS ALL THE TIME.  PLEASE VISIT
   5:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
   7:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
   8:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
   9:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
  10:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
  11:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    available.                                                         *
  12:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  13:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  14:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    ensuring you get running as quickly as possible and with an        *
  15:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  16:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  17:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    professional grade, cross platform, de facto standard solutions    *
  18:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    for microcontrollers - completely free of charge!                  *
  19:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  20:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  21:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  22:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  23:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  24:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
  25:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  26:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  27:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     This file is part of the FreeRTOS distribution.
  28:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  29:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  30:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  31:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  32:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  33:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     >>>>>>NOTE<<<<<< The modification to the GPL is included to allow you to
  34:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  35:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     provide the source code for proprietary components outside of the FreeRTOS
  36:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     kernel.
  37:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  38:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  39:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  40:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  41:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     details. You should have received a copy of the GNU General Public License
  42:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     and the FreeRTOS license exception along with FreeRTOS; if not itcan be
  43:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     viewed here: http://www.freertos.org/a00114.html and also obtained by
  44:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     writing to Real Time Engineers Ltd., contact details for whom are available
  45:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     on the FreeRTOS WEB site.
  46:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  47:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     1 tab == 4 spaces!
  48:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  49:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
  50:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  51:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  52:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    not run, what could be wrong?"                                     *
  53:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  54:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  55:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****      *                                                                       *
  56:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     ***************************************************************************
  57:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  58:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  59:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions, 
  60:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     license and Real Time Engineers Ltd. contact details.
  61:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  62:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  63:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, and our new
  64:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     fully thread aware and reentrant UDP/IP stack.
  65:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  66:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High 
  67:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     Integrity Systems, who sell the code with commercial support, 
  68:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     indemnification and middleware, under the OpenRTOS brand.
  69:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     
  70:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety 
  71:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and 
  72:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****     mission critical applications that require provable dependability.
  73:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** */
  74:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  75:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  76:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include <string.h>
  77:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  78:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  79:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  80:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  81:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  82:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  83:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  84:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include "task.h"
  85:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #include "queue.h"
  86:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  87:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  88:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  89:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif
  90:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  91:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  92:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  93:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and xTxLock structure members. */
  94:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( signed portBASE_TYPE ) -1 )
  95:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( signed portBASE_TYPE ) 0 )
  96:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  97:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueERRONEOUS_UNBLOCK			( -1 )
  98:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
  99:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Effectively make a union out of the xQUEUE structure. */
 100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
 101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
 102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define uxRecursiveCallCount			pcReadFrom
 103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an items size of
 106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** zero. */
 107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( unsigned portBASE_TYPE ) 0 )
 108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueDONT_BLOCK					 ( ( portTickType ) 0U )
 109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( portTickType ) 0U )
 110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
 114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.
 115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
 117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcHead;					/*< Points to the beginning of the queue storage area. */
 119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more b
 120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcWriteTo;					/*< Points to the free next place in the storage area. */
 122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcReadFrom;				/*< Points to the last place that a queued item was read from. */
 123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xList xTasksWaitingToSend;				/*< List of tasks that are blocked waiting to post onto this queue. 
 125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xList xTasksWaitingToReceive;			/*< List of tasks that are blocked waiting to read from this queue
 126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	volatile unsigned portBASE_TYPE uxMessagesWaiting;/*< The number of items currently in the queue. 
 128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE uxLength;		/*< The length of the queue defined as the number of items it wi
 129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE uxItemSize;		/*< The size of each items that the queue will hold. */
 130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	volatile signed portBASE_TYPE xRxLock;	/*< Stores the number of items received from the queue (rem
 132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	volatile signed portBASE_TYPE xTxLock;	/*< Stores the number of items transmitted to the queue (ad
 133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		unsigned char ucQueueNumber;
 136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		unsigned char ucQueueType;
 137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#endif
 138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#endif
 142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** } xQUEUE;
 144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	more user friendly. */
 155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		signed char *pcQueueName;
 158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xQueueHandle xHandle;
 159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of xQueueRegistryItem structures.
 162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueRegistryItem xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Removes a queue from the registry by simply setting the pcQueueName
 167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	member to NULL. */
 168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	static void prvQueueUnregisterQueue( xQueueHandle xQueue ) PRIVILEGED_FUNCTION;
 169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( xQUEUE *pxQueue ) PRIVILEGED_FUNCTION;
 181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  *
 185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue ) PRIVILEGED_FUNCTION;
 188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  *
 192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue ) PRIVILEGED_FUNCTION;
 195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * back of the queue.
 199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
 201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer ) PRIVILEGED_FUNCTIO
 206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/*
 209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	 */
 212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	static portBASE_TYPE prvNotifyQueueSetContainer( xQUEUE *pxQueue, portBASE_TYPE xCopyPosition );
 213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif
 214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*
 218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c ****  */
 221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{														\
 224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->xRxLock == queueUNLOCKED )			\
 225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{													\
 226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxQueue )->xRxLock = queueLOCKED_UNMODIFIED;	\
 227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}													\
 228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->xTxLock == queueUNLOCKED )			\
 229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{													\
 230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxQueue )->xTxLock = queueLOCKED_UNMODIFIED;	\
 231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}													\
 232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}														\
 233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
 237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
 239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) *
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to	write to
 257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	versions. */
 278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return pdPASS;
 279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxIt
 283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxNewQueue;
 285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** size_t xQueueSizeInBytes;
 286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQueueHandle xReturn = NULL;
 287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Allocate the new queue structure. */
 293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Create the list of pointers to queue items.  The queue is one byte
 299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			longer than asked for to make wrap checking easier/faster. */
 300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxNewQueue->pcHead != NULL )
 304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Initialise the queue members as described above where the
 306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				queue type is defined. */
 307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxLength = uxQueueLength;
 308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxItemSize = uxItemSize;
 309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueGenericReset( pxNewQueue, pdTRUE );
 310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_TRACE_FACILITY == 1 )
 312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxNewQueue->ucQueueType = ucQueueType;
 314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_TRACE_FACILITY */
 316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if( configUSE_QUEUE_SETS == 1 )
 318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxNewQueue->pxQueueSetContainer = NULL;
 320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceQUEUE_CREATE( pxNewQueue );
 324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pxNewQueue;
 325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceQUEUE_CREATE_FAILED( ucQueueType );
 329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vPortFree( pxNewQueue );
 330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xReturn );
 335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
 337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
 343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxNewQueue;
 345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Allocate the new queue structure. */
 351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Information required for priority inheritance. */
 355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Queues used as a mutex no data is actually copied into or out
 359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			of the queue. */
 360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcReadFrom = NULL;
 362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Each mutex has a length of 1 (like a binary semaphore) and
 364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			an item size of 0 as nothing is actually copied into or out
 365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			of the mutex. */
 366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucQueueType = ucQueueType;
 375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#endif
 377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
 379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->pxQueueSetContainer = NULL;
 381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#endif
 383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start with the correct state. */
 385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxNewQueue );
 399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
 408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is is a good way of determining if the
 413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( ( ( xQUEUE * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( xQUEUE * ) xSemaphore )->pxMutexHolder;
 421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return pxReturn;
 430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif
 433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle xMutex )
 438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xReturn;
 440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxMutex;
 441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxMutex = ( xQUEUE * ) xMutex;
 443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
 452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxMutex->uxRecursiveCallCount )--;
 461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Have we unwound the call count? */
 463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxMutex->uxRecursiveCallCount == 0 )
 464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* We cannot give the mutex because we are not the holder. */
 475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
 481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle xMutex, portTickType xBlockTime )
 489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portBASE_TYPE xReturn;
 491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxMutex;
 492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxMutex = ( xQUEUE * ) xMutex;
 494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
 502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( pxMutex->uxRecursiveCallCount )++;
 504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xBlockTime, pdFALSE );
 509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if we successfully obtained the mutex,
 511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			we may have blocked to reach here. */
 512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xReturn == pdPASS )
 513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( pxMutex->uxRecursiveCallCount )++;
 515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
 523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_COUNTING_SEMAPHORES == 1 )
 529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE
 531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQueueHandle xHandle;
 533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM
 535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( ( xQUEUE * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( xHandle );
 548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xHandle;
 549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_COUNTING_SEMAPHORES */
 552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, port
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xTimeOutType xTimeOut;
 558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
 559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	for( ;; )
 568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  To be running we must be
 572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the highest priority task wanting to access the queue. */
 573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
 591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							takes care of that. */
 619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Return to the original privilege level before exiting the
 628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				function. */
 629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
 630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the function. */
 641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				remove this task from the event	list again - but as the
 672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Try again. */
 689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
 694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Return to the original privilege level before exiting the
 700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			function. */
 701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueAltGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, 
 711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xTimeOutType xTimeOut;
 714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
 715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
 717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxQueue );
 718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE )
 719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ;; )
 721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Is there room on the queue now?  To be running we must be
 725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				the highest priority task wanting to access the queue. */
 726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND( pxQueue );
 729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 731:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 733:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 735:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 737:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							our own so yield immediately. */
 739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 740:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 742:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 743:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 744:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return pdPASS;
 745:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 746:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 748:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 749:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						return errQUEUE_FULL;
 752:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 755:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xEntryTimeSet = pdTRUE;
 757:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 759:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 762:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 763:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 765:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( prvIsQueueFull( pxQueue ) != pdFALSE )
 767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 768:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 769:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 770:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portYIELD_WITHIN_API();
 771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 772:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 774:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 776:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 777:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 779:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 780:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 781:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 783:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 785:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 788:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 789:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueAltGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTick
 790:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 791:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xTimeOutType xTimeOut;
 793:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed char *pcOriginalReadPosition;
 794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
 795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 796:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
 797:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxQueue );
 798:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U )
 799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 800:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ;; )
 801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 802:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 803:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Remember our read position in case we are just peeking. */
 807:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pcOriginalReadPosition = pxQueue->pcReadFrom;
 808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					prvCopyDataFromQueue( pxQueue, pvBuffer );
 810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 811:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xJustPeeking == pdFALSE )
 812:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 813:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceQUEUE_RECEIVE( pxQueue );
 814:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* We are actually removing data. */
 816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						--( pxQueue->uxMessagesWaiting );
 817:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 818:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 819:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 821:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 822:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* Record the information required to implement
 823:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								priority inheritance should it become necessary. */
 824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 825:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 826:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#endif
 828:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 831:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 832:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 833:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 834:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 835:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 836:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 837:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
 838:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 839:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceQUEUE_PEEK( pxQueue );
 840:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 841:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* We are not removing the data, so reset our read
 842:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						pointer. */
 843:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						pxQueue->pcReadFrom = pcOriginalReadPosition;
 844:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 845:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The data is being left in the queue, so see if there are
 846:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						any other tasks waiting for the data. */
 847:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 848:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 849:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* Tasks that are removed from the event list will get added to
 850:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							the pending ready list as the scheduler is still suspended. */
 851:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 852:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 853:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority than this task. */
 854:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 855:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 856:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 857:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 858:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 859:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 860:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 861:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return pdPASS;
 862:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 863:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 864:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 865:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTicksToWait == ( portTickType ) 0 )
 866:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 867:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 868:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceQUEUE_RECEIVE_FAILED( pxQueue );
 869:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						return errQUEUE_EMPTY;
 870:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 871:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 872:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 873:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 874:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xEntryTimeSet = pdTRUE;
 875:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 876:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 877:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 878:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 879:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 880:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 881:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 882:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 883:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 884:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 885:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 886:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 887:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 888:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 889:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 890:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 891:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 892:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portENTER_CRITICAL();
 893:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								{
 894:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 									vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 895:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								}
 896:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								portEXIT_CRITICAL();
 897:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 898:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 899:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						#endif
 900:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 901:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 902:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portYIELD_WITHIN_API();
 903:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 904:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 905:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
 906:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 907:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 908:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 909:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
 910:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 911:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 912:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 913:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
 914:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 915:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 916:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 917:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 918:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 919:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 920:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueu
 921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 922:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
 923:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
 924:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
 925:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 926:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
 927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 929:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 930:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except we don't block if there is no room
 931:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	in the queue.  Also we don't directly wake a task that was blocked on a
 932:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	queue read, instead we return a flag to say whether a context switch is
 933:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	required or not (i.e. has a task with a higher priority than us been woken
 934:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	by this	post). */
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 936:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 938:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
 939:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 940:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 941:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 942:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
 943:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* If the queue is locked we do not alter the event list.  This will
 944:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 945:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 946:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 947:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 948:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 949:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 950:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 951:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 952:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 953:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 954:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 955:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 956:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 957:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 958:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 959:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 960:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 961:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 962:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
 963:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 964:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 965:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 966:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 967:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 968:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so record that a
 969:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								context	switch is required. */
 970:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
 971:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								{
 972:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
 973:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								}
 974:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 975:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 976:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 977:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 978:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 979:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
 980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 981:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
 982:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 983:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
 984:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
 985:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							context	switch is required. */
 986:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 987:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							{
 988:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 989:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							}
 990:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
 991:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
 992:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
 993:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 994:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
 995:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
 996:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
 997:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
 998:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
 999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xTxLock );
1000:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1001:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1003:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1004:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1005:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1006:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1007:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1008:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1009:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1010:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1011:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1012:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1013:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1014:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1015:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1016:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType
1017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1018:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xEntryTimeSet = pdFALSE;
1019:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xTimeOutType xTimeOut;
1020:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed char *pcOriginalReadPosition;
1021:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
1022:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1023:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
1024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
1026:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1027:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1028:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1029:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1030:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1031:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	for( ;; )
1032:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1033:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1034:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1035:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running we must be
1036:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			the highest priority task wanting to access the queue. */
1037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1038:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1039:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Remember our read position in case we are just peeking. */
1040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->pcReadFrom;
1041:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1043:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
1045:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1046:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1047:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1048:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* We are actually removing data. */
1049:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					--( pxQueue->uxMessagesWaiting );
1050:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1051:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1052:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1053:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1054:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1055:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* Record the information required to implement
1056:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							priority inheritance should it become necessary. */
1057:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
1058:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1059:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1060:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					#endif
1061:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1063:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1064:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
1065:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1066:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
1067:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1068:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1069:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1070:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1071:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1072:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1073:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1074:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The data is not being removed, so reset the read
1075:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pointer. */
1076:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxQueue->pcReadFrom = pcOriginalReadPosition;
1077:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1078:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1079:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					any other tasks waiting for the data. */
1080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1081:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1082:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* Tasks that are removed from the event list will get added to
1083:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						the pending ready list as the scheduler is still suspended. */
1084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1085:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1086:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1087:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
1088:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1089:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1090:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1091:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1092:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
1094:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1095:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1096:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
1098:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1099:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1100:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1102:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1103:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1104:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1106:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1107:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1108:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1110:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1111:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1112:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1113:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1115:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1116:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1117:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1118:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1121:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1122:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1124:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1126:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1127:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1128:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1129:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1130:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1132:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portENTER_CRITICAL();
1134:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1136:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portEXIT_CRITICAL();
1138:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1139:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1140:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				#endif
1141:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1145:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1147:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1148:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1149:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1150:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1151:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Try again. */
1152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1154:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1155:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1156:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1157:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1160:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
1161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_EMPTY;
1162:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1163:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1165:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1166:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1167:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle xQueue, void * const pvBuffer, signed portB
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1169:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1170:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1171:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
1172:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1173:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
1174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
1176:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1178:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1179:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. */
1180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
1181:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1182:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1183:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
1186:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1187:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* If the queue is locked we will not modify the event list.  Instead
1188:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			we update the lock count so the task that unlocks the queue will know
1189:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			that an ISR has removed data while the queue was locked. */
1190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
1191:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1193:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1195:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1196:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1197:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						force a context switch. */
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1199:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1201:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1202:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1203:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1204:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1205:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1206:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1207:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1208:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xRxLock );
1210:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1211:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1213:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1214:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1215:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1217:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1218:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1219:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1221:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1222:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1224:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1225:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1226:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle xQueue )
1227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1228:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxReturn;
1229:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1231:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
1234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1235:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1236:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return uxReturn;
1237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1238:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1239:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1240:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle xQueue )
1241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1242:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** unsigned portBASE_TYPE uxReturn;
1243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
1247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return uxReturn;
1249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1251:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** void vQueueDelete( xQueueHandle xQueue )
1253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1254:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** xQUEUE *pxQueue;
1255:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1256:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	pxQueue = ( xQUEUE * ) xQueue;
1257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1258:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1260:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1262:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvQueueUnregisterQueue( pxQueue );
1263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1264:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	#endif
1265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue->pcHead );
1266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
1267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1268:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1269:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1272:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue )
1273:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return ( ( xQUEUE * ) xQueue )->ucQueueNumber;
1275:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1276:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1277:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1278:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1280:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1281:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1282:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( xQueueHandle xQueue, unsigned char ucQueueNumber )
1283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1284:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		( ( xQUEUE * ) xQueue )->ucQueueNumber = ucQueueNumber;
1285:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1286:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1287:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1288:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1289:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1290:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1291:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1292:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned char ucQueueGetQueueType( xQueueHandle xQueue )
1293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1294:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return ( ( xQUEUE * ) xQueue )->ucQueueType;
1295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1297:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1298:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1299:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
1303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1304:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1305:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
1309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1311:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1312:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1313:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		#endif
1314:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1316:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
1318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
1320:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1322:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1323:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1324:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else
1325:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
1329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1331:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1332:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1333:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	++( pxQueue->uxMessagesWaiting );
1335:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1336:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1338:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
1341:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
1343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
1344:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom = pxQueue->pcHead;
1346:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
1348:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1350:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( xQUEUE *pxQueue )
1353:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
  25              		.loc 1 1353 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 38B5     		push	{r3, r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 3, -16
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37              		.loc 1 1353 0
  38 0002 0446     		mov	r4, r0
1354:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1357:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1358:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1359:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	updated. */
1360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1362:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
1364:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1365:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
1367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1371:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1372:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1373:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1374:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1375:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						A context switch is required. */
1376:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1377:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1378:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1379:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1380:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1381:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get added to
1382:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the pending ready list as the scheduler is still suspended. */
1383:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1384:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						{
1387:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1388:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1389:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
1390:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						}
1391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1392:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					else
1393:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1394:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						break;
1395:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1396:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1397:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1399:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1401:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1403:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1404:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  39              		.loc 1 1404 0
  40 0004 04F12405 		add	r5, r4, #36
1360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  41              		.loc 1 1360 0
  42 0008 FFF7FEFF 		bl	vPortEnterCritical
  43              	.LVL1:
1363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  44              		.loc 1 1363 0
  45 000c 0AE0     		b	.L2
  46              	.L5:
1402:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  47              		.loc 1 1402 0
  48 000e 636A     		ldr	r3, [r4, #36]
  49 0010 5BB1     		cbz	r3, .L3
  50              		.loc 1 1404 0
  51 0012 2846     		mov	r0, r5
  52 0014 FFF7FEFF 		bl	xTaskRemoveFromEventList
  53              	.LVL2:
  54 0018 08B1     		cbz	r0, .L4
1405:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1406:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that a
1407:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						context	switch is required. */
1408:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
  55              		.loc 1 1408 0
  56 001a FFF7FEFF 		bl	vTaskMissedYield
  57              	.LVL3:
  58              	.L4:
1409:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1410:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1411:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1412:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1413:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					break;
1414:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1415:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1416:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1417:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1418:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->xTxLock );
  59              		.loc 1 1418 0
  60 001e A36C     		ldr	r3, [r4, #72]
  61 0020 013B     		subs	r3, r3, #1
  62 0022 A364     		str	r3, [r4, #72]
  63              	.L2:
1363:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  64              		.loc 1 1363 0 discriminator 1
  65 0024 A36C     		ldr	r3, [r4, #72]
  66 0026 002B     		cmp	r3, #0
  67 0028 F1DC     		bgt	.L5
  68              	.L3:
1419:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1420:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1421:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
  69              		.loc 1 1421 0
  70 002a 4FF0FF33 		mov	r3, #-1
  71 002e A364     		str	r3, [r4, #72]
1422:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1423:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
  72              		.loc 1 1423 0
  73 0030 FFF7FEFF 		bl	vPortExitCritical
  74              	.LVL4:
1424:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1425:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
1426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1427:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
1429:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1431:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1432:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  75              		.loc 1 1432 0
  76 0034 04F11005 		add	r5, r4, #16
1426:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  77              		.loc 1 1426 0
  78 0038 FFF7FEFF 		bl	vPortEnterCritical
  79              	.LVL5:
1428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  80              		.loc 1 1428 0
  81 003c 0AE0     		b	.L6
  82              	.L9:
1430:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  83              		.loc 1 1430 0
  84 003e 2369     		ldr	r3, [r4, #16]
  85 0040 5BB1     		cbz	r3, .L7
  86              		.loc 1 1432 0
  87 0042 2846     		mov	r0, r5
  88 0044 FFF7FEFF 		bl	xTaskRemoveFromEventList
  89              	.LVL6:
  90 0048 08B1     		cbz	r0, .L8
1433:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1434:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
  91              		.loc 1 1434 0
  92 004a FFF7FEFF 		bl	vTaskMissedYield
  93              	.LVL7:
  94              	.L8:
1435:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1436:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1437:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->xRxLock );
  95              		.loc 1 1437 0
  96 004e 636C     		ldr	r3, [r4, #68]
  97 0050 013B     		subs	r3, r3, #1
  98 0052 6364     		str	r3, [r4, #68]
  99              	.L6:
1428:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 100              		.loc 1 1428 0 discriminator 1
 101 0054 636C     		ldr	r3, [r4, #68]
 102 0056 002B     		cmp	r3, #0
 103 0058 F1DC     		bgt	.L9
 104              	.L7:
1438:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1439:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1440:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1441:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				break;
1442:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1443:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1444:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1445:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 105              		.loc 1 1445 0
 106 005a 4FF0FF33 		mov	r3, #-1
 107 005e 6364     		str	r3, [r4, #68]
1446:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1448:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 108              		.loc 1 1448 0
 109 0060 BDE83840 		pop	{r3, r4, r5, lr}
1447:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 110              		.loc 1 1447 0
 111 0064 FFF7FEBF 		b	vPortExitCritical
 112              	.LVL8:
 113              		.cfi_endproc
 114              	.LFE12:
 116              		.align	1
 117              		.thumb
 118              		.thumb_func
 120              	prvCopyDataFromQueue:
 121              	.LFB11:
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 122              		.loc 1 1339 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              	.LVL9:
 127 0068 70B5     		push	{r4, r5, r6, lr}
 128              	.LCFI1:
 129              		.cfi_def_cfa_offset 16
 130              		.cfi_offset 4, -16
 131              		.cfi_offset 5, -12
 132              		.cfi_offset 6, -8
 133              		.cfi_offset 14, -4
1340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 134              		.loc 1 1340 0
 135 006a 0468     		ldr	r4, [r0, #0]
1339:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 136              		.loc 1 1339 0
 137 006c 0346     		mov	r3, r0
1340:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 138              		.loc 1 1340 0
 139 006e 6CB1     		cbz	r4, .L22
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 140              		.loc 1 1342 0
 141 0070 C568     		ldr	r5, [r0, #12]
 142 0072 026C     		ldr	r2, [r0, #64]
1343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 143              		.loc 1 1343 0
 144 0074 4668     		ldr	r6, [r0, #4]
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 145              		.loc 1 1342 0
 146 0076 AD18     		adds	r5, r5, r2
1343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 147              		.loc 1 1343 0
 148 0078 B542     		cmp	r5, r6
1342:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 149              		.loc 1 1342 0
 150 007a C560     		str	r5, [r0, #12]
1345:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom = pxQueue->pcHead;
 151              		.loc 1 1345 0
 152 007c 28BF     		it	cs
 153 007e C460     		strcs	r4, [r0, #12]
1347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 154              		.loc 1 1347 0
 155 0080 0846     		mov	r0, r1
 156              	.LVL10:
 157 0082 D968     		ldr	r1, [r3, #12]
 158              	.LVL11:
1349:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 159              		.loc 1 1349 0
 160 0084 BDE87040 		pop	{r4, r5, r6, lr}
1347:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 161              		.loc 1 1347 0
 162 0088 FFF7FEBF 		b	memcpy
 163              	.LVL12:
 164              	.L22:
 165 008c 70BD     		pop	{r4, r5, r6, pc}
 166              		.cfi_endproc
 167              	.LFE11:
 169              		.align	1
 170              		.thumb
 171              		.thumb_func
 173              	prvCopyDataToQueue:
 174              	.LFB10:
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 175              		.loc 1 1301 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              	.LVL13:
 180 008e 38B5     		push	{r3, r4, r5, lr}
 181              	.LCFI2:
 182              		.cfi_def_cfa_offset 16
 183              		.cfi_offset 3, -16
 184              		.cfi_offset 4, -12
 185              		.cfi_offset 5, -8
 186              		.cfi_offset 14, -4
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 187              		.loc 1 1301 0
 188 0090 1346     		mov	r3, r2
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 189              		.loc 1 1302 0
 190 0092 026C     		ldr	r2, [r0, #64]
 191              	.LVL14:
1301:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 192              		.loc 1 1301 0
 193 0094 0446     		mov	r4, r0
1302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 194              		.loc 1 1302 0
 195 0096 32B9     		cbnz	r2, .L26
1306:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 196              		.loc 1 1306 0
 197 0098 0568     		ldr	r5, [r0, #0]
 198 009a 05BB     		cbnz	r5, .L28
1309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 199              		.loc 1 1309 0
 200 009c 4068     		ldr	r0, [r0, #4]
 201              	.LVL15:
 202 009e FFF7FEFF 		bl	vTaskPriorityDisinherit
 203              	.LVL16:
1310:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 204              		.loc 1 1310 0
 205 00a2 6560     		str	r5, [r4, #4]
 206 00a4 1BE0     		b	.L28
 207              	.LVL17:
 208              	.L26:
1315:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 209              		.loc 1 1315 0
 210 00a6 63B9     		cbnz	r3, .L29
1317:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 211              		.loc 1 1317 0
 212 00a8 8068     		ldr	r0, [r0, #8]
 213              	.LVL18:
 214 00aa FFF7FEFF 		bl	memcpy
 215              	.LVL19:
1318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 216              		.loc 1 1318 0
 217 00ae A268     		ldr	r2, [r4, #8]
 218 00b0 236C     		ldr	r3, [r4, #64]
 219 00b2 D318     		adds	r3, r2, r3
1319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 220              		.loc 1 1319 0
 221 00b4 6268     		ldr	r2, [r4, #4]
1318:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 222              		.loc 1 1318 0
 223 00b6 A360     		str	r3, [r4, #8]
1319:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 224              		.loc 1 1319 0
 225 00b8 9342     		cmp	r3, r2
 226 00ba 10D3     		bcc	.L28
1321:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 227              		.loc 1 1321 0
 228 00bc 2368     		ldr	r3, [r4, #0]
 229 00be A360     		str	r3, [r4, #8]
 230 00c0 0DE0     		b	.L28
 231              	.LVL20:
 232              	.L29:
1326:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 233              		.loc 1 1326 0
 234 00c2 C068     		ldr	r0, [r0, #12]
 235              	.LVL21:
 236 00c4 FFF7FEFF 		bl	memcpy
 237              	.LVL22:
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 238              		.loc 1 1327 0
 239 00c8 236C     		ldr	r3, [r4, #64]
 240 00ca E268     		ldr	r2, [r4, #12]
 241 00cc 5B42     		negs	r3, r3
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 242              		.loc 1 1328 0
 243 00ce 2168     		ldr	r1, [r4, #0]
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 244              		.loc 1 1327 0
 245 00d0 D218     		adds	r2, r2, r3
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 246              		.loc 1 1328 0
 247 00d2 8A42     		cmp	r2, r1
1327:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 248              		.loc 1 1327 0
 249 00d4 E260     		str	r2, [r4, #12]
1328:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 250              		.loc 1 1328 0
 251 00d6 02D2     		bcs	.L28
1330:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 252              		.loc 1 1330 0
 253 00d8 6268     		ldr	r2, [r4, #4]
 254 00da D318     		adds	r3, r2, r3
 255 00dc E360     		str	r3, [r4, #12]
 256              	.L28:
1334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	++( pxQueue->uxMessagesWaiting );
 257              		.loc 1 1334 0
 258 00de A36B     		ldr	r3, [r4, #56]
 259 00e0 0133     		adds	r3, r3, #1
 260 00e2 A363     		str	r3, [r4, #56]
 261 00e4 38BD     		pop	{r3, r4, r5, pc}
 262              		.cfi_endproc
 263              	.LFE10:
 265              		.align	1
 266              		.global	xQueueGenericReset
 267              		.thumb
 268              		.thumb_func
 270              	xQueueGenericReset:
 271              	.LFB0:
 237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 272              		.loc 1 237 0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 276              	.LVL23:
 277 00e6 38B5     		push	{r3, r4, r5, lr}
 278              	.LCFI3:
 279              		.cfi_def_cfa_offset 16
 280              		.cfi_offset 3, -16
 281              		.cfi_offset 4, -12
 282              		.cfi_offset 5, -8
 283              		.cfi_offset 14, -4
 237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 284              		.loc 1 237 0
 285 00e8 0D46     		mov	r5, r1
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 286              		.loc 1 241 0
 287 00ea 0446     		mov	r4, r0
 288 00ec 10B9     		cbnz	r0, .L32
 241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 289              		.loc 1 241 0 is_stmt 0 discriminator 1
 290 00ee FFF7FEFF 		bl	ulPortSetInterruptMask
 291              	.LVL24:
 292              	.L33:
 293 00f2 FEE7     		b	.L33
 294              	.LVL25:
 295              	.L32:
 243:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 296              		.loc 1 243 0 is_stmt 1
 297 00f4 FFF7FEFF 		bl	vPortEnterCritical
 298              	.LVL26:
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 299              		.loc 1 245 0
 300 00f8 2368     		ldr	r3, [r4, #0]
 301 00fa E06B     		ldr	r0, [r4, #60]
 302 00fc 226C     		ldr	r2, [r4, #64]
 247:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 303              		.loc 1 247 0
 304 00fe A360     		str	r3, [r4, #8]
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 305              		.loc 1 245 0
 306 0100 00FB0231 		mla	r1, r0, r2, r3
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) *
 307              		.loc 1 248 0
 308 0104 0138     		subs	r0, r0, #1
 309 0106 02FB0033 		mla	r3, r2, r0, r3
 245:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 310              		.loc 1 245 0
 311 010a 6160     		str	r1, [r4, #4]
 248:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) *
 312              		.loc 1 248 0
 313 010c E360     		str	r3, [r4, #12]
 246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 314              		.loc 1 246 0
 315 010e 0021     		movs	r1, #0
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 316              		.loc 1 249 0
 317 0110 4FF0FF33 		mov	r3, #-1
 246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 318              		.loc 1 246 0
 319 0114 A163     		str	r1, [r4, #56]
 249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 320              		.loc 1 249 0
 321 0116 6364     		str	r3, [r4, #68]
 250:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 322              		.loc 1 250 0
 323 0118 A364     		str	r3, [r4, #72]
 252:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 324              		.loc 1 252 0
 325 011a 55B9     		cbnz	r5, .L34
 259:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 326              		.loc 1 259 0
 327 011c 2369     		ldr	r3, [r4, #16]
 328 011e 83B1     		cbz	r3, .L36
 261:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 329              		.loc 1 261 0
 330 0120 04F11000 		add	r0, r4, #16
 331 0124 FFF7FEFF 		bl	xTaskRemoveFromEventList
 332              	.LVL27:
 333 0128 0128     		cmp	r0, #1
 334 012a 0AD1     		bne	.L36
 263:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 335              		.loc 1 263 0
 336 012c FFF7FEFF 		bl	vPortYield
 337              	.LVL28:
 338 0130 07E0     		b	.L36
 339              	.L34:
 270:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 340              		.loc 1 270 0
 341 0132 04F11000 		add	r0, r4, #16
 342 0136 FFF7FEFF 		bl	vListInitialise
 343              	.LVL29:
 271:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 344              		.loc 1 271 0
 345 013a 04F12400 		add	r0, r4, #36
 346 013e FFF7FEFF 		bl	vListInitialise
 347              	.LVL30:
 348              	.L36:
 274:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 349              		.loc 1 274 0
 350 0142 FFF7FEFF 		bl	vPortExitCritical
 351              	.LVL31:
 279:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 352              		.loc 1 279 0
 353 0146 0120     		movs	r0, #1
 354 0148 38BD     		pop	{r3, r4, r5, pc}
 355              		.cfi_endproc
 356              	.LFE0:
 358              		.align	1
 359              		.global	xQueueGenericCreate
 360              		.thumb
 361              		.thumb_func
 363              	xQueueGenericCreate:
 364              	.LFB1:
 283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 365              		.loc 1 283 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              	.LVL32:
 370 014a 70B5     		push	{r4, r5, r6, lr}
 371              	.LCFI4:
 372              		.cfi_def_cfa_offset 16
 373              		.cfi_offset 4, -16
 374              		.cfi_offset 5, -12
 375              		.cfi_offset 6, -8
 376              		.cfi_offset 14, -4
 283:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 377              		.loc 1 283 0
 378 014c 0E46     		mov	r6, r1
 293:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 379              		.loc 1 293 0
 380 014e 0546     		mov	r5, r0
 381 0150 80B1     		cbz	r0, .L41
 295:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 382              		.loc 1 295 0
 383 0152 4C20     		movs	r0, #76
 384              	.LVL33:
 385 0154 FFF7FEFF 		bl	pvPortMalloc
 386              	.LVL34:
 296:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 387              		.loc 1 296 0
 388 0158 0446     		mov	r4, r0
 389 015a 58B1     		cbz	r0, .L41
 390              	.LVL35:
 300:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 391              		.loc 1 300 0
 392 015c 05FB06F0 		mul	r0, r5, r6
 393              	.LVL36:
 302:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 394              		.loc 1 302 0
 395 0160 0130     		adds	r0, r0, #1
 396              	.LVL37:
 397 0162 FFF7FEFF 		bl	pvPortMalloc
 398              	.LVL38:
 399 0166 2060     		str	r0, [r4, #0]
 303:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxNewQueue->pcHead != NULL )
 400              		.loc 1 303 0
 401 0168 38B9     		cbnz	r0, .L50
 329:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vPortFree( pxNewQueue );
 402              		.loc 1 329 0
 403 016a 2046     		mov	r0, r4
 404 016c FFF7FEFF 		bl	vPortFree
 405              	.LVL39:
 406 0170 00E0     		b	.L41
 407              	.LVL40:
 408              	.L42:
 409 0172 FEE7     		b	.L42
 410              	.L41:
 334:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xReturn );
 411              		.loc 1 334 0
 412 0174 FFF7FEFF 		bl	ulPortSetInterruptMask
 413              	.LVL41:
 414 0178 FBE7     		b	.L42
 415              	.LVL42:
 416              	.L50:
 307:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxLength = uxQueueLength;
 417              		.loc 1 307 0
 418 017a E563     		str	r5, [r4, #60]
 308:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxNewQueue->uxItemSize = uxItemSize;
 419              		.loc 1 308 0
 420 017c 2664     		str	r6, [r4, #64]
 309:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueGenericReset( pxNewQueue, pdTRUE );
 421              		.loc 1 309 0
 422 017e 2046     		mov	r0, r4
 423 0180 0121     		movs	r1, #1
 424 0182 FFF7FEFF 		bl	xQueueGenericReset
 425              	.LVL43:
 337:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 426              		.loc 1 337 0
 427 0186 2046     		mov	r0, r4
 428 0188 70BD     		pop	{r4, r5, r6, pc}
 429              		.cfi_endproc
 430              	.LFE1:
 432              		.align	1
 433              		.global	xQueueGenericSend
 434              		.thumb
 435              		.thumb_func
 437              	xQueueGenericSend:
 438              	.LFB3:
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 439              		.loc 1 555 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 16
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              	.LVL44:
 444 018a 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 445              	.LCFI5:
 446              		.cfi_def_cfa_offset 28
 447              		.cfi_offset 4, -28
 448              		.cfi_offset 5, -24
 449              		.cfi_offset 6, -20
 450              		.cfi_offset 7, -16
 451              		.cfi_offset 8, -12
 452              		.cfi_offset 9, -8
 453              		.cfi_offset 14, -4
 454 018e 85B0     		sub	sp, sp, #20
 455              	.LCFI6:
 456              		.cfi_def_cfa_offset 48
 555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 457              		.loc 1 555 0
 458 0190 0D46     		mov	r5, r1
 459 0192 0192     		str	r2, [sp, #4]
 460 0194 9946     		mov	r9, r3
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 461              		.loc 1 561 0
 462 0196 0446     		mov	r4, r0
 463 0198 10B9     		cbnz	r0, .L52
 561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 464              		.loc 1 561 0 is_stmt 0 discriminator 1
 465 019a FFF7FEFF 		bl	ulPortSetInterruptMask
 466              	.LVL45:
 467              	.L53:
 468 019e FEE7     		b	.L53
 469              	.LVL46:
 470              	.L52:
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 471              		.loc 1 562 0 is_stmt 1
 472 01a0 29B9     		cbnz	r1, .L69
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 473              		.loc 1 562 0 is_stmt 0 discriminator 2
 474 01a2 036C     		ldr	r3, [r0, #64]
 475              	.LVL47:
 476 01a4 2BB1     		cbz	r3, .L70
 477 01a6 65E0     		b	.L71
 478              	.LVL48:
 479              	.L56:
 480 01a8 FEE7     		b	.L56
 481              	.LVL49:
 482              	.L68:
 483 01aa 0126     		movs	r6, #1
 484              	.LVL50:
 485 01ac 03E0     		b	.L72
 486              	.LVL51:
 487              	.L69:
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 488              		.loc 1 562 0
 489 01ae 0026     		movs	r6, #0
 490 01b0 00E0     		b	.L54
 491              	.LVL52:
 492              	.L70:
 493 01b2 0E46     		mov	r6, r1
 494              	.L54:
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 495              		.loc 1 659 0 is_stmt 1
 496 01b4 0027     		movs	r7, #0
 497              	.LVL53:
 498              	.L72:
 569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 499              		.loc 1 569 0
 500 01b6 FFF7FEFF 		bl	vPortEnterCritical
 501              	.LVL54:
 573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 502              		.loc 1 573 0
 503 01ba A26B     		ldr	r2, [r4, #56]
 504 01bc E36B     		ldr	r3, [r4, #60]
 505 01be 9A42     		cmp	r2, r3
 506 01c0 12D2     		bcs	.L57
 576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 507              		.loc 1 576 0
 508 01c2 2046     		mov	r0, r4
 509 01c4 2946     		mov	r1, r5
 510 01c6 4A46     		mov	r2, r9
 511 01c8 FFF761FF 		bl	prvCopyDataToQueue
 512              	.LVL55:
 611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 513              		.loc 1 611 0
 514 01cc 636A     		ldr	r3, [r4, #36]
 515 01ce 3BB1     		cbz	r3, .L59
 613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 516              		.loc 1 613 0
 517 01d0 04F12400 		add	r0, r4, #36
 518 01d4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 519              	.LVL56:
 520 01d8 0128     		cmp	r0, #1
 521 01da 01D1     		bne	.L59
 619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 522              		.loc 1 619 0
 523 01dc FFF7FEFF 		bl	vPortYield
 524              	.LVL57:
 525              	.L59:
 625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 526              		.loc 1 625 0
 527 01e0 FFF7FEFF 		bl	vPortExitCritical
 528              	.LVL58:
 629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
 529              		.loc 1 629 0
 530 01e4 0120     		movs	r0, #1
 531 01e6 48E0     		b	.L73
 532              	.L57:
 633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 533              		.loc 1 633 0
 534 01e8 DDF80480 		ldr	r8, [sp, #4]
 535 01ec B8F1000F 		cmp	r8, #0
 536 01f0 02D1     		bne	.L62
 637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 537              		.loc 1 637 0
 538 01f2 FFF7FEFF 		bl	vPortExitCritical
 539              	.LVL59:
 540 01f6 3BE0     		b	.L74
 541              	.L62:
 644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 542              		.loc 1 644 0
 543 01f8 16B9     		cbnz	r6, .L63
 648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 544              		.loc 1 648 0
 545 01fa 02A8     		add	r0, sp, #8
 546 01fc FFF7FEFF 		bl	vTaskSetTimeOutState
 547              	.LVL60:
 548              	.L63:
 653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 549              		.loc 1 653 0
 550 0200 FFF7FEFF 		bl	vPortExitCritical
 551              	.LVL61:
 658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 552              		.loc 1 658 0
 553 0204 FFF7FEFF 		bl	vTaskSuspendAll
 554              	.LVL62:
 659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 555              		.loc 1 659 0
 556 0208 FFF7FEFF 		bl	vPortEnterCritical
 557              	.LVL63:
 558 020c 636C     		ldr	r3, [r4, #68]
 559 020e 0133     		adds	r3, r3, #1
 560 0210 08BF     		it	eq
 561 0212 6764     		streq	r7, [r4, #68]
 562 0214 A36C     		ldr	r3, [r4, #72]
 563 0216 0133     		adds	r3, r3, #1
 564 0218 08BF     		it	eq
 565 021a A764     		streq	r7, [r4, #72]
 566 021c FFF7FEFF 		bl	vPortExitCritical
 567              	.LVL64:
 662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 568              		.loc 1 662 0
 569 0220 02A8     		add	r0, sp, #8
 570 0222 01A9     		add	r1, sp, #4
 571 0224 FFF7FEFF 		bl	xTaskCheckForTimeOut
 572              	.LVL65:
 573 0228 E8B9     		cbnz	r0, .L66
 574              	.LVL66:
 575              	.LBB4:
 576              	.LBB5:
1449:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1450:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1451:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
1452:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1453:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1454:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1456:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == 0 )
1458:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1459:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1460:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1461:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1462:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1463:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
1464:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1465:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1467:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1468:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1469:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1470:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1471:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1472:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle xQueue )
1473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1474:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1475:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( ( ( xQUEUE * ) xQueue )->uxMessagesWaiting == 0 )
1478:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1479:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
1480:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1481:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else
1482:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1483:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
1484:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1485:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1486:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1488:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1489:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1490:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
1491:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
1492:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1493:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 577              		.loc 1 1494 0
 578 022a FFF7FEFF 		bl	vPortEnterCritical
 579              	.LVL67:
1495:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 580              		.loc 1 1496 0
 581 022e D4F83880 		ldr	r8, [r4, #56]
 582 0232 E66B     		ldr	r6, [r4, #60]
 583              	.LVL68:
1497:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1498:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1499:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1500:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1501:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1502:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
1503:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1504:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 584              		.loc 1 1505 0
 585 0234 FFF7FEFF 		bl	vPortExitCritical
 586              	.LVL69:
 587              	.LBE5:
 588              	.LBE4:
 664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 589              		.loc 1 664 0
 590 0238 B045     		cmp	r8, r6
 591 023a 0ED1     		bne	.L67
 667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 592              		.loc 1 667 0
 593 023c 04F11000 		add	r0, r4, #16
 594 0240 0199     		ldr	r1, [sp, #4]
 595 0242 FFF7FEFF 		bl	vTaskPlaceOnEventList
 596              	.LVL70:
 674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 597              		.loc 1 674 0
 598 0246 2046     		mov	r0, r4
 599 0248 FFF7DAFE 		bl	prvUnlockQueue
 600              	.LVL71:
 681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 601              		.loc 1 681 0
 602 024c FFF7FEFF 		bl	xTaskResumeAll
 603              	.LVL72:
 604 0250 0028     		cmp	r0, #0
 605 0252 AAD1     		bne	.L68
 683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 606              		.loc 1 683 0
 607 0254 FFF7FEFF 		bl	vPortYield
 608              	.LVL73:
 609 0258 A7E7     		b	.L68
 610              	.L67:
 689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 611              		.loc 1 689 0
 612 025a 2046     		mov	r0, r4
 613 025c FFF7D0FE 		bl	prvUnlockQueue
 614              	.LVL74:
 690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 615              		.loc 1 690 0
 616 0260 FFF7FEFF 		bl	xTaskResumeAll
 617              	.LVL75:
 618 0264 A1E7     		b	.L68
 619              	.LVL76:
 620              	.L66:
 696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 621              		.loc 1 696 0
 622 0266 2046     		mov	r0, r4
 623 0268 FFF7CAFE 		bl	prvUnlockQueue
 624              	.LVL77:
 697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 625              		.loc 1 697 0
 626 026c FFF7FEFF 		bl	xTaskResumeAll
 627              	.LVL78:
 628              	.L74:
 702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 629              		.loc 1 702 0
 630 0270 0020     		movs	r0, #0
 631 0272 02E0     		b	.L73
 632              	.LVL79:
 633              	.L71:
 562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 634              		.loc 1 562 0
 635 0274 FFF7FEFF 		bl	ulPortSetInterruptMask
 636              	.LVL80:
 637 0278 96E7     		b	.L56
 638              	.LVL81:
 639              	.L73:
 705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 640              		.loc 1 705 0
 641 027a 05B0     		add	sp, sp, #20
 642 027c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 643              		.cfi_endproc
 644              	.LFE3:
 646              		.align	1
 647              		.global	xQueueCreateMutex
 648              		.thumb
 649              		.thumb_func
 651              	xQueueCreateMutex:
 652              	.LFB2:
 343:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 653              		.loc 1 343 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              	.LVL82:
 658 0280 38B5     		push	{r3, r4, r5, lr}
 659              	.LCFI7:
 660              		.cfi_def_cfa_offset 16
 661              		.cfi_offset 3, -16
 662              		.cfi_offset 4, -12
 663              		.cfi_offset 5, -8
 664              		.cfi_offset 14, -4
 351:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 665              		.loc 1 351 0
 666 0282 4C20     		movs	r0, #76
 667              	.LVL83:
 668 0284 FFF7FEFF 		bl	pvPortMalloc
 669              	.LVL84:
 352:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 670              		.loc 1 352 0
 671 0288 0446     		mov	r4, r0
 672 028a 08B1     		cbz	r0, .L76
 673 028c 03E0     		b	.L79
 674              	.LVL85:
 675              	.L77:
 676 028e FEE7     		b	.L77
 677              	.LVL86:
 678              	.L76:
 398:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		configASSERT( pxNewQueue );
 679              		.loc 1 398 0
 680 0290 FFF7FEFF 		bl	ulPortSetInterruptMask
 681              	.LVL87:
 682 0294 FBE7     		b	.L77
 683              	.LVL88:
 684              	.L79:
 367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 685              		.loc 1 367 0
 686 0296 0123     		movs	r3, #1
 355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 687              		.loc 1 355 0
 688 0298 0025     		movs	r5, #0
 367:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 689              		.loc 1 367 0
 690 029a C363     		str	r3, [r0, #60]
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 691              		.loc 1 369 0
 692 029c 4FF0FF33 		mov	r3, #-1
 366:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 693              		.loc 1 366 0
 694 02a0 8563     		str	r5, [r0, #56]
 355:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 695              		.loc 1 355 0
 696 02a2 4560     		str	r5, [r0, #4]
 369:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 697              		.loc 1 369 0
 698 02a4 4364     		str	r3, [r0, #68]
 356:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 699              		.loc 1 356 0
 700 02a6 0560     		str	r5, [r0, #0]
 370:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 701              		.loc 1 370 0
 702 02a8 8364     		str	r3, [r0, #72]
 360:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 703              		.loc 1 360 0
 704 02aa 8560     		str	r5, [r0, #8]
 361:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcReadFrom = NULL;
 705              		.loc 1 361 0
 706 02ac C560     		str	r5, [r0, #12]
 368:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 707              		.loc 1 368 0
 708 02ae 0564     		str	r5, [r0, #64]
 385:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 709              		.loc 1 385 0
 710 02b0 1030     		adds	r0, r0, #16
 711              	.LVL89:
 712 02b2 FFF7FEFF 		bl	vListInitialise
 713              	.LVL90:
 386:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 714              		.loc 1 386 0
 715 02b6 04F12400 		add	r0, r4, #36
 716 02ba FFF7FEFF 		bl	vListInitialise
 717              	.LVL91:
 391:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 718              		.loc 1 391 0
 719 02be 2046     		mov	r0, r4
 720 02c0 2946     		mov	r1, r5
 721 02c2 2A46     		mov	r2, r5
 722 02c4 2B46     		mov	r3, r5
 723 02c6 FFF7FEFF 		bl	xQueueGenericSend
 724              	.LVL92:
 400:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 725              		.loc 1 400 0
 726 02ca 2046     		mov	r0, r4
 727 02cc 38BD     		pop	{r3, r4, r5, pc}
 728              		.cfi_endproc
 729              	.LFE2:
 731              		.align	1
 732              		.global	xQueueGenericSendFromISR
 733              		.thumb
 734              		.thumb_func
 736              	xQueueGenericSendFromISR:
 737              	.LFB4:
 921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 738              		.loc 1 921 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              	.LVL93:
 743 02ce 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 744              	.LCFI8:
 745              		.cfi_def_cfa_offset 24
 746              		.cfi_offset 4, -24
 747              		.cfi_offset 5, -20
 748              		.cfi_offset 6, -16
 749              		.cfi_offset 7, -12
 750              		.cfi_offset 8, -8
 751              		.cfi_offset 14, -4
 921:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 752              		.loc 1 921 0
 753 02d2 0E46     		mov	r6, r1
 754 02d4 1546     		mov	r5, r2
 755 02d6 9846     		mov	r8, r3
 927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 756              		.loc 1 927 0
 757 02d8 0446     		mov	r4, r0
 758 02da 10B9     		cbnz	r0, .L81
 927:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 759              		.loc 1 927 0 is_stmt 0 discriminator 1
 760 02dc FFF7FEFF 		bl	ulPortSetInterruptMask
 761              	.LVL94:
 762              	.L82:
 763 02e0 FEE7     		b	.L82
 764              	.LVL95:
 765              	.L81:
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 766              		.loc 1 928 0 is_stmt 1
 767 02e2 F9B9     		cbnz	r1, .L83
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 768              		.loc 1 928 0 is_stmt 0 discriminator 2
 769 02e4 016C     		ldr	r1, [r0, #64]
 770              	.LVL96:
 771 02e6 E9B1     		cbz	r1, .L83
 772 02e8 19E0     		b	.L100
 773              	.LVL97:
 774              	.L85:
 775 02ea FEE7     		b	.L85
 776              	.LVL98:
 777              	.L90:
 941:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 778              		.loc 1 941 0 is_stmt 1
 779 02ec 2046     		mov	r0, r4
 780              	.LVL99:
 781 02ee 3146     		mov	r1, r6
 782 02f0 4246     		mov	r2, r8
 783 02f2 FFF7CCFE 		bl	prvCopyDataToQueue
 784              	.LVL100:
 945:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
 785              		.loc 1 945 0
 786 02f6 A36C     		ldr	r3, [r4, #72]
 787 02f8 0133     		adds	r3, r3, #1
 788 02fa 0BD1     		bne	.L86
 980:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 789              		.loc 1 980 0
 790 02fc 636A     		ldr	r3, [r4, #36]
 791 02fe 03B9     		cbnz	r3, .L87
 792 0300 0BE0     		b	.L102
 793              	.L87:
 982:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 794              		.loc 1 982 0
 795 0302 04F12400 		add	r0, r4, #36
 796 0306 FFF7FEFF 		bl	xTaskRemoveFromEventList
 797              	.LVL101:
 798 030a 30B1     		cbz	r0, .L102
 986:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 799              		.loc 1 986 0
 800 030c 2DB1     		cbz	r5, .L102
 988:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 801              		.loc 1 988 0
 802 030e 0124     		movs	r4, #1
 803              	.LVL102:
 804 0310 2C60     		str	r4, [r5, #0]
 805 0312 0FE0     		b	.L88
 806              	.LVL103:
 807              	.L86:
 999:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xTxLock );
 808              		.loc 1 999 0
 809 0314 A36C     		ldr	r3, [r4, #72]
 810 0316 0133     		adds	r3, r3, #1
 811 0318 A364     		str	r3, [r4, #72]
 812              	.L102:
1002:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 813              		.loc 1 1002 0
 814 031a 0124     		movs	r4, #1
 815              	.LVL104:
 816 031c 0AE0     		b	.L88
 817              	.LVL105:
 818              	.L100:
 928:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 
 819              		.loc 1 928 0
 820 031e FFF7FEFF 		bl	ulPortSetInterruptMask
 821              	.LVL106:
 822 0322 E2E7     		b	.L85
 823              	.LVL107:
 824              	.L83:
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 825              		.loc 1 935 0
 826 0324 FFF7FEFF 		bl	ulPortSetInterruptMask
 827              	.LVL108:
 937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 828              		.loc 1 937 0
 829 0328 A36B     		ldr	r3, [r4, #56]
 830 032a E16B     		ldr	r1, [r4, #60]
 935:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 831              		.loc 1 935 0
 832 032c 0746     		mov	r7, r0
 833              	.LVL109:
 937:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 834              		.loc 1 937 0
 835 032e 8B42     		cmp	r3, r1
 836 0330 DCD3     		bcc	.L90
1007:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
 837              		.loc 1 1007 0
 838 0332 0024     		movs	r4, #0
 839              	.LVL110:
 840              	.L88:
1010:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 841              		.loc 1 1010 0
 842 0334 3846     		mov	r0, r7
 843 0336 FFF7FEFF 		bl	vPortClearInterruptMask
 844              	.LVL111:
1013:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 845              		.loc 1 1013 0
 846 033a 2046     		mov	r0, r4
 847 033c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 848              		.cfi_endproc
 849              	.LFE4:
 851              		.align	1
 852              		.global	xQueueGenericReceive
 853              		.thumb
 854              		.thumb_func
 856              	xQueueGenericReceive:
 857              	.LFB5:
1017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 858              		.loc 1 1017 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 16
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              	.LVL112:
 863 0340 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 864              	.LCFI9:
 865              		.cfi_def_cfa_offset 28
 866              		.cfi_offset 4, -28
 867              		.cfi_offset 5, -24
 868              		.cfi_offset 6, -20
 869              		.cfi_offset 7, -16
 870              		.cfi_offset 8, -12
 871              		.cfi_offset 9, -8
 872              		.cfi_offset 14, -4
 873 0344 85B0     		sub	sp, sp, #20
 874              	.LCFI10:
 875              		.cfi_def_cfa_offset 48
1017:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 876              		.loc 1 1017 0
 877 0346 0D46     		mov	r5, r1
 878 0348 0192     		str	r2, [sp, #4]
 879 034a 9946     		mov	r9, r3
1024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 880              		.loc 1 1024 0
 881 034c 0446     		mov	r4, r0
 882 034e 10B9     		cbnz	r0, .L104
1024:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 883              		.loc 1 1024 0 is_stmt 0 discriminator 1
 884 0350 FFF7FEFF 		bl	ulPortSetInterruptMask
 885              	.LVL113:
 886              	.L105:
 887 0354 FEE7     		b	.L105
 888              	.LVL114:
 889              	.L104:
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 890              		.loc 1 1025 0 is_stmt 1
 891 0356 29B9     		cbnz	r1, .L125
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 892              		.loc 1 1025 0 is_stmt 0 discriminator 2
 893 0358 036C     		ldr	r3, [r0, #64]
 894              	.LVL115:
 895 035a 2BB1     		cbz	r3, .L126
 896 035c 7EE0     		b	.L130
 897              	.LVL116:
 898              	.L108:
 899 035e FEE7     		b	.L108
 900              	.LVL117:
 901              	.L124:
 902 0360 0126     		movs	r6, #1
 903              	.LVL118:
 904 0362 03E0     		b	.L131
 905              	.LVL119:
 906              	.L125:
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 907              		.loc 1 1025 0
 908 0364 0026     		movs	r6, #0
 909 0366 00E0     		b	.L106
 910              	.LVL120:
 911              	.L126:
 912 0368 0E46     		mov	r6, r1
 913              	.L106:
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 914              		.loc 1 1120 0 is_stmt 1
 915 036a 0027     		movs	r7, #0
 916              	.LVL121:
 917              	.L131:
1033:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 918              		.loc 1 1033 0
 919 036c FFF7FEFF 		bl	vPortEnterCritical
 920              	.LVL122:
1037:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 921              		.loc 1 1037 0
 922 0370 A36B     		ldr	r3, [r4, #56]
 923 0372 3BB3     		cbz	r3, .L109
1042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 924              		.loc 1 1042 0
 925 0374 2046     		mov	r0, r4
 926 0376 2946     		mov	r1, r5
1040:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->pcReadFrom;
 927              		.loc 1 1040 0
 928 0378 E668     		ldr	r6, [r4, #12]
 929              	.LVL123:
1042:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 930              		.loc 1 1042 0
 931 037a FFF775FE 		bl	prvCopyDataFromQueue
 932              	.LVL124:
1044:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
 933              		.loc 1 1044 0
 934 037e B9F1000F 		cmp	r9, #0
 935 0382 12D1     		bne	.L110
1049:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					--( pxQueue->uxMessagesWaiting );
 936              		.loc 1 1049 0
 937 0384 A36B     		ldr	r3, [r4, #56]
 938 0386 013B     		subs	r3, r3, #1
 939 0388 A363     		str	r3, [r4, #56]
1053:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 940              		.loc 1 1053 0
 941 038a 2368     		ldr	r3, [r4, #0]
 942 038c 13B9     		cbnz	r3, .L111
1057:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 943              		.loc 1 1057 0
 944 038e FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 945              	.LVL125:
 946 0392 6060     		str	r0, [r4, #4]
 947              	.L111:
1062:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 948              		.loc 1 1062 0
 949 0394 2369     		ldr	r3, [r4, #16]
 950 0396 8BB1     		cbz	r3, .L113
1064:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 951              		.loc 1 1064 0
 952 0398 04F11000 		add	r0, r4, #16
 953 039c FFF7FEFF 		bl	xTaskRemoveFromEventList
 954              	.LVL126:
 955 03a0 0128     		cmp	r0, #1
 956 03a2 0BD1     		bne	.L113
 957              	.L115:
1066:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 958              		.loc 1 1066 0
 959 03a4 FFF7FEFF 		bl	vPortYield
 960              	.LVL127:
 961 03a8 08E0     		b	.L113
 962              	.L110:
1080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 963              		.loc 1 1080 0
 964 03aa 636A     		ldr	r3, [r4, #36]
1076:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxQueue->pcReadFrom = pcOriginalReadPosition;
 965              		.loc 1 1076 0
 966 03ac E660     		str	r6, [r4, #12]
1080:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 967              		.loc 1 1080 0
 968 03ae 2BB1     		cbz	r3, .L113
1084:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 969              		.loc 1 1084 0
 970 03b0 04F12400 		add	r0, r4, #36
 971 03b4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 972              	.LVL128:
 973 03b8 0028     		cmp	r0, #0
 974 03ba F3D1     		bne	.L115
 975              	.L113:
1092:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 976              		.loc 1 1092 0
 977 03bc FFF7FEFF 		bl	vPortExitCritical
 978              	.LVL129:
1093:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				return pdPASS;
 979              		.loc 1 1093 0
 980 03c0 0120     		movs	r0, #1
 981 03c2 4EE0     		b	.L132
 982              	.LVL130:
 983              	.L109:
1097:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( portTickType ) 0 )
 984              		.loc 1 1097 0
 985 03c4 DDF80480 		ldr	r8, [sp, #4]
 986 03c8 B8F1000F 		cmp	r8, #0
 987 03cc 02D1     		bne	.L117
1101:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 988              		.loc 1 1101 0
 989 03ce FFF7FEFF 		bl	vPortExitCritical
 990              	.LVL131:
 991 03d2 41E0     		b	.L133
 992              	.L117:
1105:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 993              		.loc 1 1105 0
 994 03d4 16B9     		cbnz	r6, .L118
1109:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 995              		.loc 1 1109 0
 996 03d6 02A8     		add	r0, sp, #8
 997 03d8 FFF7FEFF 		bl	vTaskSetTimeOutState
 998              	.LVL132:
 999              	.L118:
1114:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 1000              		.loc 1 1114 0
 1001 03dc FFF7FEFF 		bl	vPortExitCritical
 1002              	.LVL133:
1119:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 1003              		.loc 1 1119 0
 1004 03e0 FFF7FEFF 		bl	vTaskSuspendAll
 1005              	.LVL134:
1120:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1006              		.loc 1 1120 0
 1007 03e4 FFF7FEFF 		bl	vPortEnterCritical
 1008              	.LVL135:
 1009 03e8 636C     		ldr	r3, [r4, #68]
 1010 03ea 0133     		adds	r3, r3, #1
 1011 03ec 08BF     		it	eq
 1012 03ee 6764     		streq	r7, [r4, #68]
 1013 03f0 A36C     		ldr	r3, [r4, #72]
 1014 03f2 0133     		adds	r3, r3, #1
 1015 03f4 08BF     		it	eq
 1016 03f6 A764     		streq	r7, [r4, #72]
 1017 03f8 FFF7FEFF 		bl	vPortExitCritical
 1018              	.LVL136:
1123:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1019              		.loc 1 1123 0
 1020 03fc 02A8     		add	r0, sp, #8
 1021 03fe 01A9     		add	r1, sp, #4
 1022 0400 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1023              	.LVL137:
 1024 0404 18BB     		cbnz	r0, .L121
 1025              	.LVL138:
 1026              	.LBB8:
 1027              	.LBB9:
1455:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1028              		.loc 1 1455 0
 1029 0406 FFF7FEFF 		bl	vPortEnterCritical
 1030              	.LVL139:
1457:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == 0 )
 1031              		.loc 1 1457 0
 1032 040a A66B     		ldr	r6, [r4, #56]
 1033              	.LVL140:
1466:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1034              		.loc 1 1466 0
 1035 040c FFF7FEFF 		bl	vPortExitCritical
 1036              	.LVL141:
 1037              	.LBE9:
 1038              	.LBE8:
1125:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1039              		.loc 1 1125 0
 1040 0410 BEB9     		cbnz	r6, .L122
1131:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1041              		.loc 1 1131 0
 1042 0412 2368     		ldr	r3, [r4, #0]
 1043 0414 33B9     		cbnz	r3, .L123
1133:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portENTER_CRITICAL();
 1044              		.loc 1 1133 0
 1045 0416 FFF7FEFF 		bl	vPortEnterCritical
 1046              	.LVL142:
1135:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 1047              		.loc 1 1135 0
 1048 041a 6068     		ldr	r0, [r4, #4]
 1049 041c FFF7FEFF 		bl	vTaskPriorityInherit
 1050              	.LVL143:
1137:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						portEXIT_CRITICAL();
 1051              		.loc 1 1137 0
 1052 0420 FFF7FEFF 		bl	vPortExitCritical
 1053              	.LVL144:
 1054              	.L123:
1142:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1055              		.loc 1 1142 0
 1056 0424 04F12400 		add	r0, r4, #36
 1057 0428 0199     		ldr	r1, [sp, #4]
 1058 042a FFF7FEFF 		bl	vTaskPlaceOnEventList
 1059              	.LVL145:
1143:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1060              		.loc 1 1143 0
 1061 042e 2046     		mov	r0, r4
 1062 0430 FFF7E6FD 		bl	prvUnlockQueue
 1063              	.LVL146:
1144:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1064              		.loc 1 1144 0
 1065 0434 FFF7FEFF 		bl	xTaskResumeAll
 1066              	.LVL147:
 1067 0438 0028     		cmp	r0, #0
 1068 043a 91D1     		bne	.L124
1146:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 1069              		.loc 1 1146 0
 1070 043c FFF7FEFF 		bl	vPortYield
 1071              	.LVL148:
 1072 0440 8EE7     		b	.L124
 1073              	.L122:
1152:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1074              		.loc 1 1152 0
 1075 0442 2046     		mov	r0, r4
 1076 0444 FFF7DCFD 		bl	prvUnlockQueue
 1077              	.LVL149:
1153:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1078              		.loc 1 1153 0
 1079 0448 FFF7FEFF 		bl	xTaskResumeAll
 1080              	.LVL150:
 1081 044c 88E7     		b	.L124
 1082              	.LVL151:
 1083              	.L121:
1158:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1084              		.loc 1 1158 0
 1085 044e 2046     		mov	r0, r4
 1086 0450 FFF7D6FD 		bl	prvUnlockQueue
 1087              	.LVL152:
1159:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1088              		.loc 1 1159 0
 1089 0454 FFF7FEFF 		bl	xTaskResumeAll
 1090              	.LVL153:
 1091              	.L133:
1161:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			return errQUEUE_EMPTY;
 1092              		.loc 1 1161 0
 1093 0458 0020     		movs	r0, #0
 1094 045a 02E0     		b	.L132
 1095              	.LVL154:
 1096              	.L130:
1025:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1097              		.loc 1 1025 0
 1098 045c FFF7FEFF 		bl	ulPortSetInterruptMask
 1099              	.LVL155:
 1100 0460 7DE7     		b	.L108
 1101              	.LVL156:
 1102              	.L132:
1164:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1103              		.loc 1 1164 0
 1104 0462 05B0     		add	sp, sp, #20
 1105 0464 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1106              		.cfi_endproc
 1107              	.LFE5:
 1109              		.align	1
 1110              		.global	xQueueReceiveFromISR
 1111              		.thumb
 1112              		.thumb_func
 1114              	xQueueReceiveFromISR:
 1115              	.LFB6:
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1116              		.loc 1 1168 0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 1120              	.LVL157:
 1121 0468 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1122              	.LCFI11:
 1123              		.cfi_def_cfa_offset 24
 1124              		.cfi_offset 3, -24
 1125              		.cfi_offset 4, -20
 1126              		.cfi_offset 5, -16
 1127              		.cfi_offset 6, -12
 1128              		.cfi_offset 7, -8
 1129              		.cfi_offset 14, -4
1168:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1130              		.loc 1 1168 0
 1131 046a 0E46     		mov	r6, r1
 1132 046c 1546     		mov	r5, r2
1174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1133              		.loc 1 1174 0
 1134 046e 0446     		mov	r4, r0
 1135 0470 10B9     		cbnz	r0, .L135
1174:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1136              		.loc 1 1174 0 is_stmt 0 discriminator 1
 1137 0472 FFF7FEFF 		bl	ulPortSetInterruptMask
 1138              	.LVL158:
 1139              	.L136:
 1140 0476 FEE7     		b	.L136
 1141              	.LVL159:
 1142              	.L135:
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1143              		.loc 1 1175 0 is_stmt 1
 1144 0478 09BB     		cbnz	r1, .L137
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1145              		.loc 1 1175 0 is_stmt 0 discriminator 2
 1146 047a 036C     		ldr	r3, [r0, #64]
 1147 047c FBB1     		cbz	r3, .L137
 1148 047e 1BE0     		b	.L154
 1149              	.LVL160:
 1150              	.L139:
 1151 0480 FEE7     		b	.L139
 1152              	.LVL161:
 1153              	.L144:
1184:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1154              		.loc 1 1184 0 is_stmt 1
 1155 0482 2046     		mov	r0, r4
 1156              	.LVL162:
 1157 0484 3146     		mov	r1, r6
 1158 0486 FFF7EFFD 		bl	prvCopyDataFromQueue
 1159              	.LVL163:
1185:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 1160              		.loc 1 1185 0
 1161 048a A36B     		ldr	r3, [r4, #56]
 1162 048c 013B     		subs	r3, r3, #1
 1163 048e A363     		str	r3, [r4, #56]
1190:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
 1164              		.loc 1 1190 0
 1165 0490 636C     		ldr	r3, [r4, #68]
 1166 0492 0133     		adds	r3, r3, #1
 1167 0494 0BD1     		bne	.L140
1192:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1168              		.loc 1 1192 0
 1169 0496 2369     		ldr	r3, [r4, #16]
 1170 0498 03B9     		cbnz	r3, .L141
 1171 049a 0BE0     		b	.L156
 1172              	.L141:
1194:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1173              		.loc 1 1194 0
 1174 049c 04F11000 		add	r0, r4, #16
 1175 04a0 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1176              	.LVL164:
 1177 04a4 30B1     		cbz	r0, .L156
1198:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 1178              		.loc 1 1198 0
 1179 04a6 2DB1     		cbz	r5, .L156
1200:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 1180              		.loc 1 1200 0
 1181 04a8 0124     		movs	r4, #1
 1182              	.LVL165:
 1183 04aa 2C60     		str	r4, [r5, #0]
 1184 04ac 0EE0     		b	.L142
 1185              	.LVL166:
 1186              	.L140:
1209:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				++( pxQueue->xRxLock );
 1187              		.loc 1 1209 0
 1188 04ae 636C     		ldr	r3, [r4, #68]
 1189 04b0 0133     		adds	r3, r3, #1
 1190 04b2 6364     		str	r3, [r4, #68]
 1191              	.L156:
1212:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1192              		.loc 1 1212 0
 1193 04b4 0124     		movs	r4, #1
 1194              	.LVL167:
 1195 04b6 09E0     		b	.L142
 1196              	.LVL168:
 1197              	.L154:
1175:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) 
 1198              		.loc 1 1175 0
 1199 04b8 FFF7FEFF 		bl	ulPortSetInterruptMask
 1200              	.LVL169:
 1201 04bc E0E7     		b	.L139
 1202              	.LVL170:
 1203              	.L137:
1177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1204              		.loc 1 1177 0
 1205 04be FFF7FEFF 		bl	ulPortSetInterruptMask
 1206              	.LVL171:
1180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1207              		.loc 1 1180 0
 1208 04c2 A36B     		ldr	r3, [r4, #56]
1177:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1209              		.loc 1 1177 0
 1210 04c4 0746     		mov	r7, r0
 1211              	.LVL172:
1180:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1212              		.loc 1 1180 0
 1213 04c6 002B     		cmp	r3, #0
 1214 04c8 DBD1     		bne	.L144
1216:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 1215              		.loc 1 1216 0
 1216 04ca 1C46     		mov	r4, r3
 1217              	.LVL173:
 1218              	.L142:
1220:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1219              		.loc 1 1220 0
 1220 04cc 3846     		mov	r0, r7
 1221 04ce FFF7FEFF 		bl	vPortClearInterruptMask
 1222              	.LVL174:
1223:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1223              		.loc 1 1223 0
 1224 04d2 2046     		mov	r0, r4
 1225 04d4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1226              		.cfi_endproc
 1227              	.LFE6:
 1229              		.align	1
 1230              		.global	uxQueueMessagesWaiting
 1231              		.thumb
 1232              		.thumb_func
 1234              	uxQueueMessagesWaiting:
 1235              	.LFB7:
1227:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1236              		.loc 1 1227 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 1240              	.LVL175:
 1241 04d6 10B5     		push	{r4, lr}
 1242              	.LCFI12:
 1243              		.cfi_def_cfa_offset 8
 1244              		.cfi_offset 4, -8
 1245              		.cfi_offset 14, -4
1230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1246              		.loc 1 1230 0
 1247 04d8 0446     		mov	r4, r0
 1248 04da 10B9     		cbnz	r0, .L158
1230:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1249              		.loc 1 1230 0 is_stmt 0 discriminator 1
 1250 04dc FFF7FEFF 		bl	ulPortSetInterruptMask
 1251              	.LVL176:
 1252              	.L159:
 1253 04e0 FEE7     		b	.L159
 1254              	.LVL177:
 1255              	.L158:
1232:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1256              		.loc 1 1232 0 is_stmt 1
 1257 04e2 FFF7FEFF 		bl	vPortEnterCritical
 1258              	.LVL178:
1233:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
 1259              		.loc 1 1233 0
 1260 04e6 A46B     		ldr	r4, [r4, #56]
 1261              	.LVL179:
1234:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1262              		.loc 1 1234 0
 1263 04e8 FFF7FEFF 		bl	vPortExitCritical
 1264              	.LVL180:
1237:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1265              		.loc 1 1237 0
 1266 04ec 2046     		mov	r0, r4
 1267 04ee 10BD     		pop	{r4, pc}
 1268              		.cfi_endproc
 1269              	.LFE7:
 1271              		.align	1
 1272              		.global	uxQueueMessagesWaitingFromISR
 1273              		.thumb
 1274              		.thumb_func
 1276              	uxQueueMessagesWaitingFromISR:
 1277              	.LFB8:
1241:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1278              		.loc 1 1241 0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 0
 1281              		@ frame_needed = 0, uses_anonymous_args = 0
 1282              	.LVL181:
 1283 04f0 08B5     		push	{r3, lr}
 1284              	.LCFI13:
 1285              		.cfi_def_cfa_offset 8
 1286              		.cfi_offset 3, -8
 1287              		.cfi_offset 14, -4
1244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1288              		.loc 1 1244 0
 1289 04f2 10B9     		cbnz	r0, .L161
1244:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1290              		.loc 1 1244 0 is_stmt 0 discriminator 1
 1291 04f4 FFF7FEFF 		bl	ulPortSetInterruptMask
 1292              	.LVL182:
 1293              	.L162:
 1294 04f8 FEE7     		b	.L162
 1295              	.LVL183:
 1296              	.L161:
1246:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( xQUEUE * ) xQueue )->uxMessagesWaiting;
 1297              		.loc 1 1246 0 is_stmt 1
 1298 04fa 806B     		ldr	r0, [r0, #56]
 1299              	.LVL184:
1249:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1300              		.loc 1 1249 0
 1301 04fc 08BD     		pop	{r3, pc}
 1302              		.cfi_endproc
 1303              	.LFE8:
 1305              		.align	1
 1306              		.global	vQueueDelete
 1307              		.thumb
 1308              		.thumb_func
 1310              	vQueueDelete:
 1311              	.LFB9:
1253:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1312              		.loc 1 1253 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 0
 1315              		@ frame_needed = 0, uses_anonymous_args = 0
 1316              	.LVL185:
 1317 04fe 10B5     		push	{r4, lr}
 1318              	.LCFI14:
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 4, -8
 1321              		.cfi_offset 14, -4
1257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1322              		.loc 1 1257 0
 1323 0500 0446     		mov	r4, r0
 1324 0502 10B9     		cbnz	r0, .L164
1257:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 1325              		.loc 1 1257 0 is_stmt 0 discriminator 1
 1326 0504 FFF7FEFF 		bl	ulPortSetInterruptMask
 1327              	.LVL186:
 1328              	.L165:
 1329 0508 FEE7     		b	.L165
 1330              	.LVL187:
 1331              	.L164:
1265:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue->pcHead );
 1332              		.loc 1 1265 0 is_stmt 1
 1333 050a 0068     		ldr	r0, [r0, #0]
 1334              	.LVL188:
 1335 050c FFF7FEFF 		bl	vPortFree
 1336              	.LVL189:
1266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
 1337              		.loc 1 1266 0
 1338 0510 2046     		mov	r0, r4
1267:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1339              		.loc 1 1267 0
 1340 0512 BDE81040 		pop	{r4, lr}
1266:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
 1341              		.loc 1 1266 0
 1342 0516 FFF7FEBF 		b	vPortFree
 1343              	.LVL190:
 1344              		.cfi_endproc
 1345              	.LFE9:
 1347              		.align	1
 1348              		.global	xQueueIsQueueEmptyFromISR
 1349              		.thumb
 1350              		.thumb_func
 1352              	xQueueIsQueueEmptyFromISR:
 1353              	.LFB14:
1473:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1354              		.loc 1 1473 0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 0
 1357              		@ frame_needed = 0, uses_anonymous_args = 0
 1358              	.LVL191:
 1359 051a 08B5     		push	{r3, lr}
 1360              	.LCFI15:
 1361              		.cfi_def_cfa_offset 8
 1362              		.cfi_offset 3, -8
 1363              		.cfi_offset 14, -4
1476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1364              		.loc 1 1476 0
 1365 051c 10B9     		cbnz	r0, .L167
1476:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1366              		.loc 1 1476 0 is_stmt 0 discriminator 1
 1367 051e FFF7FEFF 		bl	ulPortSetInterruptMask
 1368              	.LVL192:
 1369              	.L168:
 1370 0522 FEE7     		b	.L168
 1371              	.LVL193:
 1372              	.L167:
1477:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( ( ( xQUEUE * ) xQueue )->uxMessagesWaiting == 0 )
 1373              		.loc 1 1477 0 is_stmt 1
 1374 0524 806B     		ldr	r0, [r0, #56]
 1375              	.LVL194:
1487:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1376              		.loc 1 1487 0
 1377 0526 D0F10100 		rsbs	r0, r0, #1
 1378              	.LVL195:
 1379 052a 38BF     		it	cc
 1380 052c 0020     		movcc	r0, #0
 1381 052e 08BD     		pop	{r3, pc}
 1382              		.cfi_endproc
 1383              	.LFE14:
 1385              		.align	1
 1386              		.global	xQueueIsQueueFullFromISR
 1387              		.thumb
 1388              		.thumb_func
 1390              	xQueueIsQueueFullFromISR:
 1391              	.LFB16:
1506:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1507:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1508:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
1509:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1510:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1511:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle xQueue )
1512:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** {
 1392              		.loc 1 1512 0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 0
 1395              		@ frame_needed = 0, uses_anonymous_args = 0
 1396              	.LVL196:
 1397 0530 08B5     		push	{r3, lr}
 1398              	.LCFI16:
 1399              		.cfi_def_cfa_offset 8
 1400              		.cfi_offset 3, -8
 1401              		.cfi_offset 14, -4
1513:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** signed portBASE_TYPE xReturn;
1514:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1515:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1402              		.loc 1 1515 0
 1403 0532 10B9     		cbnz	r0, .L170
 1404              		.loc 1 1515 0 is_stmt 0 discriminator 1
 1405 0534 FFF7FEFF 		bl	ulPortSetInterruptMask
 1406              	.LVL197:
 1407              	.L171:
 1408 0538 FEE7     		b	.L171
 1409              	.LVL198:
 1410              	.L170:
1516:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	if( ( ( xQUEUE * ) xQueue )->uxMessagesWaiting == ( ( xQUEUE * ) xQueue )->uxLength )
 1411              		.loc 1 1516 0 is_stmt 1
 1412 053a 826B     		ldr	r2, [r0, #56]
 1413              	.LVL199:
 1414 053c C06B     		ldr	r0, [r0, #60]
 1415              	.LVL200:
1517:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1518:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
1519:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1520:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	else
1521:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1522:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
1523:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1524:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1525:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	return xReturn;
1526:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** }
 1416              		.loc 1 1526 0
 1417 053e 131A     		subs	r3, r2, r0
 1418 0540 5842     		rsbs	r0, r3, #0
 1419              	.LVL201:
 1420 0542 5841     		adcs	r0, r0, r3
 1421 0544 08BD     		pop	{r3, pc}
 1422              		.cfi_endproc
 1423              	.LFE16:
 1425              		.align	1
 1426              		.global	xQueueCRSend
 1427              		.thumb
 1428              		.thumb_func
 1430              	xQueueCRSend:
 1431              	.LFB17:
1527:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1528:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1529:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1530:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1531:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRSend( xQueueHandle xQueue, const void *pvItemToQueue, portTickType xT
1532:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1432              		.loc 1 1532 0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 0
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
 1436              	.LVL202:
 1437 0546 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1438              	.LCFI17:
 1439              		.cfi_def_cfa_offset 24
 1440              		.cfi_offset 4, -24
 1441              		.cfi_offset 5, -20
 1442              		.cfi_offset 6, -16
 1443              		.cfi_offset 7, -12
 1444              		.cfi_offset 8, -8
 1445              		.cfi_offset 14, -4
 1446              		.loc 1 1532 0
 1447 054a 0446     		mov	r4, r0
 1448              	.LVL203:
 1449 054c 0E46     		mov	r6, r1
 1450 054e 1546     		mov	r5, r2
1533:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xReturn;
1534:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
1535:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1536:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
1537:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1538:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
1539:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
1540:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
1541:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1451              		.loc 1 1541 0
 1452 0550 FFF7FEFF 		bl	ulPortSetInterruptMask
 1453              	.LVL204:
 1454              	.LBB12:
 1455              	.LBB13:
1494:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 1456              		.loc 1 1494 0
 1457 0554 FFF7FEFF 		bl	vPortEnterCritical
 1458              	.LVL205:
1496:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1459              		.loc 1 1496 0
 1460 0558 D4F83880 		ldr	r8, [r4, #56]
 1461 055c E76B     		ldr	r7, [r4, #60]
 1462              	.LVL206:
1505:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 1463              		.loc 1 1505 0
 1464 055e FFF7FEFF 		bl	vPortExitCritical
 1465              	.LVL207:
 1466              	.LBE13:
 1467              	.LBE12:
1542:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1543:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1468              		.loc 1 1543 0
 1469 0562 B845     		cmp	r8, r7
 1470 0564 0FD1     		bne	.L173
1544:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1545:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
1546:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				posting? */
1547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
1548:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1549:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
1550:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
1551:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
 1471              		.loc 1 1551 0
 1472 0566 2846     		mov	r0, r5
1547:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
 1473              		.loc 1 1547 0
 1474 0568 4DB1     		cbz	r5, .L174
 1475              		.loc 1 1551 0
 1476 056a 04F11001 		add	r1, r4, #16
 1477 056e FFF7FEFF 		bl	vCoRoutineAddToDelayedList
 1478              	.LVL208:
1552:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
 1479              		.loc 1 1552 0
 1480 0572 0020     		movs	r0, #0
 1481 0574 FFF7FEFF 		bl	vPortClearInterruptMask
 1482              	.LVL209:
1553:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
 1483              		.loc 1 1553 0
 1484 0578 6FF00304 		mvn	r4, #3
 1485              	.LVL210:
 1486 057c 22E0     		b	.L175
 1487              	.LVL211:
 1488              	.L174:
1554:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1555:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1556:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1557:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
 1489              		.loc 1 1557 0
 1490 057e FFF7FEFF 		bl	vPortClearInterruptMask
 1491              	.LVL212:
1558:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 1492              		.loc 1 1558 0
 1493 0582 2C46     		mov	r4, r5
 1494              	.LVL213:
 1495 0584 1EE0     		b	.L175
 1496              	.LVL214:
 1497              	.L173:
1559:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1560:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1561:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1562:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1498              		.loc 1 1562 0
 1499 0586 0020     		movs	r0, #0
 1500 0588 FFF7FEFF 		bl	vPortClearInterruptMask
 1501              	.LVL215:
1563:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1564:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1502              		.loc 1 1564 0
 1503 058c FFF7FEFF 		bl	ulPortSetInterruptMask
 1504              	.LVL216:
1565:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1566:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 1505              		.loc 1 1566 0
 1506 0590 A26B     		ldr	r2, [r4, #56]
 1507 0592 E36B     		ldr	r3, [r4, #60]
 1508 0594 9A42     		cmp	r2, r3
 1509 0596 11D2     		bcs	.L179
1567:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1568:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
1569:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
 1510              		.loc 1 1569 0
 1511 0598 2046     		mov	r0, r4
 1512 059a 3146     		mov	r1, r6
 1513 059c 0022     		movs	r2, #0
 1514 059e FFF776FD 		bl	prvCopyDataToQueue
 1515              	.LVL217:
1570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
1571:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1572:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
1573:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1516              		.loc 1 1573 0
 1517 05a2 636A     		ldr	r3, [r4, #36]
 1518 05a4 0BB9     		cbnz	r3, .L177
 1519              	.L178:
1570:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
 1520              		.loc 1 1570 0
 1521 05a6 0124     		movs	r4, #1
 1522              	.LVL218:
 1523 05a8 09E0     		b	.L176
 1524              	.LVL219:
 1525              	.L177:
1574:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1575:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
1576:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
1577:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
1578:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
1579:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1526              		.loc 1 1579 0
 1527 05aa 04F12400 		add	r0, r4, #36
 1528 05ae FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1529              	.LVL220:
 1530 05b2 0028     		cmp	r0, #0
 1531 05b4 F7D0     		beq	.L178
1580:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1581:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
1582:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
1583:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
 1532              		.loc 1 1583 0
 1533 05b6 6FF00404 		mvn	r4, #4
 1534              	.LVL221:
 1535 05ba 00E0     		b	.L176
 1536              	.LVL222:
 1537              	.L179:
1584:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1585:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1586:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1587:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1588:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1589:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
 1538              		.loc 1 1589 0
 1539 05bc 0024     		movs	r4, #0
 1540              	.LVL223:
 1541              	.L176:
1590:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1591:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1592:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1542              		.loc 1 1592 0
 1543 05be 0020     		movs	r0, #0
 1544 05c0 FFF7FEFF 		bl	vPortClearInterruptMask
 1545              	.LVL224:
 1546              	.L175:
1593:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1594:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
1595:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1547              		.loc 1 1595 0
 1548 05c4 2046     		mov	r0, r4
 1549 05c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1550              		.cfi_endproc
 1551              	.LFE17:
 1553              		.align	1
 1554              		.global	xQueueCRReceive
 1555              		.thumb
 1556              		.thumb_func
 1558              	xQueueCRReceive:
 1559              	.LFB18:
1596:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1597:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1598:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1599:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1600:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1601:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1602:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRReceive( xQueueHandle xQueue, void *pvBuffer, portTickType xTicksToWa
1603:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1560              		.loc 1 1603 0
 1561              		.cfi_startproc
 1562              		@ args = 0, pretend = 0, frame = 0
 1563              		@ frame_needed = 0, uses_anonymous_args = 0
 1564              	.LVL225:
 1565 05ca F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1566              	.LCFI18:
 1567              		.cfi_def_cfa_offset 24
 1568              		.cfi_offset 3, -24
 1569              		.cfi_offset 4, -20
 1570              		.cfi_offset 5, -16
 1571              		.cfi_offset 6, -12
 1572              		.cfi_offset 7, -8
 1573              		.cfi_offset 14, -4
 1574              		.loc 1 1603 0
 1575 05cc 0446     		mov	r4, r0
 1576              	.LVL226:
 1577 05ce 0F46     		mov	r7, r1
 1578 05d0 1546     		mov	r5, r2
1604:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xReturn;
1605:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
1606:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1607:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
1608:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1609:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
1610:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
1611:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
1612:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1579              		.loc 1 1612 0
 1580 05d2 FFF7FEFF 		bl	ulPortSetInterruptMask
 1581              	.LVL227:
1613:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1614:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 )
 1582              		.loc 1 1614 0
 1583 05d6 A66B     		ldr	r6, [r4, #56]
 1584 05d8 7EB9     		cbnz	r6, .L184
1615:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1616:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
1617:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				leave with nothing? */
1618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
1619:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1620:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
1621:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
1622:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
 1585              		.loc 1 1622 0
 1586 05da 2846     		mov	r0, r5
1618:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( portTickType ) 0 )
 1587              		.loc 1 1618 0
 1588 05dc 4DB1     		cbz	r5, .L185
 1589              		.loc 1 1622 0
 1590 05de 04F12401 		add	r1, r4, #36
 1591 05e2 FFF7FEFF 		bl	vCoRoutineAddToDelayedList
 1592              	.LVL228:
1623:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
 1593              		.loc 1 1623 0
 1594 05e6 3046     		mov	r0, r6
 1595 05e8 FFF7FEFF 		bl	vPortClearInterruptMask
 1596              	.LVL229:
1624:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
 1597              		.loc 1 1624 0
 1598 05ec 6FF00304 		mvn	r4, #3
 1599              	.LVL230:
 1600 05f0 2CE0     		b	.L186
 1601              	.LVL231:
 1602              	.L185:
1625:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1626:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				else
1627:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1628:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
 1603              		.loc 1 1628 0
 1604 05f2 FFF7FEFF 		bl	vPortClearInterruptMask
 1605              	.LVL232:
1629:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 1606              		.loc 1 1629 0
 1607 05f6 2C46     		mov	r4, r5
 1608              	.LVL233:
 1609 05f8 28E0     		b	.L186
 1610              	.LVL234:
 1611              	.L184:
1630:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1631:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1632:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1633:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1612              		.loc 1 1633 0
 1613 05fa 0020     		movs	r0, #0
 1614 05fc FFF7FEFF 		bl	vPortClearInterruptMask
 1615              	.LVL235:
1634:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1635:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
 1616              		.loc 1 1635 0
 1617 0600 FFF7FEFF 		bl	ulPortSetInterruptMask
 1618              	.LVL236:
1636:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1637:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1619              		.loc 1 1637 0
 1620 0604 A36B     		ldr	r3, [r4, #56]
 1621 0606 EBB1     		cbz	r3, .L191
1638:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1639:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
1640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1622              		.loc 1 1640 0
 1623 0608 E368     		ldr	r3, [r4, #12]
 1624 060a 226C     		ldr	r2, [r4, #64]
1641:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 1625              		.loc 1 1641 0
 1626 060c 6168     		ldr	r1, [r4, #4]
1640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1627              		.loc 1 1640 0
 1628 060e 9B18     		adds	r3, r3, r2
 1629              		.loc 1 1641 0
 1630 0610 8B42     		cmp	r3, r1
1640:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1631              		.loc 1 1640 0
 1632 0612 E360     		str	r3, [r4, #12]
1642:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxQueue->pcReadFrom = pxQueue->pcHead;
 1633              		.loc 1 1643 0
 1634 0614 28BF     		it	cs
 1635 0616 2368     		ldrcs	r3, [r4, #0]
1644:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
1646:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize )
 1636              		.loc 1 1646 0
 1637 0618 3846     		mov	r0, r7
1643:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					pxQueue->pcReadFrom = pxQueue->pcHead;
 1638              		.loc 1 1643 0
 1639 061a 28BF     		it	cs
 1640 061c E360     		strcs	r3, [r4, #12]
1645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
 1641              		.loc 1 1645 0
 1642 061e A36B     		ldr	r3, [r4, #56]
 1643              		.loc 1 1646 0
 1644 0620 E168     		ldr	r1, [r4, #12]
1645:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
 1645              		.loc 1 1645 0
 1646 0622 013B     		subs	r3, r3, #1
 1647 0624 A363     		str	r3, [r4, #56]
 1648              		.loc 1 1646 0
 1649 0626 FFF7FEFF 		bl	memcpy
 1650              	.LVL237:
1647:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
1649:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1650:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
1651:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1651              		.loc 1 1651 0
 1652 062a 2369     		ldr	r3, [r4, #16]
 1653 062c 0BB9     		cbnz	r3, .L189
 1654              	.L190:
1648:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
 1655              		.loc 1 1648 0
 1656 062e 0124     		movs	r4, #1
 1657              	.LVL238:
 1658 0630 09E0     		b	.L187
 1659              	.LVL239:
 1660              	.L189:
1652:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1653:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
1654:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
1655:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
1656:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
1657:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1661              		.loc 1 1657 0
 1662 0632 04F11000 		add	r0, r4, #16
 1663 0636 FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1664              	.LVL240:
 1665 063a 0028     		cmp	r0, #0
 1666 063c F7D0     		beq	.L190
1658:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1659:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
 1667              		.loc 1 1659 0
 1668 063e 6FF00404 		mvn	r4, #4
 1669              	.LVL241:
 1670 0642 00E0     		b	.L187
 1671              	.LVL242:
 1672              	.L191:
1660:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1661:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1662:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1663:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			else
1664:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1665:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
 1673              		.loc 1 1665 0
 1674 0644 1C46     		mov	r4, r3
 1675              	.LVL243:
 1676              	.L187:
1666:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1667:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1668:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
 1677              		.loc 1 1668 0
 1678 0646 0020     		movs	r0, #0
 1679 0648 FFF7FEFF 		bl	vPortClearInterruptMask
 1680              	.LVL244:
 1681              	.L186:
1669:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1670:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
1671:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1682              		.loc 1 1671 0
 1683 064c 2046     		mov	r0, r4
 1684 064e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1685              		.cfi_endproc
 1686              	.LFE18:
 1688              		.align	1
 1689              		.global	xQueueCRSendFromISR
 1690              		.thumb
 1691              		.thumb_func
 1693              	xQueueCRSendFromISR:
 1694              	.LFB19:
1672:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1673:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1674:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1675:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1676:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1677:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1678:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRSendFromISR( xQueueHandle xQueue, const void *pvItemToQueue, signed p
1679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1695              		.loc 1 1679 0
 1696              		.cfi_startproc
 1697              		@ args = 0, pretend = 0, frame = 0
 1698              		@ frame_needed = 0, uses_anonymous_args = 0
 1699              	.LVL245:
 1700 0650 38B5     		push	{r3, r4, r5, lr}
 1701              	.LCFI19:
 1702              		.cfi_def_cfa_offset 16
 1703              		.cfi_offset 3, -16
 1704              		.cfi_offset 4, -12
 1705              		.cfi_offset 5, -8
 1706              		.cfi_offset 14, -4
 1707              		.loc 1 1679 0
 1708 0652 1546     		mov	r5, r2
1680:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
1681:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1682:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
1683:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1684:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
1685:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
1686:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 1709              		.loc 1 1686 0
 1710 0654 C36B     		ldr	r3, [r0, #60]
 1711 0656 826B     		ldr	r2, [r0, #56]
 1712              	.LVL246:
1679:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1713              		.loc 1 1679 0
 1714 0658 0446     		mov	r4, r0
 1715              		.loc 1 1686 0
 1716 065a 9A42     		cmp	r2, r3
 1717 065c 0CD2     		bcs	.L197
1687:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1688:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
 1718              		.loc 1 1688 0
 1719 065e 0022     		movs	r2, #0
 1720 0660 FFF715FD 		bl	prvCopyDataToQueue
 1721              	.LVL247:
1689:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1690:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
1691:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
1692:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
 1722              		.loc 1 1692 0
 1723 0664 45B9     		cbnz	r5, .L197
1693:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1694:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1724              		.loc 1 1694 0
 1725 0666 636A     		ldr	r3, [r4, #36]
 1726 0668 33B1     		cbz	r3, .L197
1695:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1696:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1727              		.loc 1 1696 0
 1728 066a 04F12400 		add	r0, r4, #36
 1729 066e FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1730              	.LVL248:
 1731 0672 051C     		adds	r5, r0, #0
 1732              	.LVL249:
 1733 0674 18BF     		it	ne
 1734 0676 0125     		movne	r5, #1
 1735              	.L197:
1697:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1698:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						return pdTRUE;
1699:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1700:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1701:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1702:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1703:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1704:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
1705:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1736              		.loc 1 1705 0
 1737 0678 2846     		mov	r0, r5
 1738 067a 38BD     		pop	{r3, r4, r5, pc}
 1739              		.cfi_endproc
 1740              	.LFE19:
 1742              		.align	1
 1743              		.global	xQueueCRReceiveFromISR
 1744              		.thumb
 1745              		.thumb_func
 1747              	xQueueCRReceiveFromISR:
 1748              	.LFB20:
1706:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1707:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1708:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1709:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1710:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1711:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1712:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xQueueCRReceiveFromISR( xQueueHandle xQueue, void *pvBuffer, signed portBASE_
1713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1749              		.loc 1 1713 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 1753              	.LVL250:
1714:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	signed portBASE_TYPE xReturn;
1715:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE * pxQueue;
1716:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1717:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
1718:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1719:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
1720:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
1721:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 1754              		.loc 1 1721 0
 1755 067c 836B     		ldr	r3, [r0, #56]
1713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1756              		.loc 1 1713 0
 1757 067e 70B5     		push	{r4, r5, r6, lr}
 1758              	.LCFI20:
 1759              		.cfi_def_cfa_offset 16
 1760              		.cfi_offset 4, -16
 1761              		.cfi_offset 5, -12
 1762              		.cfi_offset 6, -8
 1763              		.cfi_offset 14, -4
1713:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1764              		.loc 1 1713 0
 1765 0680 0446     		mov	r4, r0
 1766 0682 1546     		mov	r5, r2
 1767              		.loc 1 1721 0
 1768 0684 FBB1     		cbz	r3, .L207
1722:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1723:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
1724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1769              		.loc 1 1724 0
 1770 0686 C368     		ldr	r3, [r0, #12]
 1771 0688 026C     		ldr	r2, [r0, #64]
 1772              	.LVL251:
1725:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 1773              		.loc 1 1725 0
 1774 068a 4668     		ldr	r6, [r0, #4]
1724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1775              		.loc 1 1724 0
 1776 068c 9B18     		adds	r3, r3, r2
 1777              		.loc 1 1725 0
 1778 068e B342     		cmp	r3, r6
1724:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			pxQueue->pcReadFrom += pxQueue->uxItemSize;
 1779              		.loc 1 1724 0
 1780 0690 C360     		str	r3, [r0, #12]
1726:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1727:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				pxQueue->pcReadFrom = pxQueue->pcHead;
 1781              		.loc 1 1727 0
 1782 0692 24BF     		itt	cs
 1783 0694 0368     		ldrcs	r3, [r0, #0]
 1784 0696 C360     		strcs	r3, [r0, #12]
1728:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1729:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 1785              		.loc 1 1729 0
 1786 0698 836B     		ldr	r3, [r0, #56]
 1787 069a 013B     		subs	r3, r3, #1
 1788 069c 8363     		str	r3, [r0, #56]
1730:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 1789              		.loc 1 1730 0
 1790 069e 0846     		mov	r0, r1
 1791              	.LVL252:
 1792 06a0 E168     		ldr	r1, [r4, #12]
 1793              	.LVL253:
 1794 06a2 FFF7FEFF 		bl	memcpy
 1795              	.LVL254:
1731:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1732:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
 1796              		.loc 1 1732 0
 1797 06a6 2B68     		ldr	r3, [r5, #0]
 1798 06a8 0BB1     		cbz	r3, .L205
 1799              	.L206:
1733:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1735:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				{
1736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1737:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					{
1738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
1739:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					}
1740:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				}
1741:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1742:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1743:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 1800              		.loc 1 1743 0
 1801 06aa 0120     		movs	r0, #1
 1802 06ac 70BD     		pop	{r4, r5, r6, pc}
 1803              	.L205:
1734:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1804              		.loc 1 1734 0
 1805 06ae 2369     		ldr	r3, [r4, #16]
 1806 06b0 002B     		cmp	r3, #0
 1807 06b2 FAD0     		beq	.L206
1736:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1808              		.loc 1 1736 0
 1809 06b4 04F11000 		add	r0, r4, #16
 1810 06b8 FFF7FEFF 		bl	xCoRoutineRemoveFromEventList
 1811              	.LVL255:
 1812 06bc 0028     		cmp	r0, #0
 1813 06be F4D0     		beq	.L206
1738:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
 1814              		.loc 1 1738 0
 1815 06c0 0120     		movs	r0, #1
 1816 06c2 2860     		str	r0, [r5, #0]
 1817 06c4 70BD     		pop	{r4, r5, r6, pc}
 1818              	.LVL256:
 1819              	.L207:
1744:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1745:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		else
1746:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1747:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 1820              		.loc 1 1747 0
 1821 06c6 1846     		mov	r0, r3
 1822              	.LVL257:
1748:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1749:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1750:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		return xReturn;
1751:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1823              		.loc 1 1751 0
 1824 06c8 70BD     		pop	{r4, r5, r6, pc}
 1825              		.cfi_endproc
 1826              	.LFE20:
 1828              		.align	1
 1829              		.global	vQueueWaitForMessageRestricted
 1830              		.thumb
 1831              		.thumb_func
 1833              	vQueueWaitForMessageRestricted:
 1834              	.LFB21:
1752:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1753:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
1754:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1755:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1756:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
1757:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1758:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
1759:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1760:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE ux;
1761:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1762:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
1763:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		a free slot. */
1764:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZ
1765:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1766:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1767:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1768:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
1769:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1770:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
1771:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				break;
1772:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1773:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1774:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1775:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1776:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
1777:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1778:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1779:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
1780:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1781:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	static void prvQueueUnregisterQueue( xQueueHandle xQueue )
1782:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
1783:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	unsigned portBASE_TYPE ux;
1784:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1785:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
1786:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		registry. */
1787:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZ
1788:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1789:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
1790:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			{
1791:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
1792:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
1793:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 				break;
1794:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			}
1795:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1796:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1797:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
1798:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1799:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
1800:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1801:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1802:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** #if ( configUSE_TIMERS == 1 )
1803:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1804:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
1805:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	{
 1835              		.loc 1 1805 0
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 0
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 1839              	.LVL258:
 1840 06ca 38B5     		push	{r3, r4, r5, lr}
 1841              	.LCFI21:
 1842              		.cfi_def_cfa_offset 16
 1843              		.cfi_offset 3, -16
 1844              		.cfi_offset 4, -12
 1845              		.cfi_offset 5, -8
 1846              		.cfi_offset 14, -4
 1847              		.loc 1 1805 0
 1848 06cc 0446     		mov	r4, r0
 1849              	.LVL259:
 1850 06ce 0D46     		mov	r5, r1
1806:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	xQUEUE *pxQueue;
1807:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1808:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		pxQueue = ( xQUEUE * ) xQueue;
1809:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1810:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* This function should not be called by application code hence the
1811:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1812:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
1813:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		It can result in vListInsert() being called on a list that can only
1814:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
1815:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
1816:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		section. */
1817:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 
1818:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
1819:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
1820:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
1821:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
1822:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
1823:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
1824:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1851              		.loc 1 1824 0
 1852 06d0 FFF7FEFF 		bl	vPortEnterCritical
 1853              	.LVL260:
 1854 06d4 636C     		ldr	r3, [r4, #68]
 1855 06d6 0133     		adds	r3, r3, #1
 1856 06d8 01D1     		bne	.L215
 1857              		.loc 1 1824 0 is_stmt 0 discriminator 1
 1858 06da 0023     		movs	r3, #0
 1859 06dc 6364     		str	r3, [r4, #68]
 1860              	.L215:
 1861              		.loc 1 1824 0 discriminator 2
 1862 06de A36C     		ldr	r3, [r4, #72]
 1863 06e0 0133     		adds	r3, r3, #1
 1864 06e2 01D1     		bne	.L216
 1865              		.loc 1 1824 0 discriminator 3
 1866 06e4 0023     		movs	r3, #0
 1867 06e6 A364     		str	r3, [r4, #72]
 1868              	.L216:
 1869              		.loc 1 1824 0 discriminator 4
 1870 06e8 FFF7FEFF 		bl	vPortExitCritical
 1871              	.LVL261:
1825:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 1872              		.loc 1 1825 0 is_stmt 1 discriminator 4
 1873 06ec A36B     		ldr	r3, [r4, #56]
 1874 06ee 23B9     		cbnz	r3, .L217
1826:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		{
1827:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
1828:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1875              		.loc 1 1828 0
 1876 06f0 04F12400 		add	r0, r4, #36
 1877 06f4 2946     		mov	r1, r5
 1878 06f6 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 1879              	.LVL262:
 1880              	.L217:
1829:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		}
1830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvUnlockQueue( pxQueue );
 1881              		.loc 1 1830 0
 1882 06fa 2046     		mov	r0, r4
1831:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 	}
 1883              		.loc 1 1831 0
 1884 06fc BDE83840 		pop	{r3, r4, r5, lr}
1830:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/queue.c **** 		prvUnlockQueue( pxQueue );
 1885              		.loc 1 1830 0
 1886 0700 FFF77EBC 		b	prvUnlockQueue
 1887              	.LVL263:
 1888              		.cfi_endproc
 1889              	.LFE21:
 1891              	.Letext0:
 1892              		.file 2 "/opt/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI/bin/../lib/gcc/arm-none-eabi/4.7.2
 1893              		.file 3 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/portable/GCC/ARM_CM4F/p
 1894              		.file 4 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/list.h"
 1895              		.file 5 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/task.h"
 1896              		.file 6 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/queue.h"
 1897              		.file 7 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/portable.h"
 1898              		.file 8 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/FreeRTOS/Source/include/croutine.h"
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
     /tmp/ccLBxTcb.s:18     .text:00000000 $t
     /tmp/ccLBxTcb.s:22     .text:00000000 prvUnlockQueue
     /tmp/ccLBxTcb.s:120    .text:00000068 prvCopyDataFromQueue
     /tmp/ccLBxTcb.s:173    .text:0000008e prvCopyDataToQueue
     /tmp/ccLBxTcb.s:270    .text:000000e6 xQueueGenericReset
     /tmp/ccLBxTcb.s:363    .text:0000014a xQueueGenericCreate
     /tmp/ccLBxTcb.s:437    .text:0000018a xQueueGenericSend
     /tmp/ccLBxTcb.s:651    .text:00000280 xQueueCreateMutex
     /tmp/ccLBxTcb.s:736    .text:000002ce xQueueGenericSendFromISR
     /tmp/ccLBxTcb.s:856    .text:00000340 xQueueGenericReceive
     /tmp/ccLBxTcb.s:1114   .text:00000468 xQueueReceiveFromISR
     /tmp/ccLBxTcb.s:1234   .text:000004d6 uxQueueMessagesWaiting
     /tmp/ccLBxTcb.s:1276   .text:000004f0 uxQueueMessagesWaitingFromISR
     /tmp/ccLBxTcb.s:1310   .text:000004fe vQueueDelete
     /tmp/ccLBxTcb.s:1352   .text:0000051a xQueueIsQueueEmptyFromISR
     /tmp/ccLBxTcb.s:1390   .text:00000530 xQueueIsQueueFullFromISR
     /tmp/ccLBxTcb.s:1430   .text:00000546 xQueueCRSend
     /tmp/ccLBxTcb.s:1558   .text:000005ca xQueueCRReceive
     /tmp/ccLBxTcb.s:1693   .text:00000650 xQueueCRSendFromISR
     /tmp/ccLBxTcb.s:1747   .text:0000067c xQueueCRReceiveFromISR
     /tmp/ccLBxTcb.s:1833   .text:000006ca vQueueWaitForMessageRestricted
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.4549fa27c92e72ea66ffdb0399fbe8da
                           .group:00000000 wm4.newlib.h.8.e1d498e57c12962fc6d7be5061a6981a
                           .group:00000000 wm4.config.h.148.52fe83653334d06815a0c57b59a3e584
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdlib.h.18.6f6153fd5cb89acd58c0f0ab1f77e147
                           .group:00000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.58b23a9f0faf0e7f2dfe7e2d33154afd
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.55.22eafe60f8565d898cbb44515781114b
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.235.d9f4f80b8c4429535175712282cda6a6
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stddef.h.40.b60a1c1ee3f272eef5327a730cbabca6
                           .group:00000000 wm4.projdefs.h.76.214f319a5937dae232f0ee2912b07e1d
                           .group:00000000 wm4.FreeRTOSConfig.h.79.5ce50f1f04ae36d94916fa991aa4b8d7
                           .group:00000000 wm4.portmacro.h.77.0810e0eb8c6edf5adf0d27242484a945
                           .group:00000000 wm4.portable.h.332.e25bf3f97ebf50a0f90736144cb8c3f8
                           .group:00000000 wm4.mpu_wrappers.h.76.3abcfc7ebb6d78909ee0b4ad2f20f282
                           .group:00000000 wm4.FreeRTOS.h.159.741cbf33489b2c951994722716e9692e
                           .group:00000000 wm4.list.h.105.6a6307ce3396638a078c02ff83387dc6
                           .group:00000000 wm4.task.h.94.33ec4de8c3f825901c54e6cf58507761
                           .group:00000000 wm4.queue.h.77.c405a8575cf45ee56672246904131fa4
                           .group:00000000 wm4.croutine.h.76.348a46e106a704888b711d08f2a8ea48

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vTaskMissedYield
vPortExitCritical
memcpy
vTaskPriorityDisinherit
ulPortSetInterruptMask
vPortYield
vListInitialise
pvPortMalloc
vPortFree
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
vPortClearInterruptMask
xTaskGetCurrentTaskHandle
vTaskPriorityInherit
vCoRoutineAddToDelayedList
xCoRoutineRemoveFromEventList
vTaskPlaceOnEventListRestricted
