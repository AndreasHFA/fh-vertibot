   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"Vector_math.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	1
  21              		.global	VectorDotProduct
  22              		.thumb
  23              		.thumb_func
  25              	VectorDotProduct:
  26              	.LFB0:
  27              		.file 1 "/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c"
   1:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** #include <Vector_math.h>
   2:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 
   3:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 
   4:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** //Computes the dot product of two vectors 
   5:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** float VectorDotProduct(float vector1[3],float vector2[3]) 
   6:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** {   
  28              		.loc 1 6 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
   7:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	int c = 0;
   8:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	float op=0;      
  38              		.loc 1 8 0
  39 0002 9FED070A 		flds	s0, .L5
   6:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** {   
  40              		.loc 1 6 0
  41 0006 0023     		movs	r3, #0
  42              	.LVL1:
  43              	.L3:
  44 0008 C418     		adds	r4, r0, r3
  45 000a CA18     		adds	r2, r1, r3
   9:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for( c = 0 ; c < 3 ; c++ )   
  10:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	{   
  11:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 		op += vector1[c] * vector2[c];   
  46              		.loc 1 11 0 discriminator 2
  47 000c 94ED007A 		flds	s14, [r4]
  48 0010 D2ED007A 		flds	s15, [r2]
  49 0014 0433     		adds	r3, r3, #4
   9:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for( c = 0 ; c < 3 ; c++ )   
  50              		.loc 1 9 0 discriminator 2
  51 0016 0C2B     		cmp	r3, #12
  52              		.loc 1 11 0 discriminator 2
  53 0018 A7EE270A 		vfma.f32	s0, s14, s15
  54              	.LVL2:
   9:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for( c = 0 ; c < 3 ; c++ )   
  55              		.loc 1 9 0 discriminator 2
  56 001c F4D1     		bne	.L3
  12:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	}      
  13:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	return op;  
  14:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** }  
  57              		.loc 1 14 0
  58 001e 10BD     		pop	{r4, pc}
  59              	.L6:
  60              		.align	2
  61              	.L5:
  62 0020 00000000 		.word	0
  63              		.cfi_endproc
  64              	.LFE0:
  66              		.align	1
  67              		.global	VectorCrossProduct
  68              		.thumb
  69              		.thumb_func
  71              	VectorCrossProduct:
  72              	.LFB1:
  15:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 
  16:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** //Computes the cross product of two vectors 
  17:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** void VectorCrossProduct(float vectorOut[3], float v1[3],float v2[3]) 
  18:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** {   
  73              		.loc 1 18 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.LVL3:
  19:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	vectorOut[0] = (v1[1]*v2[2]) - (v1[2]*v2[1]);   
  79              		.loc 1 19 0
  80 0024 92ED017A 		flds	s14, [r2, #4]
  81 0028 D1ED027A 		flds	s15, [r1, #8]
  82 002c D1ED016A 		flds	s13, [r1, #4]
  83 0030 67EE677A 		fnmuls	s15, s14, s15
  84 0034 92ED027A 		flds	s14, [r2, #8]
  85 0038 E6EE877A 		vfma.f32	s15, s13, s14
  86 003c C0ED007A 		fsts	s15, [r0]
  20:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	vectorOut[1] = (v1[2]*v2[0]) - (v1[0]*v2[2]);   
  87              		.loc 1 20 0
  88 0040 92ED027A 		flds	s14, [r2, #8]
  89 0044 D1ED007A 		flds	s15, [r1]
  90 0048 D1ED026A 		flds	s13, [r1, #8]
  91 004c 67EE677A 		fnmuls	s15, s14, s15
  92 0050 92ED007A 		flds	s14, [r2]
  93 0054 E6EE877A 		vfma.f32	s15, s13, s14
  94 0058 C0ED017A 		fsts	s15, [r0, #4]
  21:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	vectorOut[2] = (v1[0]*v2[1]) - (v1[1]*v2[0]); 
  95              		.loc 1 21 0
  96 005c 92ED007A 		flds	s14, [r2]
  97 0060 D1ED017A 		flds	s15, [r1, #4]
  98 0064 D1ED006A 		flds	s13, [r1]
  99 0068 67EE677A 		fnmuls	s15, s14, s15
 100 006c 92ED017A 		flds	s14, [r2, #4]
 101 0070 E6EE877A 		vfma.f32	s15, s13, s14
 102 0074 C0ED027A 		fsts	s15, [r0, #8]
 103 0078 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE1:
 107              		.align	1
 108              		.global	VectorScale
 109              		.thumb
 110              		.thumb_func
 112              	VectorScale:
 113              	.LFB2:
  22:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** }  
  23:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 
  24:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** //Multiply the vector by a scalar.  
  25:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** void VectorScale(float vectorOut[3],float vectorIn[3], float scale2) 
  26:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** {   
 114              		.loc 1 26 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              	.LVL4:
 119 007a 10B5     		push	{r4, lr}
 120              	.LCFI1:
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 4, -8
 123              		.cfi_offset 14, -4
 124              		.loc 1 26 0
 125 007c 0023     		movs	r3, #0
 126              	.LVL5:
 127              	.L10:
 128 007e CC18     		adds	r4, r1, r3
  27:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	int c = 0;
  28:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for( c = 0 ; c < 3 ; c++ )   
  29:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	{    
  30:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 		vectorOut[c] = vectorIn[c] * scale2;    
 129              		.loc 1 30 0 discriminator 2
 130 0080 D4ED007A 		flds	s15, [r4]
 131 0084 C218     		adds	r2, r0, r3
 132 0086 67EE807A 		fmuls	s15, s15, s0
 133 008a 0433     		adds	r3, r3, #4
  28:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for( c = 0 ; c < 3 ; c++ )   
 134              		.loc 1 28 0 discriminator 2
 135 008c 0C2B     		cmp	r3, #12
 136              		.loc 1 30 0 discriminator 2
 137 008e C2ED007A 		fsts	s15, [r2]
  28:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for( c = 0 ; c < 3 ; c++ )   
 138              		.loc 1 28 0 discriminator 2
 139 0092 F4D1     		bne	.L10
  31:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	} 
  32:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** }  
 140              		.loc 1 32 0
 141 0094 10BD     		pop	{r4, pc}
 142              		.cfi_endproc
 143              	.LFE2:
 145              		.align	1
 146              		.global	VectorAdd
 147              		.thumb
 148              		.thumb_func
 150              	VectorAdd:
 151              	.LFB3:
  33:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 
  34:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** void VectorAdd(float vectorOut[3],float vectorIn1[3], float vectorIn2[3]) 
  35:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** {
 152              		.loc 1 35 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              	.LVL6:
 157 0096 70B5     		push	{r4, r5, r6, lr}
 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 16
 160              		.cfi_offset 4, -16
 161              		.cfi_offset 5, -12
 162              		.cfi_offset 6, -8
 163              		.cfi_offset 14, -4
 164              		.loc 1 35 0
 165 0098 0023     		movs	r3, #0
 166              	.LVL7:
 167              	.L13:
 168 009a CE18     		adds	r6, r1, r3
 169 009c D518     		adds	r5, r2, r3
  36:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	int c = 0;
  37:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c ****    
  38:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for(c = 0 ; c < 3 ; c++ )   
  39:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	{      
  40:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 		vectorOut[c] = vectorIn1[c] + vectorIn2[c];   
 170              		.loc 1 40 0 discriminator 2
 171 009e 96ED007A 		flds	s14, [r6]
 172 00a2 D5ED007A 		flds	s15, [r5]
 173 00a6 C418     		adds	r4, r0, r3
 174 00a8 77EE277A 		fadds	s15, s14, s15
 175 00ac 0433     		adds	r3, r3, #4
  38:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for(c = 0 ; c < 3 ; c++ )   
 176              		.loc 1 38 0 discriminator 2
 177 00ae 0C2B     		cmp	r3, #12
 178              		.loc 1 40 0 discriminator 2
 179 00b0 C4ED007A 		fsts	s15, [r4]
  38:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for(c = 0 ; c < 3 ; c++ )   
 180              		.loc 1 38 0 discriminator 2
 181 00b4 F1D1     		bne	.L13
  41:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	} 
  42:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** } 
 182              		.loc 1 42 0
 183 00b6 70BD     		pop	{r4, r5, r6, pc}
 184              		.cfi_endproc
 185              	.LFE3:
 187              		.align	1
 188              		.global	MatrixMultiply
 189              		.thumb
 190              		.thumb_func
 192              	MatrixMultiply:
 193              	.LFB4:
  43:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 
  44:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 
  45:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 
  46:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** //Multiply two 3x3 matrices. 
  47:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** void MatrixMultiply(float a[3][3], float b[3][3],float mat[3][3]) 
  48:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** {   
 194              		.loc 1 48 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 16
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              	.LVL8:
 199 00b8 2DE9FF47 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, lr}
 200              	.LCFI3:
 201              		.cfi_def_cfa_offset 48
 202              		.cfi_offset 0, -48
 203              		.cfi_offset 1, -44
 204              		.cfi_offset 2, -40
 205              		.cfi_offset 3, -36
 206              		.cfi_offset 4, -32
 207              		.cfi_offset 5, -28
 208              		.cfi_offset 6, -24
 209              		.cfi_offset 7, -20
 210              		.cfi_offset 8, -16
 211              		.cfi_offset 9, -12
 212              		.cfi_offset 10, -8
 213              		.cfi_offset 14, -4
 214              		.loc 1 48 0
 215 00bc 0025     		movs	r5, #0
 216              	.LVL9:
 217              	.L15:
 218 00be 4719     		adds	r7, r0, r5
 219 00c0 5619     		adds	r6, r2, r5
 220              		.loc 1 48 0 is_stmt 0 discriminator 1
 221 00c2 0024     		movs	r4, #0
 222              	.LVL10:
 223              	.L20:
 224 00c4 0023     		movs	r3, #0
 225              	.LVL11:
 226              	.L18:
 227 00c6 03EB430A 		add	r10, r3, r3, lsl #1
 228 00ca 01EB0408 		add	r8, r1, r4
 229 00ce 07EB0309 		add	r9, r7, r3
 230 00d2 D044     		add	r8, r8, r10
  49:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	float op[3];    
  50:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	int x = 0;
  51:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	int y = 0;
  52:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	int w = 0;
  53:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	//float test = 0;
  54:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	
  55:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for(  x = 0 ; x < 3 ; x++ )   
  56:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	{     
  57:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 		for(  y = 0 ; y < 3 ; y++ )     
  58:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 		{       
  59:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 			for(  w = 0 ; w < 3 ; w++ )       
  60:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 			{        
  61:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 				op[w] = a[x][w]*b[w][y];       
 231              		.loc 1 61 0 is_stmt 1 discriminator 2
 232 00d4 99ED007A 		flds	s14, [r9]
 233 00d8 D8ED007A 		flds	s15, [r8]
 234 00dc 0DF1100C 		add	ip, sp, #16
 235 00e0 9C44     		add	ip, ip, r3
 236 00e2 67EE277A 		fmuls	s15, s14, s15
 237 00e6 0433     		adds	r3, r3, #4
  59:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 			for(  w = 0 ; w < 3 ; w++ )       
 238              		.loc 1 59 0 discriminator 2
 239 00e8 0C2B     		cmp	r3, #12
 240              		.loc 1 61 0 discriminator 2
 241 00ea 4CED037A 		fsts	s15, [ip, #-12]
  59:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 			for(  w = 0 ; w < 3 ; w++ )       
 242              		.loc 1 59 0 discriminator 2
 243 00ee EAD1     		bne	.L18
  62:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 			}        
  63:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 			mat[x][y] = 0;       
  64:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 			mat[x][y] = op[0] + op[1] + op[2];              
 244              		.loc 1 64 0
 245 00f0 9DED017A 		flds	s14, [sp, #4]
 246 00f4 DDED027A 		flds	s15, [sp, #8]
 247 00f8 77EE277A 		fadds	s15, s14, s15
 248 00fc 9DED037A 		flds	s14, [sp, #12]
 249 0100 3319     		adds	r3, r6, r4
 250 0102 77EE877A 		fadds	s15, s15, s14
 251 0106 0434     		adds	r4, r4, #4
  57:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 		for(  y = 0 ; y < 3 ; y++ )     
 252              		.loc 1 57 0
 253 0108 0C2C     		cmp	r4, #12
 254              		.loc 1 64 0
 255 010a C3ED007A 		fsts	s15, [r3]
  57:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 		for(  y = 0 ; y < 3 ; y++ )     
 256              		.loc 1 57 0
 257 010e D9D1     		bne	.L20
 258 0110 0C35     		adds	r5, r5, #12
  55:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	for(  x = 0 ; x < 3 ; x++ )   
 259              		.loc 1 55 0
 260 0112 242D     		cmp	r5, #36
 261 0114 D3D1     		bne	.L15
  65:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 			//test=mat[x][y];     
  66:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 		}   
  67:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** 	} 
  68:/home/user/Desktop/STM32-Projekte/FH-Vertibot/src/project_src/Vector_math.c **** } 
 262              		.loc 1 68 0
 263 0116 04B0     		add	sp, sp, #16
 264              		@ sp needed
 265 0118 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 266              		.cfi_endproc
 267              	.LFE4:
 269              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 Vector_math.c
     /tmp/ccoCJ867.s:20     .text:00000000 $t
     /tmp/ccoCJ867.s:25     .text:00000000 VectorDotProduct
     /tmp/ccoCJ867.s:62     .text:00000020 $d
     /tmp/ccoCJ867.s:66     .text:00000024 $t
     /tmp/ccoCJ867.s:71     .text:00000024 VectorCrossProduct
     /tmp/ccoCJ867.s:112    .text:0000007a VectorScale
     /tmp/ccoCJ867.s:150    .text:00000096 VectorAdd
     /tmp/ccoCJ867.s:192    .text:000000b8 MatrixMultiply
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.e41257821655b1beb88e1ee583b76eae

NO UNDEFINED SYMBOLS
